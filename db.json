{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"cf3b11c39d1a4bc38bcea9d2bbce3e42aa6fac14","modified":1470131255000},{"_id":"themes/yelee/.DS_Store","hash":"00bdad0088e6d47b148105fd7efc79780a751e30","modified":1470105186000},{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1469958012000},{"_id":"themes/yelee/_config.yml","hash":"8080cb23fbf7ea9ec6f0ae30f964b1821764e8e9","modified":1470127844000},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1469958012000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1469958012000},{"_id":"source/_posts/README.md","hash":"876ad95e5f2ac4ff83c595a8daa1ef892f39cf48","modified":1470131239000},{"_id":"source/_posts/.DS_Store","hash":"5cf3889b0bf0208566e6e4be505e9ae79215f5f1","modified":1470131394000},{"_id":"source/_posts/WebView代码交互.md","hash":"b0058166f148022291161b75cfa459076923d590","modified":1470131389000},{"_id":"source/_posts/WebView基本用法.md","hash":"789eb37753a4160a4f02c0ae7105d342764741e0","modified":1470131393000},{"_id":"source/_posts/WebView性能优化.md","hash":"78b65574562d96c84bc3fe44bec81f66b7ffa1d7","modified":1470131401000},{"_id":"themes/yelee/.git/COMMIT_EDITMSG","hash":"6b803d3e9f72c81b4370fa11710e092f3f3e1000","modified":1470127844000},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1469958012000},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1469958012000},{"_id":"themes/yelee/.git/FETCH_HEAD","hash":"18b5ad8c97fb45842e8f2804363755acc68707e8","modified":1470128217000},{"_id":"themes/yelee/.git/ORIG_HEAD","hash":"90d1524cfb6be4f69288b5fc30341e44f06e8427","modified":1470127844000},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1469957945000},{"_id":"themes/yelee/.git/config","hash":"0e90c0ac9fb4f4092936c5caacede144a043989a","modified":1469958387000},{"_id":"themes/yelee/.git/index","hash":"cdf687b9c9aee2c4c415afb5da94688675dd2bda","modified":1470129149000},{"_id":"themes/yelee/.git/packed-refs","hash":"d08588971d930bf5475f69fe4a0190a203dee104","modified":1469958012000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1469958012000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1469958012000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1469958012000},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1469958012000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1469958012000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1469958012000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1469958012000},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1469958012000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1469958012000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1469958012000},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1469958012000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1469958012000},{"_id":"themes/yelee/source/.DS_Store","hash":"ffeec7542037605d881c3e289ffeba2467f1c0f6","modified":1469958031000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1469958012000},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1469957945000},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1469957945000},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1469957945000},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1469957945000},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1469957945000},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1469957945000},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1469957945000},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1469957945000},{"_id":"themes/yelee/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1469957945000},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1469957945000},{"_id":"themes/yelee/.git/logs/HEAD","hash":"3c75eb11af230635afb1fa0f43980dd74e742351","modified":1470127844000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1469958012000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1469958012000},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1469958012000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1469958012000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1469958012000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1469958012000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1469958012000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1469958012000},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1469958012000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1469958012000},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1469958012000},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1469958012000},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1469958012000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1469958012000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1469958012000},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1469958012000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1469958012000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1469958012000},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1469958012000},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1469958012000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1469958012000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1469958012000},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1469958012000},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1469958012000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1469958012000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1469958012000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1469958012000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1469958012000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1469958012000},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1469958012000},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1469958012000},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1469958012000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1469958012000},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1469958012000},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1469958012000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1469958012000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1469958012000},{"_id":"themes/yelee/.git/objects/73/d83b47c28f21fbf1ab2fb254b87186c79837d9","hash":"3190708d63bf30cd819dd5b5e48e357a6ae00476","modified":1470127831000},{"_id":"themes/yelee/.git/objects/4e/ce4ee06a1e91529f44168ce88095071b0511fd","hash":"094818a0ee77784e1f51c1b985825b07843cf682","modified":1470127831000},{"_id":"themes/yelee/.git/objects/d4/f893b8b500d4192bb4c4fc642d2769b1c97a70","hash":"5cea308d81d21a0368447335fed052bf5a50ebe2","modified":1470127844000},{"_id":"themes/yelee/.git/objects/c0/0d27e37bbe3529c91ffd66691b8be69cef67b5","hash":"950b0a6ea248c90c01f743c6f2e021934a9014eb","modified":1470127831000},{"_id":"themes/yelee/.git/refs/heads/master","hash":"d2ea1e0e1322bab09ab4257fca366e69e5e90af8","modified":1470127844000},{"_id":"themes/yelee/.git/objects/42/2c95a75d2357a85afeb6d94231b815b14baed4","hash":"042166b244c0c38d4d450aa7f09f89591283f562","modified":1470127844000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1469958012000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1469958012000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1469958012000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"371770b054ca345d53d92cea08e977ac1a495fa2","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1469958012000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1469958012000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1469958012000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1469958012000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1469958012000},{"_id":"themes/yelee/.git/objects/pack/pack-808dc0203734dbce2db9d5032192b944986941b5.idx","hash":"c103b77703a21daa1144314ed3673fd21d5e193f","modified":1469958012000},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"3c75eb11af230635afb1fa0f43980dd74e742351","modified":1470127844000},{"_id":"themes/yelee/.git/refs/remotes/MOxFIVE/master","hash":"90d1524cfb6be4f69288b5fc30341e44f06e8427","modified":1469958712000},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1469958012000},{"_id":"themes/yelee/.git/refs/remotes/origin/master","hash":"d2ea1e0e1322bab09ab4257fca366e69e5e90af8","modified":1470128224000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1469958012000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1469958012000},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/master","hash":"675fd5efacafe610cf81fadfab18fb93111ee4f0","modified":1470128224000},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"ffcd165eb7595afb5574e12d21f2d7ebcd8eca12","modified":1469958012000},{"_id":"themes/yelee/.git/logs/refs/remotes/MOxFIVE/master","hash":"7161315330e418a0d7f06844979eb6500f7b0cfa","modified":1469958712000},{"_id":"themes/yelee/.git/objects/pack/pack-808dc0203734dbce2db9d5032192b944986941b5.pack","hash":"5591c0a69c719f992586178cd4d2ebf3a564b409","modified":1470127831000},{"_id":"public/archives/index.html","hash":"c3011d26f2e6fc143a4cab7b22acb6404a02e325","modified":1470131414073},{"_id":"public/archives/2016/index.html","hash":"d88a9ef2259a034db3a13eadb2b96def4f651d71","modified":1470131414119},{"_id":"public/archives/2016/08/index.html","hash":"4d894c1ac055d3a128ed4dcf3d45b8ed718310a7","modified":1470131414121},{"_id":"public/index.html","hash":"eb595bb412397950147e409fd63a6aeeaced6d96","modified":1470131414121},{"_id":"public/archives/2015/index.html","hash":"9b4189313f66fdf052d015da6064b913cd986a55","modified":1470131414127},{"_id":"public/archives/2015/12/index.html","hash":"408f7c1678b54ac42b42dd67be32ec54e9ce1456","modified":1470131414127},{"_id":"public/2015/12/03/WebView基本用法/index.html","hash":"0ac9cc2e4660ee3f7b31faf560b6a856ac6c7c34","modified":1470131414127},{"_id":"public/2015/12/03/WebView性能优化/index.html","hash":"740aa7663f9b45182f87edb3a5de5791c4a1dc5f","modified":1470131414127},{"_id":"public/2015/12/03/WebView代码交互/index.html","hash":"72511108274993a78632bb7db04924144edd0d03","modified":1470131414127},{"_id":"public/2016/08/02/README/index.html","hash":"dca7b8e3fc1a155b1b411c4fe701bb2b02ab5d53","modified":1470131414127},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1470131414127},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1470131414127},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1470131414127},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1470131414127},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1470131414127},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1470131414127},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1470131414127},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1470131414128},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1470131414128},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1470131414128},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1470131414128},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1470131414128},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1470131414128},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1470131414128},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1470131414128},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1470131414128},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1470131414128},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1470131414128},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1470131414128},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1470131414128},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1470131414128},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1470131414128},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1470131414129},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1470131414129},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1470131414129},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1470131414129},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1470131414129},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1470131415266},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1470131415266},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1470131415270},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1470131415270},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1470131415270},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1470131415271},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1470131415271},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1470131415271},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1470131415271},{"_id":"public/css/style.css","hash":"7e36799423a0db6a0ba25cd593851830c6eb722d","modified":1470131415271},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1470131415271},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1470131415271}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2015-12-02T16:00:00.000Z","_content":"<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# WebView基本用法\n\n作者: 郭嘉  \n邮箱: guoxiaoxingv@163.com  \n博客: https://guoxiaoxing.github.io/  \n知乎: https://www.zhihu.com/people/allen-wells\n\n**关于作者**\n\n>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。\n人生格言: 不想当程序员的歌手不是好厨师。\n\n**关于文章**\n\n>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与\n我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你\n有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n[WebView基本用法](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md)\n[WebView代码交互](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md)\n[WebView性能优化](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md)\n\nWebView也是Android View的一种, 我们通常用它来在应用内部展示网页, 和以往一样, 我们先来简单看一下它的基本用法。\n\n添加网络权限\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n在布局中添加WebView\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<WebView  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/webview\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n/>\n```\n\n使用WebView加载网页\n\n```\nWebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.loadUrl(\"http://www.example.com\");\n```\n\n以上就是WebView的简单用法, 相比大家已经十分熟悉, 下面我们就来逐一看看WebView的其他特性。\n\n# 一 WebView基本组件\n\n了解了基本用法, 我们对WebView就有了大致的印象, 下面我们来看看构建Web应用的三个重要组件。\n\n## 1.1 WebSettings\n\nWebSettings用来对WebView做各种设置, 你可以这样获取WebSettings:\n\n```java\nWebSettings webSettings = mWebView .getSettings();\n```\n\nWebSettings的常见设置如下所示:\n\nJS处理\n\n- setJavaScriptEnabled(true);  //支持js\n- setPluginsEnabled(true);  //支持插件 \n- setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 \n\n缩放处理\n\n- setUseWideViewPort(true);  //将图片调整到适合webview的大小 \n- setLoadWithOverviewMode(true); // 缩放至屏幕的大小\n- setSupportZoom(true);  //支持缩放，默认为true。是下面那个的前提。\n- setBuiltInZoomControls(true); //设置内置的缩放控件。 这个取决于setSupportZoom(), 若setSupportZoom(false)，则该WebView不可缩放，这个不管设置什么都不能缩放。\n- setDisplayZoomControls(false); //隐藏原生的缩放控件\n\n内容布局\n\n- setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局\n- supportMultipleWindows(); //多窗口 \n\n文件缓存\n\n- setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 \n- setAllowFileAccess(true);  //设置可以访问文件 \n\n其他设置\n\n- setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点\n- setLoadsImagesAutomatically(true); //支持自动加载图片\n- setDefaultTextEncodingName(\"utf-8\"); //设置编码格式\n- setPluginState(PluginState.OFF); //设置是否支持flash插件\n- setDefaultFontSize(20); //设置默认字体大小\n\n## 1.2 WebViewClient\n\nWebViewClient用来帮助WebView处理各种通知, 请求事件。我们通过继承WebViewClient并重载它的方法可以实现不同功能的定制。具体如下所示:\n\n- shouldOverrideUrlLoading(WebView view, String url) //在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。比如获取url，查看url.contains(“add”)，进行添加操作\n \n- shouldOverrideKeyEvent(WebView view, KeyEvent event) //处理在浏览器中的按键事件。 \n\n- onPageStarted(WebView view, String url, Bitmap favicon) //开始载入页面时调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。 \n\n- onPageFinished(WebView view, String url) //在页面加载结束时调用, 我们可以关闭loading 条，切换程序动作。 \n\n- onLoadResource(WebView view, String url) //在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 \n\n- onReceivedError(WebView view, int errorCode, String description, String failingUrl) //报告错误信息 \n\n- doUpdateVisitedHistory(WebView view, String url, boolean isReload) //更新历史记录 \n\n- onFormResubmission(WebView view, Message dontResend, Message resend) //应用程序重新请求网页数据\n\n- onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm) //获取返回信息授权请求 \n\n- onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //让webview处理https请求。\n\n- onScaleChanged(WebView view, float oldScale, float newScale) //WebView发生改变时调用\n\n- onUnhandledKeyEvent(WebView view, KeyEvent event) //Key事件未被加载时调用\n\n## 1.3 WebChromeClient\n\nWebChromeClient用来帮助WebView处理JS的对话框、网址图标、网址标题和加载进度等。同样地, 通过继承WebChromeClient并重载它的方法也可以实现不同功能的定制, 如下所示:\n\n- public void onProgressChanged(WebView view, int newProgress); //获得网页的加载进度，显示在右上角的TextView控件中\n\n- public void onReceivedTitle(WebView view, String title); //获取Web页中的title用来设置自己界面中的title, 当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为\"找不到该网页\",\n\n- public void onReceivedIcon(WebView view, Bitmap icon); //获取Web页中的icon\n\n- public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg);\n\n- public void onCloseWindow(WebView window);\n\n- public boolean onJsAlert(WebView view, String url, String message, JsResult result); //处理alert弹出框，html 弹框的一种方式\n\n- public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) //处理confirm弹出框\n\n- public boolean onJsConfirm(WebView view, String url, String message, JsResult result); //处理prompt弹出框\n\n# 二 WebView生命周期\n\n## 2.1 onResume()  \n\nWebView为活跃状态时回调，可以正常执行网页的响应。\n\n## 2.2 onPause() \n\nWebView被切换到后台时回调, 页面被失去焦点, 变成不可见状态，onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。\n\n## 2.3 pauseTimers() \n\n当应用程序被切换到后台时回调，该方法针对全应用程序的WebView，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。\n\n## 2.4 resumeTimers()\n\n恢复pauseTimers时的动作。\n\n## 2.5 destroy() \n\n关闭了Activity时回调, WebView调用destory时, WebView仍绑定在Activity上.这是由于自定义WebView构建时传入了该Activity的context对象, 因此需要先从父\n容器中移除WebView, 然后再销毁webview。\n\n```java\nmRootLayout.removeView(webView);  \nmWebView.destroy();\n```\n\n# 三 WebView页面导航\n\n## 3.1 页面跳转\n\n当我们在WebView点击链接时, 默认的WebView会直接跳转到别的浏览器中, 如果想要实现在WebView内跳转就需要设置WebViewClient, 下面我们先来\n说说WebView、WebViewClient、WebChromeClient三者的区别。\n\n- WebView: 主要负责解析和渲染网页\n- WebViewClient: 辅助WebView处理各种通知和请求事件\n- WebChromeClient: 辅助WebView处理JavaScript中的对话框, 网址图标和标题等\n\n如果我们想控制不同链接的跳转方式, 我们需要继承WebViewClient重写shouldOverrideUrlLoading()方法\n\n```java\n    static class CustomWebViewClient extends WebViewClient {\n\n        private Context mContext;\n\n        public CustomWebViewClient(Context context) {\n            mContext = context;\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            if (Uri.parse(url).getHost().equals(\"github.com/guoxiaoxing\")) {\n                //如果是自己站点的链接, 则用本地WebView跳转\n                return false;\n            }\n            //如果不是自己的站点则launch别的Activity来处理\n            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n            mContext.startActivity(intent);\n            return true;\n        }\n    }\n```\n\n关于shouldOverrideUrlLoading()方法的两点说明:\n\n1 方法返回值\n\n返回true: Android 系统会处理URL, 一般是唤起系统浏览器。\n返回false: 当前 WebView 处理URL。\n\n由于默认放回false, 如果我们只想在WebView内处理链接跳转只需要设置mWebView.setWebViewClient(new WebViewClient())即可\n\n```java\n/** \n     * Give the host application a chance to take over the control when a new \n     * url is about to be loaded in the current WebView. If WebViewClient is not \n     * provided, by default WebView will ask Activity Manager to choose the \n     * proper handler for the url. If WebViewClient is provided, return true \n     * means the host application handles the url, while return false means the \n     * current WebView handles the url. \n     * This method is not called for requests using the POST \"method\". \n     * \n     * @param view The WebView that is initiating the callback. \n     * @param url The url to be loaded. \n     * @return True if the host application wants to leave the current WebView \n     *         and handle the url itself, otherwise return false. \n     */  \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {  \n        return false;  \n    }  \n```\n\n2 方法deprecated问题\n\nshouldOverrideUrlLoading()方法在API >= 24时被标记deprecated, 它的替代方法是\n\n```\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n            view.loadUrl(request.toString());\n            return true;\n        }\n```\n\n但是public boolean shouldOverrideUrlLoading(WebView view, String url)支持更广泛的API我们在使用的时候还是它, \n关于这两个方法的讨论可以参见:\n\nhttp://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead  \nhttp://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest\n\n## 3.2 页面回退\n\nAndroid的返回键, 如果想要实现WebView内网页的回退, 可以重写onKeyEvent()方法。\n\n```java\n@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n    // Check if the key event was the Back button and if there's history\n    if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack()) {\n        myWebView.goBack();\n        return true;\n    }\n    // If it wasn't the Back key or there's no web page history, bubble up to the default\n    // system behavior (probably exit the activity)\n    return super.onKeyDown(keyCode, event);\n}\n```\n\n## 3.3 页面滑动\n\n关于页面滑动, 我们在做下拉刷新等功能时, 经常会去判断WebView是否滚动到顶部或者滚动到底部。\n\n我们先来看一看三个判断高度的方法\n\n```java\ngetScrollY();\n```\n\n该方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.\n\n```java\ngetHeight();\ngetBottom();\n```\n\n该方法都返回当前WebView这个容器的高度\n\n```\ngetContentHeight(); \n```\n\n返回的是整个html的高度, 但并不等同于当前整个页面的高度, 因为WebView有缩放功能, 所以当前整个页面的高度实际上应该是原始html的高度\n再乘上缩放比例. 因此, 判断方法是:\n\n```java\nif (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) {\n    //已经处于底端\n}\n\nif(webView.getScrollY() == 0){\n    //处于顶端\n}\n```\n\n以上这个方法也是我们常用的方法, 不过从API 17开始, mWebView.getScale()被标记为deprecated\n\n>This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions \nbetween the web rendering and UI threads; prefer onScaleChanged(WebView, \n\n因为scale的获取可以用一下方式:\n\n```java\npublic class CustomWebView extends WebView {\n\npublic CustomWebView(Context context) {\n    super(context);\n    setWebViewClient(new WebViewClient() {\n        @Override\n        public void onScaleChanged(WebView view, float oldScale, float newScale) {\n            super.onScaleChanged(view, oldScale, newScale);\n            mCurrentScale = newScale\n        }\n    });\n}\n```\n\n关于mWebView.getScale()的讨论可以参见:\n\nhttps://developer.android.com/reference/android/webkit/WebView.html\n\nhttp://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4\n\n# 三 WebView缓存实现\n\n在项目中如果使用到WebView控件, 当加载html页面时, 会在/data/data/包名目录下生成database与cache两个文件夹。\n请求的url记录是保存在WebViewCache.db, 而url的内容是保存在WebViewCache文件夹下。\n\n控制缓存行为\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n//优先使用缓存\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); \n//只在缓存中读取\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);\n/不使用缓存\nWwebSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);\n```\n\n清除缓存\n\n```java\nclearCache(true); //清除网页访问留下的缓存，由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.\nclearHistory (); //清除当前webview访问的历史记录，只会webview访问历史记录里的所有记录除了当前访问记录.\nclearFormData () //这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据。\n```\n\n# 四 WebView Cookies\n\n添加Cookies\n\n```java\npublic void synCookies() {\n    if (!CacheUtils.isLogin(this)) return;\n    CookieSyncManager.createInstance(this);\n    CookieManager cookieManager = CookieManager.getInstance();\n    cookieManager.setAcceptCookie(true);\n    cookieManager.removeSessionCookie();//移除\n    String cookies = PreferenceHelper.readString(this, AppConfig.COOKIE_KEY, AppConfig.COOKIE_KEY);\n    KJLoger.debug(cookies);\n    cookieManager.setCookie(url, cookies);\n    CookieSyncManager.getInstance().sync();\n}\n```\n\n清除Cookies\n\n```java\nCookieManager.getInstance().removeSessionCookie();\n```\n\n# 五 WebView本地资源访问\n\n当我们在WebView中加载出从web服务器上拿取的内容时，是无法访问本地资源的，如assets目录下的图片资源，因为这样的行为属于跨域行为（Cross-Domain），而WebView是禁止\n的。解决这个问题的方案是把html内容先下载到本地，然后使用loadDataWithBaseURL加载html。这样就可以在html中使用 file:///android_asset/xxx.png 的链接来引用包里\n面assets下的资源了。\n\n```java\nprivate void loadWithAccessLocal(final String htmlUrl) {\n    new Thread(new Runnable() {\n        public void run() {\n            try {\n                final String htmlStr = NetService.fetchHtml(htmlUrl);\n                if (htmlStr != null) {\n                    TaskExecutor.runTaskOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            loadDataWithBaseURL(htmlUrl, htmlStr, \"text/html\", \"UTF-8\", \"\");\n                        }\n                    });\n                    return;\n                }\n            } catch (Exception e) {\n                Log.e(\"Exception:\" + e.getMessage());\n            }\n\n            TaskExecutor.runTaskOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    onPageLoadedError(-1, \"fetch html failed\");\n                }\n            });\n        }\n    }).start();\n}\n```\n\n**注意**\n\n- 从网络上下载html的过程应放在工作线程中\n- html下载成功后渲染出html的步骤应放在UI主线程，不然WebView会报错\n- html下载失败则可以使用我们前面讲述的方法来显示自定义错误界面","source":"_posts/WebView基本用法.md","raw":"title: Hello World\ndate: 2015-12-03 00:00:00\n---\n<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# WebView基本用法\n\n作者: 郭嘉  \n邮箱: guoxiaoxingv@163.com  \n博客: https://guoxiaoxing.github.io/  \n知乎: https://www.zhihu.com/people/allen-wells\n\n**关于作者**\n\n>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。\n人生格言: 不想当程序员的歌手不是好厨师。\n\n**关于文章**\n\n>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与\n我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你\n有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n[WebView基本用法](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md)\n[WebView代码交互](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md)\n[WebView性能优化](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md)\n\nWebView也是Android View的一种, 我们通常用它来在应用内部展示网页, 和以往一样, 我们先来简单看一下它的基本用法。\n\n添加网络权限\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n在布局中添加WebView\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<WebView  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/webview\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n/>\n```\n\n使用WebView加载网页\n\n```\nWebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.loadUrl(\"http://www.example.com\");\n```\n\n以上就是WebView的简单用法, 相比大家已经十分熟悉, 下面我们就来逐一看看WebView的其他特性。\n\n# 一 WebView基本组件\n\n了解了基本用法, 我们对WebView就有了大致的印象, 下面我们来看看构建Web应用的三个重要组件。\n\n## 1.1 WebSettings\n\nWebSettings用来对WebView做各种设置, 你可以这样获取WebSettings:\n\n```java\nWebSettings webSettings = mWebView .getSettings();\n```\n\nWebSettings的常见设置如下所示:\n\nJS处理\n\n- setJavaScriptEnabled(true);  //支持js\n- setPluginsEnabled(true);  //支持插件 \n- setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 \n\n缩放处理\n\n- setUseWideViewPort(true);  //将图片调整到适合webview的大小 \n- setLoadWithOverviewMode(true); // 缩放至屏幕的大小\n- setSupportZoom(true);  //支持缩放，默认为true。是下面那个的前提。\n- setBuiltInZoomControls(true); //设置内置的缩放控件。 这个取决于setSupportZoom(), 若setSupportZoom(false)，则该WebView不可缩放，这个不管设置什么都不能缩放。\n- setDisplayZoomControls(false); //隐藏原生的缩放控件\n\n内容布局\n\n- setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局\n- supportMultipleWindows(); //多窗口 \n\n文件缓存\n\n- setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 \n- setAllowFileAccess(true);  //设置可以访问文件 \n\n其他设置\n\n- setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点\n- setLoadsImagesAutomatically(true); //支持自动加载图片\n- setDefaultTextEncodingName(\"utf-8\"); //设置编码格式\n- setPluginState(PluginState.OFF); //设置是否支持flash插件\n- setDefaultFontSize(20); //设置默认字体大小\n\n## 1.2 WebViewClient\n\nWebViewClient用来帮助WebView处理各种通知, 请求事件。我们通过继承WebViewClient并重载它的方法可以实现不同功能的定制。具体如下所示:\n\n- shouldOverrideUrlLoading(WebView view, String url) //在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。比如获取url，查看url.contains(“add”)，进行添加操作\n \n- shouldOverrideKeyEvent(WebView view, KeyEvent event) //处理在浏览器中的按键事件。 \n\n- onPageStarted(WebView view, String url, Bitmap favicon) //开始载入页面时调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。 \n\n- onPageFinished(WebView view, String url) //在页面加载结束时调用, 我们可以关闭loading 条，切换程序动作。 \n\n- onLoadResource(WebView view, String url) //在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 \n\n- onReceivedError(WebView view, int errorCode, String description, String failingUrl) //报告错误信息 \n\n- doUpdateVisitedHistory(WebView view, String url, boolean isReload) //更新历史记录 \n\n- onFormResubmission(WebView view, Message dontResend, Message resend) //应用程序重新请求网页数据\n\n- onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm) //获取返回信息授权请求 \n\n- onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //让webview处理https请求。\n\n- onScaleChanged(WebView view, float oldScale, float newScale) //WebView发生改变时调用\n\n- onUnhandledKeyEvent(WebView view, KeyEvent event) //Key事件未被加载时调用\n\n## 1.3 WebChromeClient\n\nWebChromeClient用来帮助WebView处理JS的对话框、网址图标、网址标题和加载进度等。同样地, 通过继承WebChromeClient并重载它的方法也可以实现不同功能的定制, 如下所示:\n\n- public void onProgressChanged(WebView view, int newProgress); //获得网页的加载进度，显示在右上角的TextView控件中\n\n- public void onReceivedTitle(WebView view, String title); //获取Web页中的title用来设置自己界面中的title, 当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为\"找不到该网页\",\n\n- public void onReceivedIcon(WebView view, Bitmap icon); //获取Web页中的icon\n\n- public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg);\n\n- public void onCloseWindow(WebView window);\n\n- public boolean onJsAlert(WebView view, String url, String message, JsResult result); //处理alert弹出框，html 弹框的一种方式\n\n- public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) //处理confirm弹出框\n\n- public boolean onJsConfirm(WebView view, String url, String message, JsResult result); //处理prompt弹出框\n\n# 二 WebView生命周期\n\n## 2.1 onResume()  \n\nWebView为活跃状态时回调，可以正常执行网页的响应。\n\n## 2.2 onPause() \n\nWebView被切换到后台时回调, 页面被失去焦点, 变成不可见状态，onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。\n\n## 2.3 pauseTimers() \n\n当应用程序被切换到后台时回调，该方法针对全应用程序的WebView，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。\n\n## 2.4 resumeTimers()\n\n恢复pauseTimers时的动作。\n\n## 2.5 destroy() \n\n关闭了Activity时回调, WebView调用destory时, WebView仍绑定在Activity上.这是由于自定义WebView构建时传入了该Activity的context对象, 因此需要先从父\n容器中移除WebView, 然后再销毁webview。\n\n```java\nmRootLayout.removeView(webView);  \nmWebView.destroy();\n```\n\n# 三 WebView页面导航\n\n## 3.1 页面跳转\n\n当我们在WebView点击链接时, 默认的WebView会直接跳转到别的浏览器中, 如果想要实现在WebView内跳转就需要设置WebViewClient, 下面我们先来\n说说WebView、WebViewClient、WebChromeClient三者的区别。\n\n- WebView: 主要负责解析和渲染网页\n- WebViewClient: 辅助WebView处理各种通知和请求事件\n- WebChromeClient: 辅助WebView处理JavaScript中的对话框, 网址图标和标题等\n\n如果我们想控制不同链接的跳转方式, 我们需要继承WebViewClient重写shouldOverrideUrlLoading()方法\n\n```java\n    static class CustomWebViewClient extends WebViewClient {\n\n        private Context mContext;\n\n        public CustomWebViewClient(Context context) {\n            mContext = context;\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            if (Uri.parse(url).getHost().equals(\"github.com/guoxiaoxing\")) {\n                //如果是自己站点的链接, 则用本地WebView跳转\n                return false;\n            }\n            //如果不是自己的站点则launch别的Activity来处理\n            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n            mContext.startActivity(intent);\n            return true;\n        }\n    }\n```\n\n关于shouldOverrideUrlLoading()方法的两点说明:\n\n1 方法返回值\n\n返回true: Android 系统会处理URL, 一般是唤起系统浏览器。\n返回false: 当前 WebView 处理URL。\n\n由于默认放回false, 如果我们只想在WebView内处理链接跳转只需要设置mWebView.setWebViewClient(new WebViewClient())即可\n\n```java\n/** \n     * Give the host application a chance to take over the control when a new \n     * url is about to be loaded in the current WebView. If WebViewClient is not \n     * provided, by default WebView will ask Activity Manager to choose the \n     * proper handler for the url. If WebViewClient is provided, return true \n     * means the host application handles the url, while return false means the \n     * current WebView handles the url. \n     * This method is not called for requests using the POST \"method\". \n     * \n     * @param view The WebView that is initiating the callback. \n     * @param url The url to be loaded. \n     * @return True if the host application wants to leave the current WebView \n     *         and handle the url itself, otherwise return false. \n     */  \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {  \n        return false;  \n    }  \n```\n\n2 方法deprecated问题\n\nshouldOverrideUrlLoading()方法在API >= 24时被标记deprecated, 它的替代方法是\n\n```\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n            view.loadUrl(request.toString());\n            return true;\n        }\n```\n\n但是public boolean shouldOverrideUrlLoading(WebView view, String url)支持更广泛的API我们在使用的时候还是它, \n关于这两个方法的讨论可以参见:\n\nhttp://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead  \nhttp://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest\n\n## 3.2 页面回退\n\nAndroid的返回键, 如果想要实现WebView内网页的回退, 可以重写onKeyEvent()方法。\n\n```java\n@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n    // Check if the key event was the Back button and if there's history\n    if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack()) {\n        myWebView.goBack();\n        return true;\n    }\n    // If it wasn't the Back key or there's no web page history, bubble up to the default\n    // system behavior (probably exit the activity)\n    return super.onKeyDown(keyCode, event);\n}\n```\n\n## 3.3 页面滑动\n\n关于页面滑动, 我们在做下拉刷新等功能时, 经常会去判断WebView是否滚动到顶部或者滚动到底部。\n\n我们先来看一看三个判断高度的方法\n\n```java\ngetScrollY();\n```\n\n该方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.\n\n```java\ngetHeight();\ngetBottom();\n```\n\n该方法都返回当前WebView这个容器的高度\n\n```\ngetContentHeight(); \n```\n\n返回的是整个html的高度, 但并不等同于当前整个页面的高度, 因为WebView有缩放功能, 所以当前整个页面的高度实际上应该是原始html的高度\n再乘上缩放比例. 因此, 判断方法是:\n\n```java\nif (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) {\n    //已经处于底端\n}\n\nif(webView.getScrollY() == 0){\n    //处于顶端\n}\n```\n\n以上这个方法也是我们常用的方法, 不过从API 17开始, mWebView.getScale()被标记为deprecated\n\n>This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions \nbetween the web rendering and UI threads; prefer onScaleChanged(WebView, \n\n因为scale的获取可以用一下方式:\n\n```java\npublic class CustomWebView extends WebView {\n\npublic CustomWebView(Context context) {\n    super(context);\n    setWebViewClient(new WebViewClient() {\n        @Override\n        public void onScaleChanged(WebView view, float oldScale, float newScale) {\n            super.onScaleChanged(view, oldScale, newScale);\n            mCurrentScale = newScale\n        }\n    });\n}\n```\n\n关于mWebView.getScale()的讨论可以参见:\n\nhttps://developer.android.com/reference/android/webkit/WebView.html\n\nhttp://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4\n\n# 三 WebView缓存实现\n\n在项目中如果使用到WebView控件, 当加载html页面时, 会在/data/data/包名目录下生成database与cache两个文件夹。\n请求的url记录是保存在WebViewCache.db, 而url的内容是保存在WebViewCache文件夹下。\n\n控制缓存行为\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n//优先使用缓存\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); \n//只在缓存中读取\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);\n/不使用缓存\nWwebSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);\n```\n\n清除缓存\n\n```java\nclearCache(true); //清除网页访问留下的缓存，由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.\nclearHistory (); //清除当前webview访问的历史记录，只会webview访问历史记录里的所有记录除了当前访问记录.\nclearFormData () //这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据。\n```\n\n# 四 WebView Cookies\n\n添加Cookies\n\n```java\npublic void synCookies() {\n    if (!CacheUtils.isLogin(this)) return;\n    CookieSyncManager.createInstance(this);\n    CookieManager cookieManager = CookieManager.getInstance();\n    cookieManager.setAcceptCookie(true);\n    cookieManager.removeSessionCookie();//移除\n    String cookies = PreferenceHelper.readString(this, AppConfig.COOKIE_KEY, AppConfig.COOKIE_KEY);\n    KJLoger.debug(cookies);\n    cookieManager.setCookie(url, cookies);\n    CookieSyncManager.getInstance().sync();\n}\n```\n\n清除Cookies\n\n```java\nCookieManager.getInstance().removeSessionCookie();\n```\n\n# 五 WebView本地资源访问\n\n当我们在WebView中加载出从web服务器上拿取的内容时，是无法访问本地资源的，如assets目录下的图片资源，因为这样的行为属于跨域行为（Cross-Domain），而WebView是禁止\n的。解决这个问题的方案是把html内容先下载到本地，然后使用loadDataWithBaseURL加载html。这样就可以在html中使用 file:///android_asset/xxx.png 的链接来引用包里\n面assets下的资源了。\n\n```java\nprivate void loadWithAccessLocal(final String htmlUrl) {\n    new Thread(new Runnable() {\n        public void run() {\n            try {\n                final String htmlStr = NetService.fetchHtml(htmlUrl);\n                if (htmlStr != null) {\n                    TaskExecutor.runTaskOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            loadDataWithBaseURL(htmlUrl, htmlStr, \"text/html\", \"UTF-8\", \"\");\n                        }\n                    });\n                    return;\n                }\n            } catch (Exception e) {\n                Log.e(\"Exception:\" + e.getMessage());\n            }\n\n            TaskExecutor.runTaskOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    onPageLoadedError(-1, \"fetch html failed\");\n                }\n            });\n        }\n    }).start();\n}\n```\n\n**注意**\n\n- 从网络上下载html的过程应放在工作线程中\n- html下载成功后渲染出html的步骤应放在UI主线程，不然WebView会报错\n- html下载失败则可以使用我们前面讲述的方法来显示自定义错误界面","slug":"WebView基本用法","published":1,"updated":"2016-08-02T09:49:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirdaaam10000295mm4otnqfe","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>+<a id=\"more\"></a></excerpt></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"WebView基本用法\"><a href=\"#WebView基本用法\" class=\"headerlink\" title=\"WebView基本用法\"></a>WebView基本用法</h1><p>作者: 郭嘉<br>邮箱: guoxiaoxingv@163.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>知乎: <a href=\"https://www.zhihu.com/people/allen-wells\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/people/allen-wells</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。<br>人生格言: 不想当程序员的歌手不是好厨师。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与<br>我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你<br>有所帮助, 也欢迎去star文章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<p><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md\" target=\"_blank\" rel=\"external\">WebView基本用法</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md\" target=\"_blank\" rel=\"external\">WebView代码交互</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\" target=\"_blank\" rel=\"external\">WebView性能优化</a></p>\n<p>WebView也是Android View的一种, 我们通常用它来在应用内部展示网页, 和以往一样, 我们先来简单看一下它的基本用法。</p>\n<p>添加网络权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>在布局中添加WebView</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WebView</span>  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/webview\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<p>使用WebView加载网页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class=\"line\">myWebView.loadUrl(&quot;http://www.example.com&quot;);</div></pre></td></tr></table></figure>\n<p>以上就是WebView的简单用法, 相比大家已经十分熟悉, 下面我们就来逐一看看WebView的其他特性。</p>\n<h1 id=\"一-WebView基本组件\"><a href=\"#一-WebView基本组件\" class=\"headerlink\" title=\"一 WebView基本组件\"></a>一 WebView基本组件</h1><p>了解了基本用法, 我们对WebView就有了大致的印象, 下面我们来看看构建Web应用的三个重要组件。</p>\n<h2 id=\"1-1-WebSettings\"><a href=\"#1-1-WebSettings\" class=\"headerlink\" title=\"1.1 WebSettings\"></a>1.1 WebSettings</h2><p>WebSettings用来对WebView做各种设置, 你可以这样获取WebSettings:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView .getSettings();</div></pre></td></tr></table></figure>\n<p>WebSettings的常见设置如下所示:</p>\n<p>JS处理</p>\n<ul>\n<li>setJavaScriptEnabled(true);  //支持js</li>\n<li>setPluginsEnabled(true);  //支持插件 </li>\n<li>setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 </li>\n</ul>\n<p>缩放处理</p>\n<ul>\n<li>setUseWideViewPort(true);  //将图片调整到适合webview的大小 </li>\n<li>setLoadWithOverviewMode(true); // 缩放至屏幕的大小</li>\n<li>setSupportZoom(true);  //支持缩放，默认为true。是下面那个的前提。</li>\n<li>setBuiltInZoomControls(true); //设置内置的缩放控件。 这个取决于setSupportZoom(), 若setSupportZoom(false)，则该WebView不可缩放，这个不管设置什么都不能缩放。</li>\n<li>setDisplayZoomControls(false); //隐藏原生的缩放控件</li>\n</ul>\n<p>内容布局</p>\n<ul>\n<li>setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局</li>\n<li>supportMultipleWindows(); //多窗口 </li>\n</ul>\n<p>文件缓存</p>\n<ul>\n<li>setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 </li>\n<li>setAllowFileAccess(true);  //设置可以访问文件 </li>\n</ul>\n<p>其他设置</p>\n<ul>\n<li>setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点</li>\n<li>setLoadsImagesAutomatically(true); //支持自动加载图片</li>\n<li>setDefaultTextEncodingName(“utf-8”); //设置编码格式</li>\n<li>setPluginState(PluginState.OFF); //设置是否支持flash插件</li>\n<li>setDefaultFontSize(20); //设置默认字体大小</li>\n</ul>\n<h2 id=\"1-2-WebViewClient\"><a href=\"#1-2-WebViewClient\" class=\"headerlink\" title=\"1.2 WebViewClient\"></a>1.2 WebViewClient</h2><p>WebViewClient用来帮助WebView处理各种通知, 请求事件。我们通过继承WebViewClient并重载它的方法可以实现不同功能的定制。具体如下所示:</p>\n<ul>\n<li><p>shouldOverrideUrlLoading(WebView view, String url) //在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。比如获取url，查看url.contains(“add”)，进行添加操作</p>\n</li>\n<li><p>shouldOverrideKeyEvent(WebView view, KeyEvent event) //处理在浏览器中的按键事件。 </p>\n</li>\n<li><p>onPageStarted(WebView view, String url, Bitmap favicon) //开始载入页面时调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。 </p>\n</li>\n<li><p>onPageFinished(WebView view, String url) //在页面加载结束时调用, 我们可以关闭loading 条，切换程序动作。 </p>\n</li>\n<li><p>onLoadResource(WebView view, String url) //在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 </p>\n</li>\n<li><p>onReceivedError(WebView view, int errorCode, String description, String failingUrl) //报告错误信息 </p>\n</li>\n<li><p>doUpdateVisitedHistory(WebView view, String url, boolean isReload) //更新历史记录 </p>\n</li>\n<li><p>onFormResubmission(WebView view, Message dontResend, Message resend) //应用程序重新请求网页数据</p>\n</li>\n<li><p>onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm) //获取返回信息授权请求 </p>\n</li>\n<li><p>onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //让webview处理https请求。</p>\n</li>\n<li><p>onScaleChanged(WebView view, float oldScale, float newScale) //WebView发生改变时调用</p>\n</li>\n<li><p>onUnhandledKeyEvent(WebView view, KeyEvent event) //Key事件未被加载时调用</p>\n</li>\n</ul>\n<h2 id=\"1-3-WebChromeClient\"><a href=\"#1-3-WebChromeClient\" class=\"headerlink\" title=\"1.3 WebChromeClient\"></a>1.3 WebChromeClient</h2><p>WebChromeClient用来帮助WebView处理JS的对话框、网址图标、网址标题和加载进度等。同样地, 通过继承WebChromeClient并重载它的方法也可以实现不同功能的定制, 如下所示:</p>\n<ul>\n<li><p>public void onProgressChanged(WebView view, int newProgress); //获得网页的加载进度，显示在右上角的TextView控件中</p>\n</li>\n<li><p>public void onReceivedTitle(WebView view, String title); //获取Web页中的title用来设置自己界面中的title, 当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为”找不到该网页”,</p>\n</li>\n<li><p>public void onReceivedIcon(WebView view, Bitmap icon); //获取Web页中的icon</p>\n</li>\n<li><p>public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg);</p>\n</li>\n<li><p>public void onCloseWindow(WebView window);</p>\n</li>\n<li><p>public boolean onJsAlert(WebView view, String url, String message, JsResult result); //处理alert弹出框，html 弹框的一种方式</p>\n</li>\n<li><p>public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) //处理confirm弹出框</p>\n</li>\n<li><p>public boolean onJsConfirm(WebView view, String url, String message, JsResult result); //处理prompt弹出框</p>\n</li>\n</ul>\n<h1 id=\"二-WebView生命周期\"><a href=\"#二-WebView生命周期\" class=\"headerlink\" title=\"二 WebView生命周期\"></a>二 WebView生命周期</h1><h2 id=\"2-1-onResume\"><a href=\"#2-1-onResume\" class=\"headerlink\" title=\"2.1 onResume()\"></a>2.1 onResume()</h2><p>WebView为活跃状态时回调，可以正常执行网页的响应。</p>\n<h2 id=\"2-2-onPause\"><a href=\"#2-2-onPause\" class=\"headerlink\" title=\"2.2 onPause()\"></a>2.2 onPause()</h2><p>WebView被切换到后台时回调, 页面被失去焦点, 变成不可见状态，onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</p>\n<h2 id=\"2-3-pauseTimers\"><a href=\"#2-3-pauseTimers\" class=\"headerlink\" title=\"2.3 pauseTimers()\"></a>2.3 pauseTimers()</h2><p>当应用程序被切换到后台时回调，该方法针对全应用程序的WebView，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</p>\n<h2 id=\"2-4-resumeTimers\"><a href=\"#2-4-resumeTimers\" class=\"headerlink\" title=\"2.4 resumeTimers()\"></a>2.4 resumeTimers()</h2><p>恢复pauseTimers时的动作。</p>\n<h2 id=\"2-5-destroy\"><a href=\"#2-5-destroy\" class=\"headerlink\" title=\"2.5 destroy()\"></a>2.5 destroy()</h2><p>关闭了Activity时回调, WebView调用destory时, WebView仍绑定在Activity上.这是由于自定义WebView构建时传入了该Activity的context对象, 因此需要先从父<br>容器中移除WebView, 然后再销毁webview。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mRootLayout.removeView(webView);  </div><div class=\"line\">mWebView.destroy();</div></pre></td></tr></table></figure>\n<h1 id=\"三-WebView页面导航\"><a href=\"#三-WebView页面导航\" class=\"headerlink\" title=\"三 WebView页面导航\"></a>三 WebView页面导航</h1><h2 id=\"3-1-页面跳转\"><a href=\"#3-1-页面跳转\" class=\"headerlink\" title=\"3.1 页面跳转\"></a>3.1 页面跳转</h2><p>当我们在WebView点击链接时, 默认的WebView会直接跳转到别的浏览器中, 如果想要实现在WebView内跳转就需要设置WebViewClient, 下面我们先来<br>说说WebView、WebViewClient、WebChromeClient三者的区别。</p>\n<ul>\n<li>WebView: 主要负责解析和渲染网页</li>\n<li>WebViewClient: 辅助WebView处理各种通知和请求事件</li>\n<li>WebChromeClient: 辅助WebView处理JavaScript中的对话框, 网址图标和标题等</li>\n</ul>\n<p>如果我们想控制不同链接的跳转方式, 我们需要继承WebViewClient重写shouldOverrideUrlLoading()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomWebViewClient</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Uri.parse(url).getHost().equals(<span class=\"string\">\"github.com/guoxiaoxing\"</span>)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是自己站点的链接, 则用本地WebView跳转</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//如果不是自己的站点则launch别的Activity来处理</span></div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</div><div class=\"line\">        mContext.startActivity(intent);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于shouldOverrideUrlLoading()方法的两点说明:</p>\n<p>1 方法返回值</p>\n<p>返回true: Android 系统会处理URL, 一般是唤起系统浏览器。<br>返回false: 当前 WebView 处理URL。</p>\n<p>由于默认放回false, 如果我们只想在WebView内处理链接跳转只需要设置mWebView.setWebViewClient(new WebViewClient())即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\">     * Give the host application a chance to take over the control when a new </div><div class=\"line\">     * url is about to be loaded in the current WebView. If WebViewClient is not </div><div class=\"line\">     * provided, by default WebView will ask Activity Manager to choose the </div><div class=\"line\">     * proper handler for the url. If WebViewClient is provided, return true </div><div class=\"line\">     * means the host application handles the url, while return false means the </div><div class=\"line\">     * current WebView handles the url. </div><div class=\"line\">     * This method is not called for requests using the POST \"method\". </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> view The WebView that is initiating the callback. </div><div class=\"line\">     * <span class=\"doctag\">@param</span> url The url to be loaded. </div><div class=\"line\">     * <span class=\"doctag\">@return</span> True if the host application wants to leave the current WebView </div><div class=\"line\">     *         and handle the url itself, otherwise return false. </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>2 方法deprecated问题</p>\n<p>shouldOverrideUrlLoading()方法在API &gt;= 24时被标记deprecated, 它的替代方法是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123;</div><div class=\"line\">    view.loadUrl(request.toString());</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是public boolean shouldOverrideUrlLoading(WebView view, String url)支持更广泛的API我们在使用的时候还是它,<br>关于这两个方法的讨论可以参见:</p>\n<p><a href=\"http://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead</a><br><a href=\"http://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest</a></p>\n<h2 id=\"3-2-页面回退\"><a href=\"#3-2-页面回退\" class=\"headerlink\" title=\"3.2 页面回退\"></a>3.2 页面回退</h2><p>Android的返回键, 如果想要实现WebView内网页的回退, 可以重写onKeyEvent()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Check if the key event was the Back button and if there's history</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; myWebView.canGoBack()) &#123;</div><div class=\"line\">        myWebView.goBack();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// If it wasn't the Back key or there's no web page history, bubble up to the default</span></div><div class=\"line\">    <span class=\"comment\">// system behavior (probably exit the activity)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-页面滑动\"><a href=\"#3-3-页面滑动\" class=\"headerlink\" title=\"3.3 页面滑动\"></a>3.3 页面滑动</h2><p>关于页面滑动, 我们在做下拉刷新等功能时, 经常会去判断WebView是否滚动到顶部或者滚动到底部。</p>\n<p>我们先来看一看三个判断高度的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getScrollY();</div></pre></td></tr></table></figure>\n<p>该方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">getHeight();</div><div class=\"line\">getBottom();</div></pre></td></tr></table></figure>\n<p>该方法都返回当前WebView这个容器的高度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getContentHeight();</div></pre></td></tr></table></figure>\n<p>返回的是整个html的高度, 但并不等同于当前整个页面的高度, 因为WebView有缩放功能, 所以当前整个页面的高度实际上应该是原始html的高度<br>再乘上缩放比例. 因此, 判断方法是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) &#123;</div><div class=\"line\">    <span class=\"comment\">//已经处于底端</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(webView.getScrollY() == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">    <span class=\"comment\">//处于顶端</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上这个方法也是我们常用的方法, 不过从API 17开始, mWebView.getScale()被标记为deprecated</p>\n<blockquote>\n<p>This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions<br>between the web rendering and UI threads; prefer onScaleChanged(WebView, </p>\n</blockquote>\n<p>因为scale的获取可以用一下方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomWebView</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomWebView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScaleChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">float</span> oldScale, <span class=\"keyword\">float</span> newScale)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onScaleChanged(view, oldScale, newScale);</div><div class=\"line\">            mCurrentScale = newScale</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于mWebView.getScale()的讨论可以参见:</p>\n<p><a href=\"https://developer.android.com/reference/android/webkit/WebView.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/webkit/WebView.html</a></p>\n<p><a href=\"http://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4</a></p>\n<h1 id=\"三-WebView缓存实现\"><a href=\"#三-WebView缓存实现\" class=\"headerlink\" title=\"三 WebView缓存实现\"></a>三 WebView缓存实现</h1><p>在项目中如果使用到WebView控件, 当加载html页面时, 会在/data/data/包名目录下生成database与cache两个文件夹。<br>请求的url记录是保存在WebViewCache.db, 而url的内容是保存在WebViewCache文件夹下。</p>\n<p>控制缓存行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView.getSettings();</div><div class=\"line\"><span class=\"comment\">//优先使用缓存</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); </div><div class=\"line\"><span class=\"comment\">//只在缓存中读取</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);</div><div class=\"line\">/不使用缓存</div><div class=\"line\">WwebSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);</div></pre></td></tr></table></figure>\n<p>清除缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">clearCache(<span class=\"keyword\">true</span>); <span class=\"comment\">//清除网页访问留下的缓存，由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.</span></div><div class=\"line\">clearHistory (); <span class=\"comment\">//清除当前webview访问的历史记录，只会webview访问历史记录里的所有记录除了当前访问记录.</span></div><div class=\"line\">clearFormData () <span class=\"comment\">//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据。</span></div></pre></td></tr></table></figure>\n<h1 id=\"四-WebView-Cookies\"><a href=\"#四-WebView-Cookies\" class=\"headerlink\" title=\"四 WebView Cookies\"></a>四 WebView Cookies</h1><p>添加Cookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">synCookies</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!CacheUtils.isLogin(<span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span>;</div><div class=\"line\">    CookieSyncManager.createInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">    CookieManager cookieManager = CookieManager.getInstance();</div><div class=\"line\">    cookieManager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">    cookieManager.removeSessionCookie();<span class=\"comment\">//移除</span></div><div class=\"line\">    String cookies = PreferenceHelper.readString(<span class=\"keyword\">this</span>, AppConfig.COOKIE_KEY, AppConfig.COOKIE_KEY);</div><div class=\"line\">    KJLoger.debug(cookies);</div><div class=\"line\">    cookieManager.setCookie(url, cookies);</div><div class=\"line\">    CookieSyncManager.getInstance().sync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>清除Cookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager.getInstance().removeSessionCookie();</div></pre></td></tr></table></figure>\n<h1 id=\"五-WebView本地资源访问\"><a href=\"#五-WebView本地资源访问\" class=\"headerlink\" title=\"五 WebView本地资源访问\"></a>五 WebView本地资源访问</h1><p>当我们在WebView中加载出从web服务器上拿取的内容时，是无法访问本地资源的，如assets目录下的图片资源，因为这样的行为属于跨域行为（Cross-Domain），而WebView是禁止<br>的。解决这个问题的方案是把html内容先下载到本地，然后使用loadDataWithBaseURL加载html。这样就可以在html中使用 file:///android_asset/xxx.png 的链接来引用包里<br>面assets下的资源了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadWithAccessLocal</span><span class=\"params\">(<span class=\"keyword\">final</span> String htmlUrl)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> String htmlStr = NetService.fetchHtml(htmlUrl);</div><div class=\"line\">                <span class=\"keyword\">if</span> (htmlStr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    TaskExecutor.runTaskOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                            loadDataWithBaseURL(htmlUrl, htmlStr, <span class=\"string\">\"text/html\"</span>, <span class=\"string\">\"UTF-8\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"Exception:\"</span> + e.getMessage());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            TaskExecutor.runTaskOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    onPageLoadedError(-<span class=\"number\">1</span>, <span class=\"string\">\"fetch html failed\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ul>\n<li>从网络上下载html的过程应放在工作线程中</li>\n<li>html下载成功后渲染出html的步骤应放在UI主线程，不然WebView会报错</li>\n<li>html下载失败则可以使用我们前面讲述的方法来显示自定义错误界面</li>\n</ul>\n</the>","excerpt":"<p><Excerpt in index | 首页摘要><br>+","more":"</p>\n<The rest of contents | 余下全文>\n\n<h1 id=\"WebView基本用法\"><a href=\"#WebView基本用法\" class=\"headerlink\" title=\"WebView基本用法\"></a>WebView基本用法</h1><p>作者: 郭嘉<br>邮箱: guoxiaoxingv@163.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>知乎: <a href=\"https://www.zhihu.com/people/allen-wells\">https://www.zhihu.com/people/allen-wells</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。<br>人生格言: 不想当程序员的歌手不是好厨师。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与<br>我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你<br>有所帮助, 也欢迎去star文章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<p><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md\">WebView基本用法</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md\">WebView代码交互</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\">WebView性能优化</a></p>\n<p>WebView也是Android View的一种, 我们通常用它来在应用内部展示网页, 和以往一样, 我们先来简单看一下它的基本用法。</p>\n<p>添加网络权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>在布局中添加WebView</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WebView</span>  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/webview\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<p>使用WebView加载网页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class=\"line\">myWebView.loadUrl(&quot;http://www.example.com&quot;);</div></pre></td></tr></table></figure>\n<p>以上就是WebView的简单用法, 相比大家已经十分熟悉, 下面我们就来逐一看看WebView的其他特性。</p>\n<h1 id=\"一-WebView基本组件\"><a href=\"#一-WebView基本组件\" class=\"headerlink\" title=\"一 WebView基本组件\"></a>一 WebView基本组件</h1><p>了解了基本用法, 我们对WebView就有了大致的印象, 下面我们来看看构建Web应用的三个重要组件。</p>\n<h2 id=\"1-1-WebSettings\"><a href=\"#1-1-WebSettings\" class=\"headerlink\" title=\"1.1 WebSettings\"></a>1.1 WebSettings</h2><p>WebSettings用来对WebView做各种设置, 你可以这样获取WebSettings:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView .getSettings();</div></pre></td></tr></table></figure>\n<p>WebSettings的常见设置如下所示:</p>\n<p>JS处理</p>\n<ul>\n<li>setJavaScriptEnabled(true);  //支持js</li>\n<li>setPluginsEnabled(true);  //支持插件 </li>\n<li>setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 </li>\n</ul>\n<p>缩放处理</p>\n<ul>\n<li>setUseWideViewPort(true);  //将图片调整到适合webview的大小 </li>\n<li>setLoadWithOverviewMode(true); // 缩放至屏幕的大小</li>\n<li>setSupportZoom(true);  //支持缩放，默认为true。是下面那个的前提。</li>\n<li>setBuiltInZoomControls(true); //设置内置的缩放控件。 这个取决于setSupportZoom(), 若setSupportZoom(false)，则该WebView不可缩放，这个不管设置什么都不能缩放。</li>\n<li>setDisplayZoomControls(false); //隐藏原生的缩放控件</li>\n</ul>\n<p>内容布局</p>\n<ul>\n<li>setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局</li>\n<li>supportMultipleWindows(); //多窗口 </li>\n</ul>\n<p>文件缓存</p>\n<ul>\n<li>setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 </li>\n<li>setAllowFileAccess(true);  //设置可以访问文件 </li>\n</ul>\n<p>其他设置</p>\n<ul>\n<li>setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点</li>\n<li>setLoadsImagesAutomatically(true); //支持自动加载图片</li>\n<li>setDefaultTextEncodingName(“utf-8”); //设置编码格式</li>\n<li>setPluginState(PluginState.OFF); //设置是否支持flash插件</li>\n<li>setDefaultFontSize(20); //设置默认字体大小</li>\n</ul>\n<h2 id=\"1-2-WebViewClient\"><a href=\"#1-2-WebViewClient\" class=\"headerlink\" title=\"1.2 WebViewClient\"></a>1.2 WebViewClient</h2><p>WebViewClient用来帮助WebView处理各种通知, 请求事件。我们通过继承WebViewClient并重载它的方法可以实现不同功能的定制。具体如下所示:</p>\n<ul>\n<li><p>shouldOverrideUrlLoading(WebView view, String url) //在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。比如获取url，查看url.contains(“add”)，进行添加操作</p>\n</li>\n<li><p>shouldOverrideKeyEvent(WebView view, KeyEvent event) //处理在浏览器中的按键事件。 </p>\n</li>\n<li><p>onPageStarted(WebView view, String url, Bitmap favicon) //开始载入页面时调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。 </p>\n</li>\n<li><p>onPageFinished(WebView view, String url) //在页面加载结束时调用, 我们可以关闭loading 条，切换程序动作。 </p>\n</li>\n<li><p>onLoadResource(WebView view, String url) //在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 </p>\n</li>\n<li><p>onReceivedError(WebView view, int errorCode, String description, String failingUrl) //报告错误信息 </p>\n</li>\n<li><p>doUpdateVisitedHistory(WebView view, String url, boolean isReload) //更新历史记录 </p>\n</li>\n<li><p>onFormResubmission(WebView view, Message dontResend, Message resend) //应用程序重新请求网页数据</p>\n</li>\n<li><p>onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm) //获取返回信息授权请求 </p>\n</li>\n<li><p>onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //让webview处理https请求。</p>\n</li>\n<li><p>onScaleChanged(WebView view, float oldScale, float newScale) //WebView发生改变时调用</p>\n</li>\n<li><p>onUnhandledKeyEvent(WebView view, KeyEvent event) //Key事件未被加载时调用</p>\n</li>\n</ul>\n<h2 id=\"1-3-WebChromeClient\"><a href=\"#1-3-WebChromeClient\" class=\"headerlink\" title=\"1.3 WebChromeClient\"></a>1.3 WebChromeClient</h2><p>WebChromeClient用来帮助WebView处理JS的对话框、网址图标、网址标题和加载进度等。同样地, 通过继承WebChromeClient并重载它的方法也可以实现不同功能的定制, 如下所示:</p>\n<ul>\n<li><p>public void onProgressChanged(WebView view, int newProgress); //获得网页的加载进度，显示在右上角的TextView控件中</p>\n</li>\n<li><p>public void onReceivedTitle(WebView view, String title); //获取Web页中的title用来设置自己界面中的title, 当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为”找不到该网页”,</p>\n</li>\n<li><p>public void onReceivedIcon(WebView view, Bitmap icon); //获取Web页中的icon</p>\n</li>\n<li><p>public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg);</p>\n</li>\n<li><p>public void onCloseWindow(WebView window);</p>\n</li>\n<li><p>public boolean onJsAlert(WebView view, String url, String message, JsResult result); //处理alert弹出框，html 弹框的一种方式</p>\n</li>\n<li><p>public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) //处理confirm弹出框</p>\n</li>\n<li><p>public boolean onJsConfirm(WebView view, String url, String message, JsResult result); //处理prompt弹出框</p>\n</li>\n</ul>\n<h1 id=\"二-WebView生命周期\"><a href=\"#二-WebView生命周期\" class=\"headerlink\" title=\"二 WebView生命周期\"></a>二 WebView生命周期</h1><h2 id=\"2-1-onResume\"><a href=\"#2-1-onResume\" class=\"headerlink\" title=\"2.1 onResume()\"></a>2.1 onResume()</h2><p>WebView为活跃状态时回调，可以正常执行网页的响应。</p>\n<h2 id=\"2-2-onPause\"><a href=\"#2-2-onPause\" class=\"headerlink\" title=\"2.2 onPause()\"></a>2.2 onPause()</h2><p>WebView被切换到后台时回调, 页面被失去焦点, 变成不可见状态，onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</p>\n<h2 id=\"2-3-pauseTimers\"><a href=\"#2-3-pauseTimers\" class=\"headerlink\" title=\"2.3 pauseTimers()\"></a>2.3 pauseTimers()</h2><p>当应用程序被切换到后台时回调，该方法针对全应用程序的WebView，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</p>\n<h2 id=\"2-4-resumeTimers\"><a href=\"#2-4-resumeTimers\" class=\"headerlink\" title=\"2.4 resumeTimers()\"></a>2.4 resumeTimers()</h2><p>恢复pauseTimers时的动作。</p>\n<h2 id=\"2-5-destroy\"><a href=\"#2-5-destroy\" class=\"headerlink\" title=\"2.5 destroy()\"></a>2.5 destroy()</h2><p>关闭了Activity时回调, WebView调用destory时, WebView仍绑定在Activity上.这是由于自定义WebView构建时传入了该Activity的context对象, 因此需要先从父<br>容器中移除WebView, 然后再销毁webview。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mRootLayout.removeView(webView);  </div><div class=\"line\">mWebView.destroy();</div></pre></td></tr></table></figure>\n<h1 id=\"三-WebView页面导航\"><a href=\"#三-WebView页面导航\" class=\"headerlink\" title=\"三 WebView页面导航\"></a>三 WebView页面导航</h1><h2 id=\"3-1-页面跳转\"><a href=\"#3-1-页面跳转\" class=\"headerlink\" title=\"3.1 页面跳转\"></a>3.1 页面跳转</h2><p>当我们在WebView点击链接时, 默认的WebView会直接跳转到别的浏览器中, 如果想要实现在WebView内跳转就需要设置WebViewClient, 下面我们先来<br>说说WebView、WebViewClient、WebChromeClient三者的区别。</p>\n<ul>\n<li>WebView: 主要负责解析和渲染网页</li>\n<li>WebViewClient: 辅助WebView处理各种通知和请求事件</li>\n<li>WebChromeClient: 辅助WebView处理JavaScript中的对话框, 网址图标和标题等</li>\n</ul>\n<p>如果我们想控制不同链接的跳转方式, 我们需要继承WebViewClient重写shouldOverrideUrlLoading()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomWebViewClient</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Uri.parse(url).getHost().equals(<span class=\"string\">\"github.com/guoxiaoxing\"</span>)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是自己站点的链接, 则用本地WebView跳转</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//如果不是自己的站点则launch别的Activity来处理</span></div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</div><div class=\"line\">        mContext.startActivity(intent);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于shouldOverrideUrlLoading()方法的两点说明:</p>\n<p>1 方法返回值</p>\n<p>返回true: Android 系统会处理URL, 一般是唤起系统浏览器。<br>返回false: 当前 WebView 处理URL。</p>\n<p>由于默认放回false, 如果我们只想在WebView内处理链接跳转只需要设置mWebView.setWebViewClient(new WebViewClient())即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </div><div class=\"line\">     * Give the host application a chance to take over the control when a new </div><div class=\"line\">     * url is about to be loaded in the current WebView. If WebViewClient is not </div><div class=\"line\">     * provided, by default WebView will ask Activity Manager to choose the </div><div class=\"line\">     * proper handler for the url. If WebViewClient is provided, return true </div><div class=\"line\">     * means the host application handles the url, while return false means the </div><div class=\"line\">     * current WebView handles the url. </div><div class=\"line\">     * This method is not called for requests using the POST \"method\". </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> view The WebView that is initiating the callback. </div><div class=\"line\">     * <span class=\"doctag\">@param</span> url The url to be loaded. </div><div class=\"line\">     * <span class=\"doctag\">@return</span> True if the host application wants to leave the current WebView </div><div class=\"line\">     *         and handle the url itself, otherwise return false. </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>2 方法deprecated问题</p>\n<p>shouldOverrideUrlLoading()方法在API &gt;= 24时被标记deprecated, 它的替代方法是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123;</div><div class=\"line\">    view.loadUrl(request.toString());</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是public boolean shouldOverrideUrlLoading(WebView view, String url)支持更广泛的API我们在使用的时候还是它,<br>关于这两个方法的讨论可以参见:</p>\n<p><a href=\"http://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead\">http://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead</a><br><a href=\"http://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest\">http://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest</a></p>\n<h2 id=\"3-2-页面回退\"><a href=\"#3-2-页面回退\" class=\"headerlink\" title=\"3.2 页面回退\"></a>3.2 页面回退</h2><p>Android的返回键, 如果想要实现WebView内网页的回退, 可以重写onKeyEvent()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Check if the key event was the Back button and if there's history</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; myWebView.canGoBack()) &#123;</div><div class=\"line\">        myWebView.goBack();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// If it wasn't the Back key or there's no web page history, bubble up to the default</span></div><div class=\"line\">    <span class=\"comment\">// system behavior (probably exit the activity)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-页面滑动\"><a href=\"#3-3-页面滑动\" class=\"headerlink\" title=\"3.3 页面滑动\"></a>3.3 页面滑动</h2><p>关于页面滑动, 我们在做下拉刷新等功能时, 经常会去判断WebView是否滚动到顶部或者滚动到底部。</p>\n<p>我们先来看一看三个判断高度的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getScrollY();</div></pre></td></tr></table></figure>\n<p>该方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">getHeight();</div><div class=\"line\">getBottom();</div></pre></td></tr></table></figure>\n<p>该方法都返回当前WebView这个容器的高度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getContentHeight();</div></pre></td></tr></table></figure>\n<p>返回的是整个html的高度, 但并不等同于当前整个页面的高度, 因为WebView有缩放功能, 所以当前整个页面的高度实际上应该是原始html的高度<br>再乘上缩放比例. 因此, 判断方法是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) &#123;</div><div class=\"line\">    <span class=\"comment\">//已经处于底端</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(webView.getScrollY() == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">    <span class=\"comment\">//处于顶端</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上这个方法也是我们常用的方法, 不过从API 17开始, mWebView.getScale()被标记为deprecated</p>\n<blockquote>\n<p>This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions<br>between the web rendering and UI threads; prefer onScaleChanged(WebView, </p>\n</blockquote>\n<p>因为scale的获取可以用一下方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomWebView</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomWebView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScaleChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">float</span> oldScale, <span class=\"keyword\">float</span> newScale)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onScaleChanged(view, oldScale, newScale);</div><div class=\"line\">            mCurrentScale = newScale</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于mWebView.getScale()的讨论可以参见:</p>\n<p><a href=\"https://developer.android.com/reference/android/webkit/WebView.html\">https://developer.android.com/reference/android/webkit/WebView.html</a></p>\n<p><a href=\"http://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4\">http://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4</a></p>\n<h1 id=\"三-WebView缓存实现\"><a href=\"#三-WebView缓存实现\" class=\"headerlink\" title=\"三 WebView缓存实现\"></a>三 WebView缓存实现</h1><p>在项目中如果使用到WebView控件, 当加载html页面时, 会在/data/data/包名目录下生成database与cache两个文件夹。<br>请求的url记录是保存在WebViewCache.db, 而url的内容是保存在WebViewCache文件夹下。</p>\n<p>控制缓存行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView.getSettings();</div><div class=\"line\"><span class=\"comment\">//优先使用缓存</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); </div><div class=\"line\"><span class=\"comment\">//只在缓存中读取</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);</div><div class=\"line\">/不使用缓存</div><div class=\"line\">WwebSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);</div></pre></td></tr></table></figure>\n<p>清除缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">clearCache(<span class=\"keyword\">true</span>); <span class=\"comment\">//清除网页访问留下的缓存，由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.</span></div><div class=\"line\">clearHistory (); <span class=\"comment\">//清除当前webview访问的历史记录，只会webview访问历史记录里的所有记录除了当前访问记录.</span></div><div class=\"line\">clearFormData () <span class=\"comment\">//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据。</span></div></pre></td></tr></table></figure>\n<h1 id=\"四-WebView-Cookies\"><a href=\"#四-WebView-Cookies\" class=\"headerlink\" title=\"四 WebView Cookies\"></a>四 WebView Cookies</h1><p>添加Cookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">synCookies</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!CacheUtils.isLogin(<span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span>;</div><div class=\"line\">    CookieSyncManager.createInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">    CookieManager cookieManager = CookieManager.getInstance();</div><div class=\"line\">    cookieManager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">    cookieManager.removeSessionCookie();<span class=\"comment\">//移除</span></div><div class=\"line\">    String cookies = PreferenceHelper.readString(<span class=\"keyword\">this</span>, AppConfig.COOKIE_KEY, AppConfig.COOKIE_KEY);</div><div class=\"line\">    KJLoger.debug(cookies);</div><div class=\"line\">    cookieManager.setCookie(url, cookies);</div><div class=\"line\">    CookieSyncManager.getInstance().sync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>清除Cookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager.getInstance().removeSessionCookie();</div></pre></td></tr></table></figure>\n<h1 id=\"五-WebView本地资源访问\"><a href=\"#五-WebView本地资源访问\" class=\"headerlink\" title=\"五 WebView本地资源访问\"></a>五 WebView本地资源访问</h1><p>当我们在WebView中加载出从web服务器上拿取的内容时，是无法访问本地资源的，如assets目录下的图片资源，因为这样的行为属于跨域行为（Cross-Domain），而WebView是禁止<br>的。解决这个问题的方案是把html内容先下载到本地，然后使用loadDataWithBaseURL加载html。这样就可以在html中使用 file:///android_asset/xxx.png 的链接来引用包里<br>面assets下的资源了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadWithAccessLocal</span><span class=\"params\">(<span class=\"keyword\">final</span> String htmlUrl)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> String htmlStr = NetService.fetchHtml(htmlUrl);</div><div class=\"line\">                <span class=\"keyword\">if</span> (htmlStr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    TaskExecutor.runTaskOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                            loadDataWithBaseURL(htmlUrl, htmlStr, <span class=\"string\">\"text/html\"</span>, <span class=\"string\">\"UTF-8\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"Exception:\"</span> + e.getMessage());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            TaskExecutor.runTaskOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    onPageLoadedError(-<span class=\"number\">1</span>, <span class=\"string\">\"fetch html failed\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ul>\n<li>从网络上下载html的过程应放在工作线程中</li>\n<li>html下载成功后渲染出html的步骤应放在UI主线程，不然WebView会报错</li>\n<li>html下载失败则可以使用我们前面讲述的方法来显示自定义错误界面</li>\n</ul>"},{"title":"Hello World","date":"2015-12-02T16:00:00.000Z","_content":"<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# WebView性能优化\n\n作者: 郭嘉  \n邮箱: guoxiaoxingv@163.com  \n博客: https://guoxiaoxing.github.io/  \n知乎: https://www.zhihu.com/people/allen-wells\n\n**关于作者**\n\n>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。\n人生格言: 不想当程序员的歌手不是好厨师。\n\n**关于文章**\n\n>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与\n我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你\n有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n[WebView基本用法](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md)\n[WebView代码交互](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md)\n[WebView性能优化](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md)\n\n# 一 优化网页加载速度\n\n默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果\n在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或\njs文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。\n\n设置WebView, 先禁止加载图片\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n\n//图片加载\nif(Build.VERSION.SDK_INT >= 19){\n    webSettings.setLoadsImagesAutomatically(true);\n}else {\n    webSettings.setLoadsImagesAutomatically(false);\n}\n```\n\n覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片\n\n```java\n@Override\npublic void onPageFinished(WebView view, String url) {\n    super.onPageFinished(view, url);\n    if (!view.getSettings().getLoadsImagesAutomatically()) {\n        view.getSettings().setLoadsImagesAutomatically(true);\n    }\n}\n```\n\n**注意**: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。\n\n# 二 硬件加速页面闪烁问题\n\n4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边\n滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:\n\n过度前关闭硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n}\n```\n\n过度前开启硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n}\n```\n\n以上三篇, 大致就说这么多,  在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。\n               \n该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。\n               \n```java\npackage com.guoxiaoxing.webview;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.Window;\nimport android.webkit.JsResult;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebResourceError;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.ProgressBar;\n\nimport com.jockeyjs.Jockey;\nimport com.jockeyjs.JockeyImpl;\n\n/**\n * Author: guoxiaoxing\n * Date: 16/7/21 下午4:03\n * Function: H5Activity 提供各种功能载入Web页面\n * <p>\n * For more information, you can visit https://github.com/guoxiaoxing or contact me by\n * guoxiaoxingv@163.com\n */\npublic class H5Activity extends AppCompatActivity {\n\n    public static final String H5_URL = \"H5_URL\";\n    private static final String JOCKEY_EVENT_NAME = \"JOCKEY_EVENT_NAME\";\n    private static final String TAG = H5Activity.class.getSimpleName();\n\n    private Toolbar mToolbar;\n    private ProgressBar mProgressBar;\n\n    private Jockey mJockey;\n    private WebView mWebView;\n    private WebViewClient mWebViewClient;\n    private WebChromeClient mWebChromeClient;\n\n    private String mUrl;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.activity_h5);\n        setupView();\n        setupSettings();\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        setupJockey();\n        setupData();\n    }\n\n    private void setupView() {\n        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);\n        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);\n        mWebView = (WebView) findViewById(R.id.h5_webview);\n    }\n\n    private void setupSettings() {\n\n        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);\n        mWebView.setHorizontalScrollBarEnabled(false);\n        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);\n\n        WebSettings mWebSettings = mWebView.getSettings();\n        mWebSettings.setSupportZoom(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDefaultTextEncodingName(\"utf-8\");\n        mWebSettings.setLoadsImagesAutomatically(true);\n\n        //JS\n        mWebSettings.setJavaScriptEnabled(true);\n        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n\n        mWebSettings.setAllowFileAccess(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDatabaseEnabled(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setDomStorageEnabled(true);\n\n\n        //缓存\n        ConnectivityManager connectivityManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo info = connectivityManager.getActiveNetworkInfo();\n        if (info != null && info.isConnected()) {\n            String wvcc = info.getTypeName();\n            Log.d(TAG, \"current network: \" + wvcc);\n            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);\n        } else {\n            Log.d(TAG, \"No network is connected, use cache\");\n            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\n        }\n\n        if (Build.VERSION.SDK_INT >= 16) {\n            mWebSettings.setAllowFileAccessFromFileURLs(true);\n            mWebSettings.setAllowUniversalAccessFromFileURLs(true);\n        }\n\n        if (Build.VERSION.SDK_INT >= 12) {\n            mWebSettings.setAllowContentAccess(true);\n        }\n\n        setupWebViewClient();\n        setupWebChromeClient();\n    }\n\n    private void setupJockey() {\n        mJockey = JockeyImpl.getDefault();\n        mJockey.configure(mWebView);\n        mJockey.setWebViewClient(mWebViewClient);\n        mJockey.setOnValidateListener(new Jockey.OnValidateListener() {\n            @Override\n            public boolean validate(String host) {\n                return \"yourdomain.com\".equals(host);\n            }\n        });\n\n        //TODO set your event handler\n        mJockey.on(JOCKEY_EVENT_NAME, new EventHandler());\n    }\n\n    private void setupData() {\n        mUrl = getIntent().getStringExtra(H5_URL);\n        if (TextUtils.isEmpty(mUrl)) {\n            //TODO show error page\n        } else {\n            mWebView.loadUrl(mUrl);\n        }\n    }\n\n    private void setupWebViewClient() {\n        mWebViewClient = new WebViewClient() {\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                //TODO 处理URL, 例如对指定的URL做不同的处理等\n                return false;\n            }\n\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n            @Override\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                super.onReceivedError(view, request, error);\n            }\n        };\n        mWebView.setWebViewClient(mWebViewClient);\n    }\n\n    private void setupWebChromeClient() {\n        mWebChromeClient = new WebChromeClient() {\n            @Override\n            public void onReceivedTitle(WebView view, String title) {\n                super.onReceivedTitle(view, title);\n                mToolbar.setTitle(title);\n\n            }\n\n            @Override\n            public void onProgressChanged(WebView view, int newProgress) {\n                super.onProgressChanged(view, newProgress);\n                mProgressBar.setProgress(newProgress);\n                if (newProgress == 100) {\n                    mProgressBar.setVisibility(View.GONE);\n                } else {\n                    mProgressBar.setVisibility(View.VISIBLE);\n                }\n            }\n\n            @Override\n            public boolean onJsAlert(WebView view, String url, String message, JsResult result) {\n                return super.onJsAlert(view, url, message, result);\n            }\n        };\n        mWebView.setWebChromeClient(mWebChromeClient);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {\n            mWebView.goBack();\n            return true;\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n}\n\n```","source":"_posts/WebView性能优化.md","raw":"title: Hello World\ndate: 2015-12-03 00:00:00\n---\n<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# WebView性能优化\n\n作者: 郭嘉  \n邮箱: guoxiaoxingv@163.com  \n博客: https://guoxiaoxing.github.io/  \n知乎: https://www.zhihu.com/people/allen-wells\n\n**关于作者**\n\n>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。\n人生格言: 不想当程序员的歌手不是好厨师。\n\n**关于文章**\n\n>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与\n我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你\n有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n[WebView基本用法](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md)\n[WebView代码交互](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md)\n[WebView性能优化](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md)\n\n# 一 优化网页加载速度\n\n默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果\n在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或\njs文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。\n\n设置WebView, 先禁止加载图片\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n\n//图片加载\nif(Build.VERSION.SDK_INT >= 19){\n    webSettings.setLoadsImagesAutomatically(true);\n}else {\n    webSettings.setLoadsImagesAutomatically(false);\n}\n```\n\n覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片\n\n```java\n@Override\npublic void onPageFinished(WebView view, String url) {\n    super.onPageFinished(view, url);\n    if (!view.getSettings().getLoadsImagesAutomatically()) {\n        view.getSettings().setLoadsImagesAutomatically(true);\n    }\n}\n```\n\n**注意**: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。\n\n# 二 硬件加速页面闪烁问题\n\n4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边\n滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:\n\n过度前关闭硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n}\n```\n\n过度前开启硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n}\n```\n\n以上三篇, 大致就说这么多,  在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。\n               \n该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。\n               \n```java\npackage com.guoxiaoxing.webview;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.Window;\nimport android.webkit.JsResult;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebResourceError;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.ProgressBar;\n\nimport com.jockeyjs.Jockey;\nimport com.jockeyjs.JockeyImpl;\n\n/**\n * Author: guoxiaoxing\n * Date: 16/7/21 下午4:03\n * Function: H5Activity 提供各种功能载入Web页面\n * <p>\n * For more information, you can visit https://github.com/guoxiaoxing or contact me by\n * guoxiaoxingv@163.com\n */\npublic class H5Activity extends AppCompatActivity {\n\n    public static final String H5_URL = \"H5_URL\";\n    private static final String JOCKEY_EVENT_NAME = \"JOCKEY_EVENT_NAME\";\n    private static final String TAG = H5Activity.class.getSimpleName();\n\n    private Toolbar mToolbar;\n    private ProgressBar mProgressBar;\n\n    private Jockey mJockey;\n    private WebView mWebView;\n    private WebViewClient mWebViewClient;\n    private WebChromeClient mWebChromeClient;\n\n    private String mUrl;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.activity_h5);\n        setupView();\n        setupSettings();\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        setupJockey();\n        setupData();\n    }\n\n    private void setupView() {\n        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);\n        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);\n        mWebView = (WebView) findViewById(R.id.h5_webview);\n    }\n\n    private void setupSettings() {\n\n        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);\n        mWebView.setHorizontalScrollBarEnabled(false);\n        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);\n\n        WebSettings mWebSettings = mWebView.getSettings();\n        mWebSettings.setSupportZoom(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDefaultTextEncodingName(\"utf-8\");\n        mWebSettings.setLoadsImagesAutomatically(true);\n\n        //JS\n        mWebSettings.setJavaScriptEnabled(true);\n        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n\n        mWebSettings.setAllowFileAccess(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDatabaseEnabled(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setDomStorageEnabled(true);\n\n\n        //缓存\n        ConnectivityManager connectivityManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo info = connectivityManager.getActiveNetworkInfo();\n        if (info != null && info.isConnected()) {\n            String wvcc = info.getTypeName();\n            Log.d(TAG, \"current network: \" + wvcc);\n            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);\n        } else {\n            Log.d(TAG, \"No network is connected, use cache\");\n            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\n        }\n\n        if (Build.VERSION.SDK_INT >= 16) {\n            mWebSettings.setAllowFileAccessFromFileURLs(true);\n            mWebSettings.setAllowUniversalAccessFromFileURLs(true);\n        }\n\n        if (Build.VERSION.SDK_INT >= 12) {\n            mWebSettings.setAllowContentAccess(true);\n        }\n\n        setupWebViewClient();\n        setupWebChromeClient();\n    }\n\n    private void setupJockey() {\n        mJockey = JockeyImpl.getDefault();\n        mJockey.configure(mWebView);\n        mJockey.setWebViewClient(mWebViewClient);\n        mJockey.setOnValidateListener(new Jockey.OnValidateListener() {\n            @Override\n            public boolean validate(String host) {\n                return \"yourdomain.com\".equals(host);\n            }\n        });\n\n        //TODO set your event handler\n        mJockey.on(JOCKEY_EVENT_NAME, new EventHandler());\n    }\n\n    private void setupData() {\n        mUrl = getIntent().getStringExtra(H5_URL);\n        if (TextUtils.isEmpty(mUrl)) {\n            //TODO show error page\n        } else {\n            mWebView.loadUrl(mUrl);\n        }\n    }\n\n    private void setupWebViewClient() {\n        mWebViewClient = new WebViewClient() {\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                //TODO 处理URL, 例如对指定的URL做不同的处理等\n                return false;\n            }\n\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n            @Override\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                super.onReceivedError(view, request, error);\n            }\n        };\n        mWebView.setWebViewClient(mWebViewClient);\n    }\n\n    private void setupWebChromeClient() {\n        mWebChromeClient = new WebChromeClient() {\n            @Override\n            public void onReceivedTitle(WebView view, String title) {\n                super.onReceivedTitle(view, title);\n                mToolbar.setTitle(title);\n\n            }\n\n            @Override\n            public void onProgressChanged(WebView view, int newProgress) {\n                super.onProgressChanged(view, newProgress);\n                mProgressBar.setProgress(newProgress);\n                if (newProgress == 100) {\n                    mProgressBar.setVisibility(View.GONE);\n                } else {\n                    mProgressBar.setVisibility(View.VISIBLE);\n                }\n            }\n\n            @Override\n            public boolean onJsAlert(WebView view, String url, String message, JsResult result) {\n                return super.onJsAlert(view, url, message, result);\n            }\n        };\n        mWebView.setWebChromeClient(mWebChromeClient);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {\n            mWebView.goBack();\n            return true;\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n}\n\n```","slug":"WebView性能优化","published":1,"updated":"2016-08-02T09:50:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirdaaam70001295movlwb9la","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>+<a id=\"more\"></a></excerpt></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"WebView性能优化\"><a href=\"#WebView性能优化\" class=\"headerlink\" title=\"WebView性能优化\"></a>WebView性能优化</h1><p>作者: 郭嘉<br>邮箱: guoxiaoxingv@163.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>知乎: <a href=\"https://www.zhihu.com/people/allen-wells\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/people/allen-wells</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。<br>人生格言: 不想当程序员的歌手不是好厨师。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与<br>我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你<br>有所帮助, 也欢迎去star文章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<p><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md\" target=\"_blank\" rel=\"external\">WebView基本用法</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md\" target=\"_blank\" rel=\"external\">WebView代码交互</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\" target=\"_blank\" rel=\"external\">WebView性能优化</a></p>\n<h1 id=\"一-优化网页加载速度\"><a href=\"#一-优化网页加载速度\" class=\"headerlink\" title=\"一 优化网页加载速度\"></a>一 优化网页加载速度</h1><p>默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果<br>在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或<br>js文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。</p>\n<p>设置WebView, 先禁止加载图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView.getSettings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//图片加载</span></div><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= <span class=\"number\">19</span>)&#123;</div><div class=\"line\">    webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!view.getSettings().getLoadsImagesAutomatically()) &#123;</div><div class=\"line\">        view.getSettings().setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。</p>\n<h1 id=\"二-硬件加速页面闪烁问题\"><a href=\"#二-硬件加速页面闪烁问题\" class=\"headerlink\" title=\"二 硬件加速页面闪烁问题\"></a>二 硬件加速页面闪烁问题</h1><p>4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边<br>滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:</p>\n<p>过度前关闭硬件加速</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB)&#123;</div><div class=\"line\">    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>过度前开启硬件加速</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB)&#123;</div><div class=\"line\">    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上三篇, 大致就说这么多,  在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。</p>\n<p>该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.guoxiaoxing.webview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.ConnectivityManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.NetworkInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Build;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.TextUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.KeyEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.JsResult;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebChromeClient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebResourceError;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebResourceRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebSettings;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebViewClient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ProgressBar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jockeyjs.Jockey;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jockeyjs.JockeyImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Author: guoxiaoxing</div><div class=\"line\"> * Date: 16/7/21 下午4:03</div><div class=\"line\"> * Function: H5Activity 提供各种功能载入Web页面</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * For more information, you can visit https://github.com/guoxiaoxing or contact me by</div><div class=\"line\"> * guoxiaoxingv@163.com</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H5Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String H5_URL = <span class=\"string\">\"H5_URL\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String JOCKEY_EVENT_NAME = <span class=\"string\">\"JOCKEY_EVENT_NAME\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = H5Activity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> ProgressBar mProgressBar;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Jockey mJockey;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebView mWebView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebViewClient mWebViewClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebChromeClient mWebChromeClient;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String mUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class=\"line\">        setContentView(R.layout.activity_h5);</div><div class=\"line\">        setupView();</div><div class=\"line\">        setupSettings();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">        setupJockey();</div><div class=\"line\">        setupData();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);</div><div class=\"line\">        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);</div><div class=\"line\">        mWebView = (WebView) findViewById(R.id.h5_webview);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupSettings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);</div><div class=\"line\">        mWebView.setHorizontalScrollBarEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);</div><div class=\"line\"></div><div class=\"line\">        WebSettings mWebSettings = mWebView.getSettings();</div><div class=\"line\">        mWebSettings.setSupportZoom(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDefaultTextEncodingName(<span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">        mWebSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//JS</span></div><div class=\"line\">        mWebSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        mWebSettings.setAllowFileAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDatabaseEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDomStorageEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//缓存</span></div><div class=\"line\">        ConnectivityManager connectivityManager = (ConnectivityManager) <span class=\"keyword\">this</span>.getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class=\"line\">        NetworkInfo info = connectivityManager.getActiveNetworkInfo();</div><div class=\"line\">        <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span> &amp;&amp; info.isConnected()) &#123;</div><div class=\"line\">            String wvcc = info.getTypeName();</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"current network: \"</span> + wvcc);</div><div class=\"line\">            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"No network is connected, use cache\"</span>);</div><div class=\"line\">            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">16</span>) &#123;</div><div class=\"line\">            mWebSettings.setAllowFileAccessFromFileURLs(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mWebSettings.setAllowUniversalAccessFromFileURLs(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">12</span>) &#123;</div><div class=\"line\">            mWebSettings.setAllowContentAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        setupWebViewClient();</div><div class=\"line\">        setupWebChromeClient();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupJockey</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mJockey = JockeyImpl.getDefault();</div><div class=\"line\">        mJockey.configure(mWebView);</div><div class=\"line\">        mJockey.setWebViewClient(mWebViewClient);</div><div class=\"line\">        mJockey.setOnValidateListener(<span class=\"keyword\">new</span> Jockey.OnValidateListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validate</span><span class=\"params\">(String host)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"yourdomain.com\"</span>.equals(host);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//TODO set your event handler</span></div><div class=\"line\">        mJockey.on(JOCKEY_EVENT_NAME, <span class=\"keyword\">new</span> EventHandler());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mUrl = getIntent().getStringExtra(H5_URL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(mUrl)) &#123;</div><div class=\"line\">            <span class=\"comment\">//TODO show error page</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mWebView.loadUrl(mUrl);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebViewClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWebViewClient = <span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//TODO 处理URL, 例如对指定的URL做不同的处理等</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedError(view, request, error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mWebView.setWebViewClient(mWebViewClient);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebChromeClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWebChromeClient = <span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedTitle</span><span class=\"params\">(WebView view, String title)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedTitle(view, title);</div><div class=\"line\">                mToolbar.setTitle(title);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onProgressChanged(view, newProgress);</div><div class=\"line\">                mProgressBar.setProgress(newProgress);</div><div class=\"line\">                <span class=\"keyword\">if</span> (newProgress == <span class=\"number\">100</span>) &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.GONE);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onJsAlert</span><span class=\"params\">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onJsAlert(view, url, message, result);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mWebView.setWebChromeClient(mWebChromeClient);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123;</div><div class=\"line\">            mWebView.goBack();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></the>","excerpt":"<p><Excerpt in index | 首页摘要><br>+","more":"</p>\n<The rest of contents | 余下全文>\n\n<h1 id=\"WebView性能优化\"><a href=\"#WebView性能优化\" class=\"headerlink\" title=\"WebView性能优化\"></a>WebView性能优化</h1><p>作者: 郭嘉<br>邮箱: guoxiaoxingv@163.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>知乎: <a href=\"https://www.zhihu.com/people/allen-wells\">https://www.zhihu.com/people/allen-wells</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。<br>人生格言: 不想当程序员的歌手不是好厨师。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与<br>我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你<br>有所帮助, 也欢迎去star文章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<p><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md\">WebView基本用法</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md\">WebView代码交互</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\">WebView性能优化</a></p>\n<h1 id=\"一-优化网页加载速度\"><a href=\"#一-优化网页加载速度\" class=\"headerlink\" title=\"一 优化网页加载速度\"></a>一 优化网页加载速度</h1><p>默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果<br>在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或<br>js文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。</p>\n<p>设置WebView, 先禁止加载图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView.getSettings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//图片加载</span></div><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= <span class=\"number\">19</span>)&#123;</div><div class=\"line\">    webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!view.getSettings().getLoadsImagesAutomatically()) &#123;</div><div class=\"line\">        view.getSettings().setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。</p>\n<h1 id=\"二-硬件加速页面闪烁问题\"><a href=\"#二-硬件加速页面闪烁问题\" class=\"headerlink\" title=\"二 硬件加速页面闪烁问题\"></a>二 硬件加速页面闪烁问题</h1><p>4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边<br>滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:</p>\n<p>过度前关闭硬件加速</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB)&#123;</div><div class=\"line\">    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>过度前开启硬件加速</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB)&#123;</div><div class=\"line\">    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上三篇, 大致就说这么多,  在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。</p>\n<p>该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.guoxiaoxing.webview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.ConnectivityManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.NetworkInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Build;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.TextUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.KeyEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.JsResult;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebChromeClient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebResourceError;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebResourceRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebSettings;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebViewClient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ProgressBar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jockeyjs.Jockey;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jockeyjs.JockeyImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Author: guoxiaoxing</div><div class=\"line\"> * Date: 16/7/21 下午4:03</div><div class=\"line\"> * Function: H5Activity 提供各种功能载入Web页面</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * For more information, you can visit https://github.com/guoxiaoxing or contact me by</div><div class=\"line\"> * guoxiaoxingv@163.com</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H5Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String H5_URL = <span class=\"string\">\"H5_URL\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String JOCKEY_EVENT_NAME = <span class=\"string\">\"JOCKEY_EVENT_NAME\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = H5Activity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> ProgressBar mProgressBar;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Jockey mJockey;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebView mWebView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebViewClient mWebViewClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebChromeClient mWebChromeClient;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String mUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class=\"line\">        setContentView(R.layout.activity_h5);</div><div class=\"line\">        setupView();</div><div class=\"line\">        setupSettings();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">        setupJockey();</div><div class=\"line\">        setupData();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);</div><div class=\"line\">        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);</div><div class=\"line\">        mWebView = (WebView) findViewById(R.id.h5_webview);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupSettings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);</div><div class=\"line\">        mWebView.setHorizontalScrollBarEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);</div><div class=\"line\"></div><div class=\"line\">        WebSettings mWebSettings = mWebView.getSettings();</div><div class=\"line\">        mWebSettings.setSupportZoom(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDefaultTextEncodingName(<span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">        mWebSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//JS</span></div><div class=\"line\">        mWebSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        mWebSettings.setAllowFileAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDatabaseEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDomStorageEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//缓存</span></div><div class=\"line\">        ConnectivityManager connectivityManager = (ConnectivityManager) <span class=\"keyword\">this</span>.getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class=\"line\">        NetworkInfo info = connectivityManager.getActiveNetworkInfo();</div><div class=\"line\">        <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span> &amp;&amp; info.isConnected()) &#123;</div><div class=\"line\">            String wvcc = info.getTypeName();</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"current network: \"</span> + wvcc);</div><div class=\"line\">            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"No network is connected, use cache\"</span>);</div><div class=\"line\">            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">16</span>) &#123;</div><div class=\"line\">            mWebSettings.setAllowFileAccessFromFileURLs(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mWebSettings.setAllowUniversalAccessFromFileURLs(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">12</span>) &#123;</div><div class=\"line\">            mWebSettings.setAllowContentAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        setupWebViewClient();</div><div class=\"line\">        setupWebChromeClient();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupJockey</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mJockey = JockeyImpl.getDefault();</div><div class=\"line\">        mJockey.configure(mWebView);</div><div class=\"line\">        mJockey.setWebViewClient(mWebViewClient);</div><div class=\"line\">        mJockey.setOnValidateListener(<span class=\"keyword\">new</span> Jockey.OnValidateListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validate</span><span class=\"params\">(String host)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"yourdomain.com\"</span>.equals(host);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//TODO set your event handler</span></div><div class=\"line\">        mJockey.on(JOCKEY_EVENT_NAME, <span class=\"keyword\">new</span> EventHandler());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mUrl = getIntent().getStringExtra(H5_URL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(mUrl)) &#123;</div><div class=\"line\">            <span class=\"comment\">//TODO show error page</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mWebView.loadUrl(mUrl);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebViewClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWebViewClient = <span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//TODO 处理URL, 例如对指定的URL做不同的处理等</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedError(view, request, error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mWebView.setWebViewClient(mWebViewClient);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebChromeClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWebChromeClient = <span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedTitle</span><span class=\"params\">(WebView view, String title)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedTitle(view, title);</div><div class=\"line\">                mToolbar.setTitle(title);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onProgressChanged(view, newProgress);</div><div class=\"line\">                mProgressBar.setProgress(newProgress);</div><div class=\"line\">                <span class=\"keyword\">if</span> (newProgress == <span class=\"number\">100</span>) &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.GONE);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onJsAlert</span><span class=\"params\">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onJsAlert(view, url, message, result);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mWebView.setWebChromeClient(mWebChromeClient);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123;</div><div class=\"line\">            mWebView.goBack();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2015-12-02T16:00:00.000Z","_content":"<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# WebView代码交互\n\n作者: 郭嘉  \n邮箱: guoxiaoxingv@163.com  \n博客: https://guoxiaoxing.github.io/  \n知乎: https://www.zhihu.com/people/allen-wells\n\n**关于作者**\n\n>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。\n人生格言: 不想当程序员的歌手不是好厨师。\n\n**关于文章**\n\n>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与\n我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你\n有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n[WebView基本用法](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md)\n[WebView代码交互](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md)\n[WebView性能优化](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md)\n\n# 一 Android原生方案\n\n关于WebView中Java代码和JS代码的交互实现, Android给了一套原生的方案, 我们先来看看原生的用法。后面我们还会讲到其他的开源方法。\n\nJavaScript代码和Android代码是通过addJavascriptInterface()来建立连接的, 我们来看下具体的用法。\n\n1 设置WebView支持JavaScript\n\n```java\nwebView.getSettings().setJavaScriptEnabled(true);\n```\n\n2 在Android工程里定义一个接口\n\n```java\npublic class WebAppInterface {\n    Context mContext;\n\n    /** Instantiate the interface and set the context */\n    WebAppInterface(Context c) {\n        mContext = c;\n    }\n\n    /** Show a toast from the web page */\n    @JavascriptInterface\n    public void showToast(String toast) {\n        Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n**注意**: API >= 17时, 必须在被JavaScript调用的Android方法前添加@JavascriptInterface注解, 否则将无法识别。\n\n3 在Android代码中将该接口添加到WebView\n\n```java\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.addJavascriptInterface(new WebAppInterface(this), \"Android\");\n```\n\n这个\"Android\"就是我们为这个接口取的别名, 在JavaScript就可以通过Android.showToast(toast)这种方式来调用此方法。\n\n4 在JavaScript中调用Android方法\n\n```js\n<input type=\"button\" value=\"Say hello\" onClick=\"showAndroidToast('Hello Android!')\" />\n\n<script type=\"text/javascript\">\n    function showAndroidToast(toast) {\n        Android.showToast(toast);\n    }\n</script>\n```\n\n在JavaScript中我们不用再去实例化WebAppInterface接口, WebView会自动帮我们完成这一工作, 使它能够为WebPage所用。\n\n**注意**:\n\n由于addJavascriptInterface()给予了JS代码控制应用的能力, 这是一项非常有用的特性, 但同时也带来了安全上的隐患, \n\n> Using addJavascriptInterface() allows JavaScript to control your Android application. This can be a very useful feature or a dangerous \nsecurity issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by an unknown person or \nprocess), then an attacker can include HTML that executes your client-side code and possibly any code of the attacker's choosing. As such, \nyou should not use addJavascriptInterface() unless you wrote all of the HTML and JavaScript that appears in your WebView. You should also \nnot allow the user to navigate to other web pages that are not your own, within your WebView (instead, allow the user's default browser \napplication to open foreign links—by default, the user's web browser opens all URL links, so be careful only if you handle page navigation\nas described in the following section).\n \n下面正式引入我们在项目中常用的两套开源的替代方案\n\n# 二 jockeyjs开源方案\n\n[jockeyjs](https://github.com/tcoulter/jockeyjs)是一套IOS/Android双平台的Native和JS交互方法, 比较适合用在项目中。\n\n>Library to facilitate communication between iOS apps and JS apps running inside a UIWebView\n\njockeyjs对Native和JS的交互做了优美的封装, 事件的发送与接收都可以通过send()和on()来完成。我们先简单的看一下Event的发送与接收。\n\nSending events from app to JavaScript\n\n```java\n// Send an event to JavaScript, passing a payload\njockey.send(\"event-name\", webView, payload);\n\n//With a callback to execute after all listeners have finished\njockey.send(\"event-name\", webView, payload, new JockeyCallback() {\n    @Override\n    public void call() {\n        //Your execution code\n    }\n});\n```\n\nReceiving events from app in JavaScript\n\n```java\n// Listen for an event from iOS, but don't notify iOS we've completed processing\n// until an asynchronous function has finished (in this case a timeout).\nJockey.on(\"event-name\", function(payload, complete) {\n  // Example of event'ed handler.\n  setTimeout(function() {\n    alert(\"Timeout over!\");\n    complete();\n  }, 1000);\n});\n```\n\nSending events from JavaScript to app\n\n```java\n// Send an event to iOS.\nJockey.send(\"event-name\");\n\n// Send an event to iOS, passing an optional payload.\nJockey.send(\"event-name\", {\n  key: \"value\"\n});\n\n// Send an event to iOS, pass an optional payload, and catch the callback when all the\n// iOS listeners have finished processing.\nJockey.send(\"event-name\", {\n  key: \"value\"\n}, function() {\n  alert(\"iOS has finished processing!\");\n});\n```\n\nReceiving events from JavaScript in app\n\n```java\n//Listen for an event from JavaScript and log a message when we have receied it.\njockey.on(\"event-name\", new JockeyHandler() {\n    @Override\n    protected void doPerform(Map<Object, Object> payload) {\n        Log.d(\"jockey\", \"Things are happening\");\n    }\n});\n\n//Listen for an event from JavaScript, but don't notify the JavaScript that the listener has completed\n//until an asynchronous function has finished\n//Note: Because this method is executed in the background, if you want the method to interact with the UI thread\n//it will need to use something like a android.os.Handler to post to the UI thread.\njockey.on(\"event-name\", new JockeyAsyncHandler() {\n    @Override\n    protected void doPerform(Map<Object, Object> payload) {\n        //Do something asynchronously\n        //No need to called completed(), Jockey will take care of that for you!\n    }\n});\n\n\n//We can even chain together several handlers so that they get processed in sequence.\n//Here we also see an example of the NativeOS interface which allows us to chain some common\n//system handlers to simulate native UI interactions.\njockey.on(\"event-name\", nativeOS(this)\n            .toast(\"Event occurred!\")\n            .vibrate(100), //Don't forget to grant permission\n            new JockeyHandler() {\n                @Override\n                protected void doPerform(Map<Object, Object> payload) {\n                }\n            }\n);\n\n//...More Handlers\n\n\n//If you would like to stop listening for a specific event\njockey.off(\"event-name\");\n\n//If you would like to stop listening to ALL events\njockey.clear();\n```\n\n通过上面的代码, 我们对jockeyjs的使用有了大致的理解, 下面我们具体来看一下在项目中的使用。\n\n1 依赖配置\n\n下载代码: https://github.com/tcoulter/jockeyjs, 将JockeyJS.Android导入到工程中。\n\n2 jockeyjs配置\n\njockeyjs有两种使用方式\n\n方式一:\n\n只在一个Activity中使用jockey或者多Activity共享一个jockey实例\n\n```java\n//Declare an instance of Jockey\nJockey jockey;\n\n//The WebView that we will be using, assumed to be instantiated either through findViewById or some method of injection.\nWebView webView;\n\nWebViewClient myWebViewClient;\n\n@Override\nprotected void onStart() {\n    super.onStart();\n\n    //Get the default JockeyImpl\n    jockey = JockeyImpl.getDefault();\n\n    //Configure your webView to be used with Jockey\n    jockey.configure(webView);\n\n    //Pass Jockey your custom WebViewClient\n    //Notice we can do this even after our webView has been configured.\n    jockey.setWebViewClient(myWebViewClient)\n\n    //Set some event handlers\n    setJockeyEvents();\n\n    //Load your webPage\n    webView.loadUrl(\"file:///your.url.com\");\n}\n```\n\n方式二:\n\n另一种就是把jockey当成一种全局的Service来用, 这种方式下我们可以在多个Activity之间甚至整个应用内共享handler. 当然我们同样需要\n把jockey的生命周期和应用的生命周期绑定在一起。\n\n```java\n//First we declare the members involved in using Jockey\n\n//A WebView to interact with\nprivate WebView webView;\n\n//Our instance of the Jockey interface\nprivate Jockey jockey;\n\n//A helper for binding services\nprivate boolean _bound;\n\n//A service connection for making use of the JockeyService\nprivate ServiceConnection _connection = new ServiceConnection() {\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n        _bound = false;\n    }\n\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n        JockeyBinder binder = (JockeyBinder) service;\n\n        //Retrieves the instance of the JockeyService from the binder\n        jockey = binder.getService();\n\n        //This will setup the WebView to enable JavaScript execution and provide a custom JockeyWebViewClient\n        jockey.configure(webView);\n\n        //Make Jockey start listening for events\n        setJockeyEvents();\n\n        _bound = true;\n\n        //Redirect the WebView to your webpage.\n        webView.loadUrl(\"file:///android_assets/index.html\");\n    }\n\n}\n\n///....Other member variables....////\n\n\n//Then we bind the JockeyService to our activity through a helper function in our onStart method\n@Override\nprotected void onStart() {\n    super.onStart();\n    JockeyService.bind(this, _connection);\n}\n\n//In order to bind this with the Android lifecycle we need to make sure that the service also shuts down at the appropriate time.\n@Override\nprotected void onStop() {\n    super.onStop();\n    if (_bound) {\n        JockeyService.unbind(this, _connection);\n    }\n}\n```\n\n\n以上便是jockeyjs的大致用法.","source":"_posts/WebView代码交互.md","raw":"title: Hello World\ndate: 2015-12-03 00:00:00\n---\n<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# WebView代码交互\n\n作者: 郭嘉  \n邮箱: guoxiaoxingv@163.com  \n博客: https://guoxiaoxing.github.io/  \n知乎: https://www.zhihu.com/people/allen-wells\n\n**关于作者**\n\n>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。\n人生格言: 不想当程序员的歌手不是好厨师。\n\n**关于文章**\n\n>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与\n我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你\n有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n[WebView基本用法](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md)\n[WebView代码交互](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md)\n[WebView性能优化](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md)\n\n# 一 Android原生方案\n\n关于WebView中Java代码和JS代码的交互实现, Android给了一套原生的方案, 我们先来看看原生的用法。后面我们还会讲到其他的开源方法。\n\nJavaScript代码和Android代码是通过addJavascriptInterface()来建立连接的, 我们来看下具体的用法。\n\n1 设置WebView支持JavaScript\n\n```java\nwebView.getSettings().setJavaScriptEnabled(true);\n```\n\n2 在Android工程里定义一个接口\n\n```java\npublic class WebAppInterface {\n    Context mContext;\n\n    /** Instantiate the interface and set the context */\n    WebAppInterface(Context c) {\n        mContext = c;\n    }\n\n    /** Show a toast from the web page */\n    @JavascriptInterface\n    public void showToast(String toast) {\n        Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n**注意**: API >= 17时, 必须在被JavaScript调用的Android方法前添加@JavascriptInterface注解, 否则将无法识别。\n\n3 在Android代码中将该接口添加到WebView\n\n```java\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.addJavascriptInterface(new WebAppInterface(this), \"Android\");\n```\n\n这个\"Android\"就是我们为这个接口取的别名, 在JavaScript就可以通过Android.showToast(toast)这种方式来调用此方法。\n\n4 在JavaScript中调用Android方法\n\n```js\n<input type=\"button\" value=\"Say hello\" onClick=\"showAndroidToast('Hello Android!')\" />\n\n<script type=\"text/javascript\">\n    function showAndroidToast(toast) {\n        Android.showToast(toast);\n    }\n</script>\n```\n\n在JavaScript中我们不用再去实例化WebAppInterface接口, WebView会自动帮我们完成这一工作, 使它能够为WebPage所用。\n\n**注意**:\n\n由于addJavascriptInterface()给予了JS代码控制应用的能力, 这是一项非常有用的特性, 但同时也带来了安全上的隐患, \n\n> Using addJavascriptInterface() allows JavaScript to control your Android application. This can be a very useful feature or a dangerous \nsecurity issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by an unknown person or \nprocess), then an attacker can include HTML that executes your client-side code and possibly any code of the attacker's choosing. As such, \nyou should not use addJavascriptInterface() unless you wrote all of the HTML and JavaScript that appears in your WebView. You should also \nnot allow the user to navigate to other web pages that are not your own, within your WebView (instead, allow the user's default browser \napplication to open foreign links—by default, the user's web browser opens all URL links, so be careful only if you handle page navigation\nas described in the following section).\n \n下面正式引入我们在项目中常用的两套开源的替代方案\n\n# 二 jockeyjs开源方案\n\n[jockeyjs](https://github.com/tcoulter/jockeyjs)是一套IOS/Android双平台的Native和JS交互方法, 比较适合用在项目中。\n\n>Library to facilitate communication between iOS apps and JS apps running inside a UIWebView\n\njockeyjs对Native和JS的交互做了优美的封装, 事件的发送与接收都可以通过send()和on()来完成。我们先简单的看一下Event的发送与接收。\n\nSending events from app to JavaScript\n\n```java\n// Send an event to JavaScript, passing a payload\njockey.send(\"event-name\", webView, payload);\n\n//With a callback to execute after all listeners have finished\njockey.send(\"event-name\", webView, payload, new JockeyCallback() {\n    @Override\n    public void call() {\n        //Your execution code\n    }\n});\n```\n\nReceiving events from app in JavaScript\n\n```java\n// Listen for an event from iOS, but don't notify iOS we've completed processing\n// until an asynchronous function has finished (in this case a timeout).\nJockey.on(\"event-name\", function(payload, complete) {\n  // Example of event'ed handler.\n  setTimeout(function() {\n    alert(\"Timeout over!\");\n    complete();\n  }, 1000);\n});\n```\n\nSending events from JavaScript to app\n\n```java\n// Send an event to iOS.\nJockey.send(\"event-name\");\n\n// Send an event to iOS, passing an optional payload.\nJockey.send(\"event-name\", {\n  key: \"value\"\n});\n\n// Send an event to iOS, pass an optional payload, and catch the callback when all the\n// iOS listeners have finished processing.\nJockey.send(\"event-name\", {\n  key: \"value\"\n}, function() {\n  alert(\"iOS has finished processing!\");\n});\n```\n\nReceiving events from JavaScript in app\n\n```java\n//Listen for an event from JavaScript and log a message when we have receied it.\njockey.on(\"event-name\", new JockeyHandler() {\n    @Override\n    protected void doPerform(Map<Object, Object> payload) {\n        Log.d(\"jockey\", \"Things are happening\");\n    }\n});\n\n//Listen for an event from JavaScript, but don't notify the JavaScript that the listener has completed\n//until an asynchronous function has finished\n//Note: Because this method is executed in the background, if you want the method to interact with the UI thread\n//it will need to use something like a android.os.Handler to post to the UI thread.\njockey.on(\"event-name\", new JockeyAsyncHandler() {\n    @Override\n    protected void doPerform(Map<Object, Object> payload) {\n        //Do something asynchronously\n        //No need to called completed(), Jockey will take care of that for you!\n    }\n});\n\n\n//We can even chain together several handlers so that they get processed in sequence.\n//Here we also see an example of the NativeOS interface which allows us to chain some common\n//system handlers to simulate native UI interactions.\njockey.on(\"event-name\", nativeOS(this)\n            .toast(\"Event occurred!\")\n            .vibrate(100), //Don't forget to grant permission\n            new JockeyHandler() {\n                @Override\n                protected void doPerform(Map<Object, Object> payload) {\n                }\n            }\n);\n\n//...More Handlers\n\n\n//If you would like to stop listening for a specific event\njockey.off(\"event-name\");\n\n//If you would like to stop listening to ALL events\njockey.clear();\n```\n\n通过上面的代码, 我们对jockeyjs的使用有了大致的理解, 下面我们具体来看一下在项目中的使用。\n\n1 依赖配置\n\n下载代码: https://github.com/tcoulter/jockeyjs, 将JockeyJS.Android导入到工程中。\n\n2 jockeyjs配置\n\njockeyjs有两种使用方式\n\n方式一:\n\n只在一个Activity中使用jockey或者多Activity共享一个jockey实例\n\n```java\n//Declare an instance of Jockey\nJockey jockey;\n\n//The WebView that we will be using, assumed to be instantiated either through findViewById or some method of injection.\nWebView webView;\n\nWebViewClient myWebViewClient;\n\n@Override\nprotected void onStart() {\n    super.onStart();\n\n    //Get the default JockeyImpl\n    jockey = JockeyImpl.getDefault();\n\n    //Configure your webView to be used with Jockey\n    jockey.configure(webView);\n\n    //Pass Jockey your custom WebViewClient\n    //Notice we can do this even after our webView has been configured.\n    jockey.setWebViewClient(myWebViewClient)\n\n    //Set some event handlers\n    setJockeyEvents();\n\n    //Load your webPage\n    webView.loadUrl(\"file:///your.url.com\");\n}\n```\n\n方式二:\n\n另一种就是把jockey当成一种全局的Service来用, 这种方式下我们可以在多个Activity之间甚至整个应用内共享handler. 当然我们同样需要\n把jockey的生命周期和应用的生命周期绑定在一起。\n\n```java\n//First we declare the members involved in using Jockey\n\n//A WebView to interact with\nprivate WebView webView;\n\n//Our instance of the Jockey interface\nprivate Jockey jockey;\n\n//A helper for binding services\nprivate boolean _bound;\n\n//A service connection for making use of the JockeyService\nprivate ServiceConnection _connection = new ServiceConnection() {\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n        _bound = false;\n    }\n\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n        JockeyBinder binder = (JockeyBinder) service;\n\n        //Retrieves the instance of the JockeyService from the binder\n        jockey = binder.getService();\n\n        //This will setup the WebView to enable JavaScript execution and provide a custom JockeyWebViewClient\n        jockey.configure(webView);\n\n        //Make Jockey start listening for events\n        setJockeyEvents();\n\n        _bound = true;\n\n        //Redirect the WebView to your webpage.\n        webView.loadUrl(\"file:///android_assets/index.html\");\n    }\n\n}\n\n///....Other member variables....////\n\n\n//Then we bind the JockeyService to our activity through a helper function in our onStart method\n@Override\nprotected void onStart() {\n    super.onStart();\n    JockeyService.bind(this, _connection);\n}\n\n//In order to bind this with the Android lifecycle we need to make sure that the service also shuts down at the appropriate time.\n@Override\nprotected void onStop() {\n    super.onStop();\n    if (_bound) {\n        JockeyService.unbind(this, _connection);\n    }\n}\n```\n\n\n以上便是jockeyjs的大致用法.","slug":"WebView代码交互","published":1,"updated":"2016-08-02T09:49:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirdaaam90002295mabj46cto","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br>+<a id=\"more\"></a></excerpt></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"WebView代码交互\"><a href=\"#WebView代码交互\" class=\"headerlink\" title=\"WebView代码交互\"></a>WebView代码交互</h1><p>作者: 郭嘉<br>邮箱: guoxiaoxingv@163.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>知乎: <a href=\"https://www.zhihu.com/people/allen-wells\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/people/allen-wells</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。<br>人生格言: 不想当程序员的歌手不是好厨师。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与<br>我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你<br>有所帮助, 也欢迎去star文章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<p><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md\" target=\"_blank\" rel=\"external\">WebView基本用法</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md\" target=\"_blank\" rel=\"external\">WebView代码交互</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\" target=\"_blank\" rel=\"external\">WebView性能优化</a></p>\n<h1 id=\"一-Android原生方案\"><a href=\"#一-Android原生方案\" class=\"headerlink\" title=\"一 Android原生方案\"></a>一 Android原生方案</h1><p>关于WebView中Java代码和JS代码的交互实现, Android给了一套原生的方案, 我们先来看看原生的用法。后面我们还会讲到其他的开源方法。</p>\n<p>JavaScript代码和Android代码是通过addJavascriptInterface()来建立连接的, 我们来看下具体的用法。</p>\n<p>1 设置WebView支持JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>2 在Android工程里定义一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppInterface</span> </span>&#123;</div><div class=\"line\">    Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Instantiate the interface and set the context */</span></div><div class=\"line\">    WebAppInterface(Context c) &#123;</div><div class=\"line\">        mContext = c;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Show a toast from the web page */</span></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showToast</span><span class=\"params\">(String toast)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>: API &gt;= 17时, 必须在被JavaScript调用的Android方法前添加@JavascriptInterface注解, 否则将无法识别。</p>\n<p>3 在Android代码中将该接口添加到WebView</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView webView = (WebView) findViewById(R.id.webview);</div><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> WebAppInterface(<span class=\"keyword\">this</span>), <span class=\"string\">\"Android\"</span>);</div></pre></td></tr></table></figure>\n<p>这个”Android”就是我们为这个接口取的别名, 在JavaScript就可以通过Android.showToast(toast)这种方式来调用此方法。</p>\n<p>4 在JavaScript中调用Android方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"Say hello\"</span> onClick=<span class=\"string\">\"showAndroidToast('Hello Android!')\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showAndroidToast</span>(<span class=\"params\">toast</span>) </span>&#123;</div><div class=\"line\">        Android.showToast(toast);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在JavaScript中我们不用再去实例化WebAppInterface接口, WebView会自动帮我们完成这一工作, 使它能够为WebPage所用。</p>\n<p><strong>注意</strong>:</p>\n<p>由于addJavascriptInterface()给予了JS代码控制应用的能力, 这是一项非常有用的特性, 但同时也带来了安全上的隐患, </p>\n<blockquote>\n<p>Using addJavascriptInterface() allows JavaScript to control your Android application. This can be a very useful feature or a dangerous<br>security issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by an unknown person or<br>process), then an attacker can include HTML that executes your client-side code and possibly any code of the attacker’s choosing. As such,<br>you should not use addJavascriptInterface() unless you wrote all of the HTML and JavaScript that appears in your WebView. You should also<br>not allow the user to navigate to other web pages that are not your own, within your WebView (instead, allow the user’s default browser<br>application to open foreign links—by default, the user’s web browser opens all URL links, so be careful only if you handle page navigation<br>as described in the following section).</p>\n</blockquote>\n<p>下面正式引入我们在项目中常用的两套开源的替代方案</p>\n<h1 id=\"二-jockeyjs开源方案\"><a href=\"#二-jockeyjs开源方案\" class=\"headerlink\" title=\"二 jockeyjs开源方案\"></a>二 jockeyjs开源方案</h1><p><a href=\"https://github.com/tcoulter/jockeyjs\" target=\"_blank\" rel=\"external\">jockeyjs</a>是一套IOS/Android双平台的Native和JS交互方法, 比较适合用在项目中。</p>\n<blockquote>\n<p>Library to facilitate communication between iOS apps and JS apps running inside a UIWebView</p>\n</blockquote>\n<p>jockeyjs对Native和JS的交互做了优美的封装, 事件的发送与接收都可以通过send()和on()来完成。我们先简单的看一下Event的发送与接收。</p>\n<p>Sending events from app to JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Send an event to JavaScript, passing a payload</span></div><div class=\"line\">jockey.send(<span class=\"string\">\"event-name\"</span>, webView, payload);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//With a callback to execute after all listeners have finished</span></div><div class=\"line\">jockey.send(<span class=\"string\">\"event-name\"</span>, webView, payload, <span class=\"keyword\">new</span> JockeyCallback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Your execution code</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Receiving events from app in JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Listen for an event from iOS, but don't notify iOS we've completed processing</span></div><div class=\"line\"><span class=\"comment\">// until an asynchronous function has finished (in this case a timeout).</span></div><div class=\"line\">Jockey.on(<span class=\"string\">\"event-name\"</span>, function(payload, complete) &#123;</div><div class=\"line\">  <span class=\"comment\">// Example of event'ed handler.</span></div><div class=\"line\">  setTimeout(function() &#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Timeout over!\"</span>);</div><div class=\"line\">    complete();</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Sending events from JavaScript to app</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Send an event to iOS.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Send an event to iOS, passing an optional payload.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>, &#123;</div><div class=\"line\">  key: <span class=\"string\">\"value\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Send an event to iOS, pass an optional payload, and catch the callback when all the</span></div><div class=\"line\"><span class=\"comment\">// iOS listeners have finished processing.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>, &#123;</div><div class=\"line\">  key: <span class=\"string\">\"value\"</span></div><div class=\"line\">&#125;, function() &#123;</div><div class=\"line\">  alert(<span class=\"string\">\"iOS has finished processing!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Receiving events from JavaScript in app</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Listen for an event from JavaScript and log a message when we have receied it.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, <span class=\"keyword\">new</span> JockeyHandler() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"string\">\"jockey\"</span>, <span class=\"string\">\"Things are happening\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Listen for an event from JavaScript, but don't notify the JavaScript that the listener has completed</span></div><div class=\"line\"><span class=\"comment\">//until an asynchronous function has finished</span></div><div class=\"line\"><span class=\"comment\">//Note: Because this method is executed in the background, if you want the method to interact with the UI thread</span></div><div class=\"line\"><span class=\"comment\">//it will need to use something like a android.os.Handler to post to the UI thread.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, <span class=\"keyword\">new</span> JockeyAsyncHandler() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Do something asynchronously</span></div><div class=\"line\">        <span class=\"comment\">//No need to called completed(), Jockey will take care of that for you!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//We can even chain together several handlers so that they get processed in sequence.</span></div><div class=\"line\"><span class=\"comment\">//Here we also see an example of the NativeOS interface which allows us to chain some common</span></div><div class=\"line\"><span class=\"comment\">//system handlers to simulate native UI interactions.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, nativeOS(<span class=\"keyword\">this</span>)</div><div class=\"line\">            .toast(<span class=\"string\">\"Event occurred!\"</span>)</div><div class=\"line\">            .vibrate(<span class=\"number\">100</span>), <span class=\"comment\">//Don't forget to grant permission</span></div><div class=\"line\">            <span class=\"keyword\">new</span> JockeyHandler() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...More Handlers</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//If you would like to stop listening for a specific event</span></div><div class=\"line\">jockey.off(<span class=\"string\">\"event-name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//If you would like to stop listening to ALL events</span></div><div class=\"line\">jockey.clear();</div></pre></td></tr></table></figure>\n<p>通过上面的代码, 我们对jockeyjs的使用有了大致的理解, 下面我们具体来看一下在项目中的使用。</p>\n<p>1 依赖配置</p>\n<p>下载代码: <a href=\"https://github.com/tcoulter/jockeyjs\" target=\"_blank\" rel=\"external\">https://github.com/tcoulter/jockeyjs</a>, 将JockeyJS.Android导入到工程中。</p>\n<p>2 jockeyjs配置</p>\n<p>jockeyjs有两种使用方式</p>\n<p>方式一:</p>\n<p>只在一个Activity中使用jockey或者多Activity共享一个jockey实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Declare an instance of Jockey</span></div><div class=\"line\">Jockey jockey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//The WebView that we will be using, assumed to be instantiated either through findViewById or some method of injection.</span></div><div class=\"line\">WebView webView;</div><div class=\"line\"></div><div class=\"line\">WebViewClient myWebViewClient;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Get the default JockeyImpl</span></div><div class=\"line\">    jockey = JockeyImpl.getDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Configure your webView to be used with Jockey</span></div><div class=\"line\">    jockey.configure(webView);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Pass Jockey your custom WebViewClient</span></div><div class=\"line\">    <span class=\"comment\">//Notice we can do this even after our webView has been configured.</span></div><div class=\"line\">    jockey.setWebViewClient(myWebViewClient)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Set some event handlers</span></div><div class=\"line\">    setJockeyEvents();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Load your webPage</span></div><div class=\"line\">    webView.loadUrl(<span class=\"string\">\"file:///your.url.com\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>方式二:</p>\n<p>另一种就是把jockey当成一种全局的Service来用, 这种方式下我们可以在多个Activity之间甚至整个应用内共享handler. 当然我们同样需要<br>把jockey的生命周期和应用的生命周期绑定在一起。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//First we declare the members involved in using Jockey</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A WebView to interact with</span></div><div class=\"line\"><span class=\"keyword\">private</span> WebView webView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Our instance of the Jockey interface</span></div><div class=\"line\"><span class=\"keyword\">private</span> Jockey jockey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A helper for binding services</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> _bound;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A service connection for making use of the JockeyService</span></div><div class=\"line\"><span class=\"keyword\">private</span> ServiceConnection _connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">        _bound = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">        JockeyBinder binder = (JockeyBinder) service;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Retrieves the instance of the JockeyService from the binder</span></div><div class=\"line\">        jockey = binder.getService();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//This will setup the WebView to enable JavaScript execution and provide a custom JockeyWebViewClient</span></div><div class=\"line\">        jockey.configure(webView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Make Jockey start listening for events</span></div><div class=\"line\">        setJockeyEvents();</div><div class=\"line\"></div><div class=\"line\">        _bound = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Redirect the WebView to your webpage.</span></div><div class=\"line\">        webView.loadUrl(<span class=\"string\">\"file:///android_assets/index.html\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///....Other member variables....////</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Then we bind the JockeyService to our activity through a helper function in our onStart method</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">    JockeyService.bind(<span class=\"keyword\">this</span>, _connection);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//In order to bind this with the Android lifecycle we need to make sure that the service also shuts down at the appropriate time.</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">    <span class=\"keyword\">if</span> (_bound) &#123;</div><div class=\"line\">        JockeyService.unbind(<span class=\"keyword\">this</span>, _connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上便是jockeyjs的大致用法.</p>\n</the>","excerpt":"<p><Excerpt in index | 首页摘要><br>+","more":"</p>\n<The rest of contents | 余下全文>\n\n<h1 id=\"WebView代码交互\"><a href=\"#WebView代码交互\" class=\"headerlink\" title=\"WebView代码交互\"></a>WebView代码交互</h1><p>作者: 郭嘉<br>邮箱: guoxiaoxingv@163.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>知乎: <a href=\"https://www.zhihu.com/people/allen-wells\">https://www.zhihu.com/people/allen-wells</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。<br>人生格言: 不想当程序员的歌手不是好厨师。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与<br>我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你<br>有所帮助, 也欢迎去star文章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<p><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md\">WebView基本用法</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md\">WebView代码交互</a><br><a href=\"https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\">WebView性能优化</a></p>\n<h1 id=\"一-Android原生方案\"><a href=\"#一-Android原生方案\" class=\"headerlink\" title=\"一 Android原生方案\"></a>一 Android原生方案</h1><p>关于WebView中Java代码和JS代码的交互实现, Android给了一套原生的方案, 我们先来看看原生的用法。后面我们还会讲到其他的开源方法。</p>\n<p>JavaScript代码和Android代码是通过addJavascriptInterface()来建立连接的, 我们来看下具体的用法。</p>\n<p>1 设置WebView支持JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>2 在Android工程里定义一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppInterface</span> </span>&#123;</div><div class=\"line\">    Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Instantiate the interface and set the context */</span></div><div class=\"line\">    WebAppInterface(Context c) &#123;</div><div class=\"line\">        mContext = c;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Show a toast from the web page */</span></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showToast</span><span class=\"params\">(String toast)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>: API &gt;= 17时, 必须在被JavaScript调用的Android方法前添加@JavascriptInterface注解, 否则将无法识别。</p>\n<p>3 在Android代码中将该接口添加到WebView</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView webView = (WebView) findViewById(R.id.webview);</div><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> WebAppInterface(<span class=\"keyword\">this</span>), <span class=\"string\">\"Android\"</span>);</div></pre></td></tr></table></figure>\n<p>这个”Android”就是我们为这个接口取的别名, 在JavaScript就可以通过Android.showToast(toast)这种方式来调用此方法。</p>\n<p>4 在JavaScript中调用Android方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"Say hello\"</span> onClick=<span class=\"string\">\"showAndroidToast('Hello Android!')\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showAndroidToast</span>(<span class=\"params\">toast</span>) </span>&#123;</div><div class=\"line\">        Android.showToast(toast);</div><div class=\"line\">    &#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>在JavaScript中我们不用再去实例化WebAppInterface接口, WebView会自动帮我们完成这一工作, 使它能够为WebPage所用。</p>\n<p><strong>注意</strong>:</p>\n<p>由于addJavascriptInterface()给予了JS代码控制应用的能力, 这是一项非常有用的特性, 但同时也带来了安全上的隐患, </p>\n<blockquote>\n<p>Using addJavascriptInterface() allows JavaScript to control your Android application. This can be a very useful feature or a dangerous<br>security issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by an unknown person or<br>process), then an attacker can include HTML that executes your client-side code and possibly any code of the attacker’s choosing. As such,<br>you should not use addJavascriptInterface() unless you wrote all of the HTML and JavaScript that appears in your WebView. You should also<br>not allow the user to navigate to other web pages that are not your own, within your WebView (instead, allow the user’s default browser<br>application to open foreign links—by default, the user’s web browser opens all URL links, so be careful only if you handle page navigation<br>as described in the following section).</p>\n</blockquote>\n<p>下面正式引入我们在项目中常用的两套开源的替代方案</p>\n<h1 id=\"二-jockeyjs开源方案\"><a href=\"#二-jockeyjs开源方案\" class=\"headerlink\" title=\"二 jockeyjs开源方案\"></a>二 jockeyjs开源方案</h1><p><a href=\"https://github.com/tcoulter/jockeyjs\">jockeyjs</a>是一套IOS/Android双平台的Native和JS交互方法, 比较适合用在项目中。</p>\n<blockquote>\n<p>Library to facilitate communication between iOS apps and JS apps running inside a UIWebView</p>\n</blockquote>\n<p>jockeyjs对Native和JS的交互做了优美的封装, 事件的发送与接收都可以通过send()和on()来完成。我们先简单的看一下Event的发送与接收。</p>\n<p>Sending events from app to JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Send an event to JavaScript, passing a payload</span></div><div class=\"line\">jockey.send(<span class=\"string\">\"event-name\"</span>, webView, payload);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//With a callback to execute after all listeners have finished</span></div><div class=\"line\">jockey.send(<span class=\"string\">\"event-name\"</span>, webView, payload, <span class=\"keyword\">new</span> JockeyCallback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Your execution code</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Receiving events from app in JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Listen for an event from iOS, but don't notify iOS we've completed processing</span></div><div class=\"line\"><span class=\"comment\">// until an asynchronous function has finished (in this case a timeout).</span></div><div class=\"line\">Jockey.on(<span class=\"string\">\"event-name\"</span>, function(payload, complete) &#123;</div><div class=\"line\">  <span class=\"comment\">// Example of event'ed handler.</span></div><div class=\"line\">  setTimeout(function() &#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Timeout over!\"</span>);</div><div class=\"line\">    complete();</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Sending events from JavaScript to app</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Send an event to iOS.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Send an event to iOS, passing an optional payload.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>, &#123;</div><div class=\"line\">  key: <span class=\"string\">\"value\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Send an event to iOS, pass an optional payload, and catch the callback when all the</span></div><div class=\"line\"><span class=\"comment\">// iOS listeners have finished processing.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>, &#123;</div><div class=\"line\">  key: <span class=\"string\">\"value\"</span></div><div class=\"line\">&#125;, function() &#123;</div><div class=\"line\">  alert(<span class=\"string\">\"iOS has finished processing!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Receiving events from JavaScript in app</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Listen for an event from JavaScript and log a message when we have receied it.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, <span class=\"keyword\">new</span> JockeyHandler() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"string\">\"jockey\"</span>, <span class=\"string\">\"Things are happening\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Listen for an event from JavaScript, but don't notify the JavaScript that the listener has completed</span></div><div class=\"line\"><span class=\"comment\">//until an asynchronous function has finished</span></div><div class=\"line\"><span class=\"comment\">//Note: Because this method is executed in the background, if you want the method to interact with the UI thread</span></div><div class=\"line\"><span class=\"comment\">//it will need to use something like a android.os.Handler to post to the UI thread.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, <span class=\"keyword\">new</span> JockeyAsyncHandler() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Do something asynchronously</span></div><div class=\"line\">        <span class=\"comment\">//No need to called completed(), Jockey will take care of that for you!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//We can even chain together several handlers so that they get processed in sequence.</span></div><div class=\"line\"><span class=\"comment\">//Here we also see an example of the NativeOS interface which allows us to chain some common</span></div><div class=\"line\"><span class=\"comment\">//system handlers to simulate native UI interactions.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, nativeOS(<span class=\"keyword\">this</span>)</div><div class=\"line\">            .toast(<span class=\"string\">\"Event occurred!\"</span>)</div><div class=\"line\">            .vibrate(<span class=\"number\">100</span>), <span class=\"comment\">//Don't forget to grant permission</span></div><div class=\"line\">            <span class=\"keyword\">new</span> JockeyHandler() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...More Handlers</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//If you would like to stop listening for a specific event</span></div><div class=\"line\">jockey.off(<span class=\"string\">\"event-name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//If you would like to stop listening to ALL events</span></div><div class=\"line\">jockey.clear();</div></pre></td></tr></table></figure>\n<p>通过上面的代码, 我们对jockeyjs的使用有了大致的理解, 下面我们具体来看一下在项目中的使用。</p>\n<p>1 依赖配置</p>\n<p>下载代码: <a href=\"https://github.com/tcoulter/jockeyjs\">https://github.com/tcoulter/jockeyjs</a>, 将JockeyJS.Android导入到工程中。</p>\n<p>2 jockeyjs配置</p>\n<p>jockeyjs有两种使用方式</p>\n<p>方式一:</p>\n<p>只在一个Activity中使用jockey或者多Activity共享一个jockey实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Declare an instance of Jockey</span></div><div class=\"line\">Jockey jockey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//The WebView that we will be using, assumed to be instantiated either through findViewById or some method of injection.</span></div><div class=\"line\">WebView webView;</div><div class=\"line\"></div><div class=\"line\">WebViewClient myWebViewClient;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Get the default JockeyImpl</span></div><div class=\"line\">    jockey = JockeyImpl.getDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Configure your webView to be used with Jockey</span></div><div class=\"line\">    jockey.configure(webView);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Pass Jockey your custom WebViewClient</span></div><div class=\"line\">    <span class=\"comment\">//Notice we can do this even after our webView has been configured.</span></div><div class=\"line\">    jockey.setWebViewClient(myWebViewClient)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Set some event handlers</span></div><div class=\"line\">    setJockeyEvents();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Load your webPage</span></div><div class=\"line\">    webView.loadUrl(<span class=\"string\">\"file:///your.url.com\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>方式二:</p>\n<p>另一种就是把jockey当成一种全局的Service来用, 这种方式下我们可以在多个Activity之间甚至整个应用内共享handler. 当然我们同样需要<br>把jockey的生命周期和应用的生命周期绑定在一起。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//First we declare the members involved in using Jockey</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A WebView to interact with</span></div><div class=\"line\"><span class=\"keyword\">private</span> WebView webView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Our instance of the Jockey interface</span></div><div class=\"line\"><span class=\"keyword\">private</span> Jockey jockey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A helper for binding services</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> _bound;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A service connection for making use of the JockeyService</span></div><div class=\"line\"><span class=\"keyword\">private</span> ServiceConnection _connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">        _bound = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">        JockeyBinder binder = (JockeyBinder) service;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Retrieves the instance of the JockeyService from the binder</span></div><div class=\"line\">        jockey = binder.getService();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//This will setup the WebView to enable JavaScript execution and provide a custom JockeyWebViewClient</span></div><div class=\"line\">        jockey.configure(webView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Make Jockey start listening for events</span></div><div class=\"line\">        setJockeyEvents();</div><div class=\"line\"></div><div class=\"line\">        _bound = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Redirect the WebView to your webpage.</span></div><div class=\"line\">        webView.loadUrl(<span class=\"string\">\"file:///android_assets/index.html\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///....Other member variables....////</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Then we bind the JockeyService to our activity through a helper function in our onStart method</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">    JockeyService.bind(<span class=\"keyword\">this</span>, _connection);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//In order to bind this with the Android lifecycle we need to make sure that the service also shuts down at the appropriate time.</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">    <span class=\"keyword\">if</span> (_bound) &#123;</div><div class=\"line\">        JockeyService.unbind(<span class=\"keyword\">this</span>, _connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上便是jockeyjs的大致用法.</p>"},{"title":"README","date":"2016-08-02T09:47:19.000Z","_content":"","source":"_posts/README.md","raw":"---\ntitle: README\ndate: 2016-08-02 17:47:19\ntags:\n---\n","slug":"README","published":1,"updated":"2016-08-02T09:47:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirdaaamb0003295mr08u52g1","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}