{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/404/index.md","hash":"f1d628fe9e35f0301c270d58da42a48e9ea86f25","modified":1499853766000},{"_id":"source/.DS_Store","hash":"d1d26a41be822f2467365353b6dbbc4699bd8238","modified":1499941337000},{"_id":"source/_posts/.DS_Store","hash":"8485ba51688a8f86bb6121291e1eccfaa2d79b46","modified":1499941341000},{"_id":"source/_posts/AndroidOpenSourceProject原理分析系列文章.md","hash":"2f1303ee88d093d018ab3874e59e1b144f4b9615","modified":1499940696000},{"_id":"source/_posts/Java:JVM原理分析与实践系列文章.md","hash":"9c91dd9b29f1170ef101ac146fd44d9f82bc276c","modified":1499940762000},{"_id":"source/_posts/Android主流开源框架原理分析与实践系列文章.md","hash":"abaea8a6408163c08ba2632a1656aaa78dcd1eca","modified":1499940746000},{"_id":"source/_posts/WebView三部曲：基本用法.md","hash":"ed30ee92cb9c51b347f3b307f4308d7022bd03ce","modified":1499853766000},{"_id":"source/about/index.md","hash":"48dd5874d6d46026e7fb72e57b1d18fbb61ac11a","modified":1499853766000},{"_id":"source/_posts/WebView三部曲：性能优化.md","hash":"a298cb7315bf369698ad9e5b7536455b586b82f5","modified":1499853766000},{"_id":"source/_posts/WebView三部曲：代码交互.md","hash":"2422baa5d406e78b627e6fcdb5be456d0c50e088","modified":1499853766000},{"_id":"source/tags/index.md","hash":"44de34bbb07d582ed901afaf49f32e0c56a75979","modified":1499853766000},{"_id":"source/_posts/ReactNative原理分析与实践系列文章.md","hash":"cc503d7d43b9378af17a4be9e4a5da4e8ea4cfe9","modified":1499940793000},{"_id":"public/404/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348372},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348372},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348373},{"_id":"public/2017/01/01/Java:JVM原理分析与实践系列文章/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348373},{"_id":"public/2017/01/01/Android主流开源框架原理分析与实践系列文章/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348373},{"_id":"public/2016/07/31/WebView三部曲：基本用法/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348373},{"_id":"public/2016/07/31/WebView三部曲：性能优化/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348373},{"_id":"public/2016/07/31/WebView三部曲：代码交互/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348373},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348374},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348374},{"_id":"public/archives/2016/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348374},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348374},{"_id":"public/archives/2017/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348374},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348374},{"_id":"public/2017/01/01/AndroidOpenSourceProject原理分析系列文章/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348376},{"_id":"public/2017/01/01/ReactNative原理分析与实践系列文章/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499941348376}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2016-08-03T04:45:15.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2016-08-03 12:45:15\n---\n","updated":"2017-07-12T10:02:46.000Z","path":"404/index.html","comments":1,"layout":"page","_id":"cj52acn5q0001oncwoblr2scf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2016-08-03T04:44:34.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-08-03 12:44:34\n---\n","updated":"2017-07-12T10:02:46.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj52acn640003oncwruyqh5l6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-08-03T04:43:43.000Z","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-03 12:43:43\n---\n\n","updated":"2017-07-12T10:02:46.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj52acn6d0005oncwcg3n3y2j","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android Open-Source Project原理分析系列文章","date":"2016-12-31T16:00:00.000Z","_content":"\n作者曾经看过很多关于Android源码分析的文章与书籍，这些前辈都写的很好，给Android技术的普及带来了很大的推动作用，随着Android技术的更\n新，目前已经来到了Android 7.0 Nougat版本。所以笔者打算根据最新的源码从内核层到框架层再到应用层，从内核空间到用户空间，全面地去分析\nAndroid系统内部的实现原理和设计思路，本系列的文章也会以一种独特的视角来做原理解析，来减轻大家在阅读源码时的枯燥感，好了，让我们开始吧。\n\n<!-- more -->\n\n\n# Android Open Source Project Analysis\n\n<img src=\"https://github.com/guoxiaoxing/android-framework-source-code-analysis/raw/master/art/android_7_nougat.jpg\" width=\"1000\"/>\n\n**关于作者**\n\n>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，爱好广泛，技术栈主要涉及以下几个方面\n>\n>- Android/Linux\n>- Java/Kotlin/JVM\n>- Python\n>- JavaScript/React/ReactNative\n>- DataStructure/Algorithm\n>\n>文章首发于[Github](https://github.com/guoxiaoxing)，后续也会同步在[简书](http://www.jianshu.com/users/66a47e04215b/latest_articles)与\n[CSDN](http://blog.csdn.net/allenwells)等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。\n\n第一次阅览本系列文章，请参见[导读](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/导读.md)，更多文章请参见[文章目录](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/README.md)。\n\n**写在前面**\n\n>作者曾经看过很多关于Android源码分析的文章与书籍，这些前辈都写的很好，给Android技术的普及带来了很大的推动作用，随着Android技术的更\n新，目前已经来到了Android 7.0 Nougat版本。所以笔者打算根据最新的源码从内核层到框架层再到应用层，从内核空间到用户空间，全面地去分析\nAndroid系统内部的实现原理和设计思路，本系列的文章也会以一种独特的视角来做原理解析，来减轻大家在阅读源码时的枯燥感，好了，让我们开始吧。\n\n**代码版本**\n\n>[android-7.1.1_r1](https://source.android.com/source/build-numbers.html#source-code-tags-and-builds)\n\n**分析思路**\n\n>以某一个支线为起点，从上层往底层，不断地追溯，在各个模块、文件、方法之间来回跳转，反复地阅读，理清整个流程的逻辑。\n同时带着思考去看源码，去揣测作者的用意，去理解代码的精妙之处，去思考代码可能存在的缺陷，去总结优秀的代码设计思想。\n\n本系列文章由下至上，从内核层到框架层再到应用层，从内核空间到用户空间，全面的分析内部的实现原理和设计思路。在源码的分析过程中，还会穿插分析源码的\n设计模式与编程思想（编程中的抽象、接口、六大原则以及23种设计模式），以下为后续文章的具体安排。\n\n另外，在文章内容的安排上，一般会先去分析流程，再去分析流程中牵扯到的类的作用以及它们的实现细节。这种由线到点的方式会更加生动一些，也更有助于大家\n理解。如果我们一上来就去讲这个类的作用与实现，难免有些枯燥，毕竟只有先去用它，才会想知道它是怎么实现的。\n\n**Android系统架构图**\n\n对Android系统的探索就像探索一个宝藏一样，每天分析一点，就完成了藏宝图的一角，直到有一天我们将整个宝藏的蓝图绘制完成。\n\n官方藏宝图\n\n<img src=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/raw/master/art/android_system_structure.png\"/>\n\n探索中的个人版藏宝图\n\n文章更新中...\n\n在正式阅读本系列文章之前，请先阅读导读相关内容，这会帮助你更加快捷的理解文章内容。\n\n- [导读](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/导读.md)\n\n## Android系统应用框架篇\n\n**Android显示系统**\n\n- 01Android系统应用框架篇：Window源码概览\n- 02Android系统应用框架篇：Window源码概览\n- 03Android系统应用框架篇：Window创建里程\n- 04Android系统应用框架篇：Window内部机制\n- 05Android系统应用框架篇：View源码概览\n- 06Android系统应用框架篇：View工作原理\n- 07Android系统应用框架篇：View事件体系\n\n**Android组件系统**\n\n- [01Android系统应用框架篇：Android组件系统概述](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/01Android系统应用框架篇：组件框架概述.md)\n- [02Android系统应用框架篇：Context家族](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/02Android系统应用框架篇：Context家族.md)\n- [03Android系统应用框架篇：ActivityThread家族](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/03Android系统应用框架篇：ActivityThread家族.md)\n- [04Android系统应用框架篇：ActivityManagerService家族](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/04Android系统应用框架篇：ActivityManagerService家族.md)\n- [05Android系统应用框架篇：Activity源码概览](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/005Android系统应用框架篇：Activity源码概览.md)\n- [06Android系统应用框架篇：Activity启动流程(一)](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/06Android系统应用框架篇：Activity启动流程(一).md)\n- [07Android系统应用框架篇：Activity启动流程(二)](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/07Android系统应用框架篇：Activity启动流程(二).md)\n- [08Android系统应用框架篇：Activity启动流程(三)](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/08Android系统应用框架篇：Activity启动流程(三).md)\n- 09Android系统应用框架篇：Service源码概览\n- [10Android系统应用框架篇：Service启动流程](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/10Android系统应用框架篇：Service启动流程.md)\n- [11Android系统应用框架篇：Service绑定流程](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/11Android系统应用框架篇：Service绑定流程.md)\n- 12Android系统应用框架篇：Broadcast Receiver源码概览\n- 13Android系统应用框架篇：Broadcast Receiver注册流程\n- 14Android系统应用框架篇：Broadcast Receiver发送流程\n- 15Android系统应用框架篇：Content Provider源码概览\n- 16Android系统应用框架篇：Content Provider启动流程\n- 17Android系统应用框架篇：Content Provider共享原理\n- 18Android系统应用框架篇：Content Provider更新机制\n\n## Android系统底层框架篇\n\n>本篇章从Android源码的底层框架原理，例如：Binder机制、智能指针与虚拟机等。\n\n**Android进程框架**\n\n- Android系统底层框架篇：进程与线程概览\n- Android系统底层框架篇：Zygote与System进程启动流程\n- Android系统底层框架篇：应用进程启动流程\n- Android系统底层框架篇：应用消息处理机制\n- Android系统底层框架篇：Binder进程通信机制\n\n**Android内存框架**\n\n- Android系统底层框架篇：Ashmem匿名共享内存系统\n- Android系统基础篇：硬件抽象层\n- Android系统基础篇：智能指针\n- Android系统基础篇：ART/Dalvik 虚拟机\n- Android系统驱动篇：Binder进程通信系统\n\n## Android系统编程思想篇\n\n- [1Android系统编程思想篇：单例模式](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/1Android系统编程思想篇：单例模式.md)\n- [2Android系统编程思想篇：建造者模式](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/2Android系统编程思想篇：建造者模式.md)\n- 3Android系统编程思想篇：原型模式\n- 4Android系统编程思想篇：工厂模式\n- 5Android系统编程思想篇：抽象工厂模式\n- 6Android系统编程思想篇：策略模式\n- 7Android系统编程思想篇：状态模式\n- 8Android系统编程思想篇：责任链模式\n- 9Android系统编程思想篇：解释器模式\n- 10Android系统编程思想篇：命令模式\n- 11Android系统编程思想篇：观察者模式\n- 12Android系统编程思想篇：备忘录模式\n- 13Android系统编程思想篇：迭代器模式\n- 14Android系统编程思想篇：模板方法模式\n- 15Android系统编程思想篇：访问者模式\n- 16Android系统编程思想篇：中介者模式\n- [17Android系统编程思想篇：代理模式](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/17Android系统编程思想篇：代理模式.md)\n- 18Android系统编程思想篇：组合模式\n- 19Android系统编程思想篇：适配器模式\n- 20Android系统编程思想篇：装饰模式\n- 21Android系统编程思想篇：享元模式\n- 22Android系统编程思想篇：外观模式\n- 23Android系统编程思想篇：桥接模式\n- 24Android系统编程思想篇：软件设计原则\n","source":"_posts/AndroidOpenSourceProject原理分析系列文章.md","raw":"title: Android Open-Source Project原理分析系列文章\ndate: 2017-1-1 00:00:00\ntags:\n---\n\n作者曾经看过很多关于Android源码分析的文章与书籍，这些前辈都写的很好，给Android技术的普及带来了很大的推动作用，随着Android技术的更\n新，目前已经来到了Android 7.0 Nougat版本。所以笔者打算根据最新的源码从内核层到框架层再到应用层，从内核空间到用户空间，全面地去分析\nAndroid系统内部的实现原理和设计思路，本系列的文章也会以一种独特的视角来做原理解析，来减轻大家在阅读源码时的枯燥感，好了，让我们开始吧。\n\n<!-- more -->\n\n\n# Android Open Source Project Analysis\n\n<img src=\"https://github.com/guoxiaoxing/android-framework-source-code-analysis/raw/master/art/android_7_nougat.jpg\" width=\"1000\"/>\n\n**关于作者**\n\n>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，爱好广泛，技术栈主要涉及以下几个方面\n>\n>- Android/Linux\n>- Java/Kotlin/JVM\n>- Python\n>- JavaScript/React/ReactNative\n>- DataStructure/Algorithm\n>\n>文章首发于[Github](https://github.com/guoxiaoxing)，后续也会同步在[简书](http://www.jianshu.com/users/66a47e04215b/latest_articles)与\n[CSDN](http://blog.csdn.net/allenwells)等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。\n\n第一次阅览本系列文章，请参见[导读](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/导读.md)，更多文章请参见[文章目录](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/README.md)。\n\n**写在前面**\n\n>作者曾经看过很多关于Android源码分析的文章与书籍，这些前辈都写的很好，给Android技术的普及带来了很大的推动作用，随着Android技术的更\n新，目前已经来到了Android 7.0 Nougat版本。所以笔者打算根据最新的源码从内核层到框架层再到应用层，从内核空间到用户空间，全面地去分析\nAndroid系统内部的实现原理和设计思路，本系列的文章也会以一种独特的视角来做原理解析，来减轻大家在阅读源码时的枯燥感，好了，让我们开始吧。\n\n**代码版本**\n\n>[android-7.1.1_r1](https://source.android.com/source/build-numbers.html#source-code-tags-and-builds)\n\n**分析思路**\n\n>以某一个支线为起点，从上层往底层，不断地追溯，在各个模块、文件、方法之间来回跳转，反复地阅读，理清整个流程的逻辑。\n同时带着思考去看源码，去揣测作者的用意，去理解代码的精妙之处，去思考代码可能存在的缺陷，去总结优秀的代码设计思想。\n\n本系列文章由下至上，从内核层到框架层再到应用层，从内核空间到用户空间，全面的分析内部的实现原理和设计思路。在源码的分析过程中，还会穿插分析源码的\n设计模式与编程思想（编程中的抽象、接口、六大原则以及23种设计模式），以下为后续文章的具体安排。\n\n另外，在文章内容的安排上，一般会先去分析流程，再去分析流程中牵扯到的类的作用以及它们的实现细节。这种由线到点的方式会更加生动一些，也更有助于大家\n理解。如果我们一上来就去讲这个类的作用与实现，难免有些枯燥，毕竟只有先去用它，才会想知道它是怎么实现的。\n\n**Android系统架构图**\n\n对Android系统的探索就像探索一个宝藏一样，每天分析一点，就完成了藏宝图的一角，直到有一天我们将整个宝藏的蓝图绘制完成。\n\n官方藏宝图\n\n<img src=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/raw/master/art/android_system_structure.png\"/>\n\n探索中的个人版藏宝图\n\n文章更新中...\n\n在正式阅读本系列文章之前，请先阅读导读相关内容，这会帮助你更加快捷的理解文章内容。\n\n- [导读](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/导读.md)\n\n## Android系统应用框架篇\n\n**Android显示系统**\n\n- 01Android系统应用框架篇：Window源码概览\n- 02Android系统应用框架篇：Window源码概览\n- 03Android系统应用框架篇：Window创建里程\n- 04Android系统应用框架篇：Window内部机制\n- 05Android系统应用框架篇：View源码概览\n- 06Android系统应用框架篇：View工作原理\n- 07Android系统应用框架篇：View事件体系\n\n**Android组件系统**\n\n- [01Android系统应用框架篇：Android组件系统概述](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/01Android系统应用框架篇：组件框架概述.md)\n- [02Android系统应用框架篇：Context家族](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/02Android系统应用框架篇：Context家族.md)\n- [03Android系统应用框架篇：ActivityThread家族](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/03Android系统应用框架篇：ActivityThread家族.md)\n- [04Android系统应用框架篇：ActivityManagerService家族](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/04Android系统应用框架篇：ActivityManagerService家族.md)\n- [05Android系统应用框架篇：Activity源码概览](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/005Android系统应用框架篇：Activity源码概览.md)\n- [06Android系统应用框架篇：Activity启动流程(一)](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/06Android系统应用框架篇：Activity启动流程(一).md)\n- [07Android系统应用框架篇：Activity启动流程(二)](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/07Android系统应用框架篇：Activity启动流程(二).md)\n- [08Android系统应用框架篇：Activity启动流程(三)](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/08Android系统应用框架篇：Activity启动流程(三).md)\n- 09Android系统应用框架篇：Service源码概览\n- [10Android系统应用框架篇：Service启动流程](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/10Android系统应用框架篇：Service启动流程.md)\n- [11Android系统应用框架篇：Service绑定流程](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/11Android系统应用框架篇：Service绑定流程.md)\n- 12Android系统应用框架篇：Broadcast Receiver源码概览\n- 13Android系统应用框架篇：Broadcast Receiver注册流程\n- 14Android系统应用框架篇：Broadcast Receiver发送流程\n- 15Android系统应用框架篇：Content Provider源码概览\n- 16Android系统应用框架篇：Content Provider启动流程\n- 17Android系统应用框架篇：Content Provider共享原理\n- 18Android系统应用框架篇：Content Provider更新机制\n\n## Android系统底层框架篇\n\n>本篇章从Android源码的底层框架原理，例如：Binder机制、智能指针与虚拟机等。\n\n**Android进程框架**\n\n- Android系统底层框架篇：进程与线程概览\n- Android系统底层框架篇：Zygote与System进程启动流程\n- Android系统底层框架篇：应用进程启动流程\n- Android系统底层框架篇：应用消息处理机制\n- Android系统底层框架篇：Binder进程通信机制\n\n**Android内存框架**\n\n- Android系统底层框架篇：Ashmem匿名共享内存系统\n- Android系统基础篇：硬件抽象层\n- Android系统基础篇：智能指针\n- Android系统基础篇：ART/Dalvik 虚拟机\n- Android系统驱动篇：Binder进程通信系统\n\n## Android系统编程思想篇\n\n- [1Android系统编程思想篇：单例模式](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/1Android系统编程思想篇：单例模式.md)\n- [2Android系统编程思想篇：建造者模式](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/2Android系统编程思想篇：建造者模式.md)\n- 3Android系统编程思想篇：原型模式\n- 4Android系统编程思想篇：工厂模式\n- 5Android系统编程思想篇：抽象工厂模式\n- 6Android系统编程思想篇：策略模式\n- 7Android系统编程思想篇：状态模式\n- 8Android系统编程思想篇：责任链模式\n- 9Android系统编程思想篇：解释器模式\n- 10Android系统编程思想篇：命令模式\n- 11Android系统编程思想篇：观察者模式\n- 12Android系统编程思想篇：备忘录模式\n- 13Android系统编程思想篇：迭代器模式\n- 14Android系统编程思想篇：模板方法模式\n- 15Android系统编程思想篇：访问者模式\n- 16Android系统编程思想篇：中介者模式\n- [17Android系统编程思想篇：代理模式](https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/17Android系统编程思想篇：代理模式.md)\n- 18Android系统编程思想篇：组合模式\n- 19Android系统编程思想篇：适配器模式\n- 20Android系统编程思想篇：装饰模式\n- 21Android系统编程思想篇：享元模式\n- 22Android系统编程思想篇：外观模式\n- 23Android系统编程思想篇：桥接模式\n- 24Android系统编程思想篇：软件设计原则\n","slug":"AndroidOpenSourceProject原理分析系列文章","published":1,"updated":"2017-07-13T10:11:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52acn5i0000oncwwgaf7uef","content":"<p>作者曾经看过很多关于Android源码分析的文章与书籍，这些前辈都写的很好，给Android技术的普及带来了很大的推动作用，随着Android技术的更<br>新，目前已经来到了Android 7.0 Nougat版本。所以笔者打算根据最新的源码从内核层到框架层再到应用层，从内核空间到用户空间，全面地去分析<br>Android系统内部的实现原理和设计思路，本系列的文章也会以一种独特的视角来做原理解析，来减轻大家在阅读源码时的枯燥感，好了，让我们开始吧。</p>\n<a id=\"more\"></a>\n<h1 id=\"Android-Open-Source-Project-Analysis\"><a href=\"#Android-Open-Source-Project-Analysis\" class=\"headerlink\" title=\"Android Open Source Project Analysis\"></a>Android Open Source Project Analysis</h1><p><img src=\"https://github.com/guoxiaoxing/android-framework-source-code-analysis/raw/master/art/android_7_nougat.jpg\" width=\"1000\"></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，爱好广泛，技术栈主要涉及以下几个方面</p>\n<ul>\n<li>Android/Linux</li>\n<li>Java/Kotlin/JVM</li>\n<li>Python</li>\n<li>JavaScript/React/ReactNative</li>\n<li>DataStructure/Algorithm</li>\n</ul>\n<p>文章首发于<a href=\"https://github.com/guoxiaoxing\" target=\"_blank\" rel=\"external\">Github</a>，后续也会同步在<a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">简书</a>与<br><a href=\"http://blog.csdn.net/allenwells\" target=\"_blank\" rel=\"external\">CSDN</a>等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。</p>\n</blockquote>\n<p>第一次阅览本系列文章，请参见<a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/导读.md\" target=\"_blank\" rel=\"external\">导读</a>，更多文章请参见<a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/README.md\" target=\"_blank\" rel=\"external\">文章目录</a>。</p>\n<p><strong>写在前面</strong></p>\n<blockquote>\n<p>作者曾经看过很多关于Android源码分析的文章与书籍，这些前辈都写的很好，给Android技术的普及带来了很大的推动作用，随着Android技术的更<br>新，目前已经来到了Android 7.0 Nougat版本。所以笔者打算根据最新的源码从内核层到框架层再到应用层，从内核空间到用户空间，全面地去分析<br>Android系统内部的实现原理和设计思路，本系列的文章也会以一种独特的视角来做原理解析，来减轻大家在阅读源码时的枯燥感，好了，让我们开始吧。</p>\n</blockquote>\n<p><strong>代码版本</strong></p>\n<blockquote>\n<p><a href=\"https://source.android.com/source/build-numbers.html#source-code-tags-and-builds\" target=\"_blank\" rel=\"external\">android-7.1.1_r1</a></p>\n</blockquote>\n<p><strong>分析思路</strong></p>\n<blockquote>\n<p>以某一个支线为起点，从上层往底层，不断地追溯，在各个模块、文件、方法之间来回跳转，反复地阅读，理清整个流程的逻辑。<br>同时带着思考去看源码，去揣测作者的用意，去理解代码的精妙之处，去思考代码可能存在的缺陷，去总结优秀的代码设计思想。</p>\n</blockquote>\n<p>本系列文章由下至上，从内核层到框架层再到应用层，从内核空间到用户空间，全面的分析内部的实现原理和设计思路。在源码的分析过程中，还会穿插分析源码的<br>设计模式与编程思想（编程中的抽象、接口、六大原则以及23种设计模式），以下为后续文章的具体安排。</p>\n<p>另外，在文章内容的安排上，一般会先去分析流程，再去分析流程中牵扯到的类的作用以及它们的实现细节。这种由线到点的方式会更加生动一些，也更有助于大家<br>理解。如果我们一上来就去讲这个类的作用与实现，难免有些枯燥，毕竟只有先去用它，才会想知道它是怎么实现的。</p>\n<p><strong>Android系统架构图</strong></p>\n<p>对Android系统的探索就像探索一个宝藏一样，每天分析一点，就完成了藏宝图的一角，直到有一天我们将整个宝藏的蓝图绘制完成。</p>\n<p>官方藏宝图</p>\n<p><img src=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/raw/master/art/android_system_structure.png\"></p>\n<p>探索中的个人版藏宝图</p>\n<p>文章更新中…</p>\n<p>在正式阅读本系列文章之前，请先阅读导读相关内容，这会帮助你更加快捷的理解文章内容。</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/导读.md\" target=\"_blank\" rel=\"external\">导读</a></li>\n</ul>\n<h2 id=\"Android系统应用框架篇\"><a href=\"#Android系统应用框架篇\" class=\"headerlink\" title=\"Android系统应用框架篇\"></a>Android系统应用框架篇</h2><p><strong>Android显示系统</strong></p>\n<ul>\n<li>01Android系统应用框架篇：Window源码概览</li>\n<li>02Android系统应用框架篇：Window源码概览</li>\n<li>03Android系统应用框架篇：Window创建里程</li>\n<li>04Android系统应用框架篇：Window内部机制</li>\n<li>05Android系统应用框架篇：View源码概览</li>\n<li>06Android系统应用框架篇：View工作原理</li>\n<li>07Android系统应用框架篇：View事件体系</li>\n</ul>\n<p><strong>Android组件系统</strong></p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/01Android系统应用框架篇：组件框架概述.md\" target=\"_blank\" rel=\"external\">01Android系统应用框架篇：Android组件系统概述</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/02Android系统应用框架篇：Context家族.md\" target=\"_blank\" rel=\"external\">02Android系统应用框架篇：Context家族</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/03Android系统应用框架篇：ActivityThread家族.md\" target=\"_blank\" rel=\"external\">03Android系统应用框架篇：ActivityThread家族</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/04Android系统应用框架篇：ActivityManagerService家族.md\" target=\"_blank\" rel=\"external\">04Android系统应用框架篇：ActivityManagerService家族</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/005Android系统应用框架篇：Activity源码概览.md\" target=\"_blank\" rel=\"external\">05Android系统应用框架篇：Activity源码概览</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/06Android系统应用框架篇：Activity启动流程(一\" target=\"_blank\" rel=\"external\">06Android系统应用框架篇：Activity启动流程(一)</a>.md)</li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/07Android系统应用框架篇：Activity启动流程(二\" target=\"_blank\" rel=\"external\">07Android系统应用框架篇：Activity启动流程(二)</a>.md)</li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/08Android系统应用框架篇：Activity启动流程(三\" target=\"_blank\" rel=\"external\">08Android系统应用框架篇：Activity启动流程(三)</a>.md)</li>\n<li>09Android系统应用框架篇：Service源码概览</li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/10Android系统应用框架篇：Service启动流程.md\" target=\"_blank\" rel=\"external\">10Android系统应用框架篇：Service启动流程</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/11Android系统应用框架篇：Service绑定流程.md\" target=\"_blank\" rel=\"external\">11Android系统应用框架篇：Service绑定流程</a></li>\n<li>12Android系统应用框架篇：Broadcast Receiver源码概览</li>\n<li>13Android系统应用框架篇：Broadcast Receiver注册流程</li>\n<li>14Android系统应用框架篇：Broadcast Receiver发送流程</li>\n<li>15Android系统应用框架篇：Content Provider源码概览</li>\n<li>16Android系统应用框架篇：Content Provider启动流程</li>\n<li>17Android系统应用框架篇：Content Provider共享原理</li>\n<li>18Android系统应用框架篇：Content Provider更新机制</li>\n</ul>\n<h2 id=\"Android系统底层框架篇\"><a href=\"#Android系统底层框架篇\" class=\"headerlink\" title=\"Android系统底层框架篇\"></a>Android系统底层框架篇</h2><blockquote>\n<p>本篇章从Android源码的底层框架原理，例如：Binder机制、智能指针与虚拟机等。</p>\n</blockquote>\n<p><strong>Android进程框架</strong></p>\n<ul>\n<li>Android系统底层框架篇：进程与线程概览</li>\n<li>Android系统底层框架篇：Zygote与System进程启动流程</li>\n<li>Android系统底层框架篇：应用进程启动流程</li>\n<li>Android系统底层框架篇：应用消息处理机制</li>\n<li>Android系统底层框架篇：Binder进程通信机制</li>\n</ul>\n<p><strong>Android内存框架</strong></p>\n<ul>\n<li>Android系统底层框架篇：Ashmem匿名共享内存系统</li>\n<li>Android系统基础篇：硬件抽象层</li>\n<li>Android系统基础篇：智能指针</li>\n<li>Android系统基础篇：ART/Dalvik 虚拟机</li>\n<li>Android系统驱动篇：Binder进程通信系统</li>\n</ul>\n<h2 id=\"Android系统编程思想篇\"><a href=\"#Android系统编程思想篇\" class=\"headerlink\" title=\"Android系统编程思想篇\"></a>Android系统编程思想篇</h2><ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/1Android系统编程思想篇：单例模式.md\" target=\"_blank\" rel=\"external\">1Android系统编程思想篇：单例模式</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/2Android系统编程思想篇：建造者模式.md\" target=\"_blank\" rel=\"external\">2Android系统编程思想篇：建造者模式</a></li>\n<li>3Android系统编程思想篇：原型模式</li>\n<li>4Android系统编程思想篇：工厂模式</li>\n<li>5Android系统编程思想篇：抽象工厂模式</li>\n<li>6Android系统编程思想篇：策略模式</li>\n<li>7Android系统编程思想篇：状态模式</li>\n<li>8Android系统编程思想篇：责任链模式</li>\n<li>9Android系统编程思想篇：解释器模式</li>\n<li>10Android系统编程思想篇：命令模式</li>\n<li>11Android系统编程思想篇：观察者模式</li>\n<li>12Android系统编程思想篇：备忘录模式</li>\n<li>13Android系统编程思想篇：迭代器模式</li>\n<li>14Android系统编程思想篇：模板方法模式</li>\n<li>15Android系统编程思想篇：访问者模式</li>\n<li>16Android系统编程思想篇：中介者模式</li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/17Android系统编程思想篇：代理模式.md\" target=\"_blank\" rel=\"external\">17Android系统编程思想篇：代理模式</a></li>\n<li>18Android系统编程思想篇：组合模式</li>\n<li>19Android系统编程思想篇：适配器模式</li>\n<li>20Android系统编程思想篇：装饰模式</li>\n<li>21Android系统编程思想篇：享元模式</li>\n<li>22Android系统编程思想篇：外观模式</li>\n<li>23Android系统编程思想篇：桥接模式</li>\n<li>24Android系统编程思想篇：软件设计原则</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>作者曾经看过很多关于Android源码分析的文章与书籍，这些前辈都写的很好，给Android技术的普及带来了很大的推动作用，随着Android技术的更<br>新，目前已经来到了Android 7.0 Nougat版本。所以笔者打算根据最新的源码从内核层到框架层再到应用层，从内核空间到用户空间，全面地去分析<br>Android系统内部的实现原理和设计思路，本系列的文章也会以一种独特的视角来做原理解析，来减轻大家在阅读源码时的枯燥感，好了，让我们开始吧。</p>","more":"<h1 id=\"Android-Open-Source-Project-Analysis\"><a href=\"#Android-Open-Source-Project-Analysis\" class=\"headerlink\" title=\"Android Open Source Project Analysis\"></a>Android Open Source Project Analysis</h1><p><img src=\"https://github.com/guoxiaoxing/android-framework-source-code-analysis/raw/master/art/android_7_nougat.jpg\" width=\"1000\"></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，爱好广泛，技术栈主要涉及以下几个方面</p>\n<ul>\n<li>Android/Linux</li>\n<li>Java/Kotlin/JVM</li>\n<li>Python</li>\n<li>JavaScript/React/ReactNative</li>\n<li>DataStructure/Algorithm</li>\n</ul>\n<p>文章首发于<a href=\"https://github.com/guoxiaoxing\" target=\"_blank\" rel=\"external\">Github</a>，后续也会同步在<a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">简书</a>与<br><a href=\"http://blog.csdn.net/allenwells\" target=\"_blank\" rel=\"external\">CSDN</a>等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。</p>\n</blockquote>\n<p>第一次阅览本系列文章，请参见<a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/导读.md\" target=\"_blank\" rel=\"external\">导读</a>，更多文章请参见<a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/README.md\" target=\"_blank\" rel=\"external\">文章目录</a>。</p>\n<p><strong>写在前面</strong></p>\n<blockquote>\n<p>作者曾经看过很多关于Android源码分析的文章与书籍，这些前辈都写的很好，给Android技术的普及带来了很大的推动作用，随着Android技术的更<br>新，目前已经来到了Android 7.0 Nougat版本。所以笔者打算根据最新的源码从内核层到框架层再到应用层，从内核空间到用户空间，全面地去分析<br>Android系统内部的实现原理和设计思路，本系列的文章也会以一种独特的视角来做原理解析，来减轻大家在阅读源码时的枯燥感，好了，让我们开始吧。</p>\n</blockquote>\n<p><strong>代码版本</strong></p>\n<blockquote>\n<p><a href=\"https://source.android.com/source/build-numbers.html#source-code-tags-and-builds\" target=\"_blank\" rel=\"external\">android-7.1.1_r1</a></p>\n</blockquote>\n<p><strong>分析思路</strong></p>\n<blockquote>\n<p>以某一个支线为起点，从上层往底层，不断地追溯，在各个模块、文件、方法之间来回跳转，反复地阅读，理清整个流程的逻辑。<br>同时带着思考去看源码，去揣测作者的用意，去理解代码的精妙之处，去思考代码可能存在的缺陷，去总结优秀的代码设计思想。</p>\n</blockquote>\n<p>本系列文章由下至上，从内核层到框架层再到应用层，从内核空间到用户空间，全面的分析内部的实现原理和设计思路。在源码的分析过程中，还会穿插分析源码的<br>设计模式与编程思想（编程中的抽象、接口、六大原则以及23种设计模式），以下为后续文章的具体安排。</p>\n<p>另外，在文章内容的安排上，一般会先去分析流程，再去分析流程中牵扯到的类的作用以及它们的实现细节。这种由线到点的方式会更加生动一些，也更有助于大家<br>理解。如果我们一上来就去讲这个类的作用与实现，难免有些枯燥，毕竟只有先去用它，才会想知道它是怎么实现的。</p>\n<p><strong>Android系统架构图</strong></p>\n<p>对Android系统的探索就像探索一个宝藏一样，每天分析一点，就完成了藏宝图的一角，直到有一天我们将整个宝藏的蓝图绘制完成。</p>\n<p>官方藏宝图</p>\n<p><img src=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/raw/master/art/android_system_structure.png\"></p>\n<p>探索中的个人版藏宝图</p>\n<p>文章更新中…</p>\n<p>在正式阅读本系列文章之前，请先阅读导读相关内容，这会帮助你更加快捷的理解文章内容。</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/导读.md\" target=\"_blank\" rel=\"external\">导读</a></li>\n</ul>\n<h2 id=\"Android系统应用框架篇\"><a href=\"#Android系统应用框架篇\" class=\"headerlink\" title=\"Android系统应用框架篇\"></a>Android系统应用框架篇</h2><p><strong>Android显示系统</strong></p>\n<ul>\n<li>01Android系统应用框架篇：Window源码概览</li>\n<li>02Android系统应用框架篇：Window源码概览</li>\n<li>03Android系统应用框架篇：Window创建里程</li>\n<li>04Android系统应用框架篇：Window内部机制</li>\n<li>05Android系统应用框架篇：View源码概览</li>\n<li>06Android系统应用框架篇：View工作原理</li>\n<li>07Android系统应用框架篇：View事件体系</li>\n</ul>\n<p><strong>Android组件系统</strong></p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/01Android系统应用框架篇：组件框架概述.md\" target=\"_blank\" rel=\"external\">01Android系统应用框架篇：Android组件系统概述</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/02Android系统应用框架篇：Context家族.md\" target=\"_blank\" rel=\"external\">02Android系统应用框架篇：Context家族</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/03Android系统应用框架篇：ActivityThread家族.md\" target=\"_blank\" rel=\"external\">03Android系统应用框架篇：ActivityThread家族</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/04Android系统应用框架篇：ActivityManagerService家族.md\" target=\"_blank\" rel=\"external\">04Android系统应用框架篇：ActivityManagerService家族</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/005Android系统应用框架篇：Activity源码概览.md\" target=\"_blank\" rel=\"external\">05Android系统应用框架篇：Activity源码概览</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/06Android系统应用框架篇：Activity启动流程(一\" target=\"_blank\" rel=\"external\">06Android系统应用框架篇：Activity启动流程(一)</a>.md)</li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/07Android系统应用框架篇：Activity启动流程(二\" target=\"_blank\" rel=\"external\">07Android系统应用框架篇：Activity启动流程(二)</a>.md)</li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/08Android系统应用框架篇：Activity启动流程(三\" target=\"_blank\" rel=\"external\">08Android系统应用框架篇：Activity启动流程(三)</a>.md)</li>\n<li>09Android系统应用框架篇：Service源码概览</li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/10Android系统应用框架篇：Service启动流程.md\" target=\"_blank\" rel=\"external\">10Android系统应用框架篇：Service启动流程</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统应用框架篇/Android组件系统/11Android系统应用框架篇：Service绑定流程.md\" target=\"_blank\" rel=\"external\">11Android系统应用框架篇：Service绑定流程</a></li>\n<li>12Android系统应用框架篇：Broadcast Receiver源码概览</li>\n<li>13Android系统应用框架篇：Broadcast Receiver注册流程</li>\n<li>14Android系统应用框架篇：Broadcast Receiver发送流程</li>\n<li>15Android系统应用框架篇：Content Provider源码概览</li>\n<li>16Android系统应用框架篇：Content Provider启动流程</li>\n<li>17Android系统应用框架篇：Content Provider共享原理</li>\n<li>18Android系统应用框架篇：Content Provider更新机制</li>\n</ul>\n<h2 id=\"Android系统底层框架篇\"><a href=\"#Android系统底层框架篇\" class=\"headerlink\" title=\"Android系统底层框架篇\"></a>Android系统底层框架篇</h2><blockquote>\n<p>本篇章从Android源码的底层框架原理，例如：Binder机制、智能指针与虚拟机等。</p>\n</blockquote>\n<p><strong>Android进程框架</strong></p>\n<ul>\n<li>Android系统底层框架篇：进程与线程概览</li>\n<li>Android系统底层框架篇：Zygote与System进程启动流程</li>\n<li>Android系统底层框架篇：应用进程启动流程</li>\n<li>Android系统底层框架篇：应用消息处理机制</li>\n<li>Android系统底层框架篇：Binder进程通信机制</li>\n</ul>\n<p><strong>Android内存框架</strong></p>\n<ul>\n<li>Android系统底层框架篇：Ashmem匿名共享内存系统</li>\n<li>Android系统基础篇：硬件抽象层</li>\n<li>Android系统基础篇：智能指针</li>\n<li>Android系统基础篇：ART/Dalvik 虚拟机</li>\n<li>Android系统驱动篇：Binder进程通信系统</li>\n</ul>\n<h2 id=\"Android系统编程思想篇\"><a href=\"#Android系统编程思想篇\" class=\"headerlink\" title=\"Android系统编程思想篇\"></a>Android系统编程思想篇</h2><ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/1Android系统编程思想篇：单例模式.md\" target=\"_blank\" rel=\"external\">1Android系统编程思想篇：单例模式</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/2Android系统编程思想篇：建造者模式.md\" target=\"_blank\" rel=\"external\">2Android系统编程思想篇：建造者模式</a></li>\n<li>3Android系统编程思想篇：原型模式</li>\n<li>4Android系统编程思想篇：工厂模式</li>\n<li>5Android系统编程思想篇：抽象工厂模式</li>\n<li>6Android系统编程思想篇：策略模式</li>\n<li>7Android系统编程思想篇：状态模式</li>\n<li>8Android系统编程思想篇：责任链模式</li>\n<li>9Android系统编程思想篇：解释器模式</li>\n<li>10Android系统编程思想篇：命令模式</li>\n<li>11Android系统编程思想篇：观察者模式</li>\n<li>12Android系统编程思想篇：备忘录模式</li>\n<li>13Android系统编程思想篇：迭代器模式</li>\n<li>14Android系统编程思想篇：模板方法模式</li>\n<li>15Android系统编程思想篇：访问者模式</li>\n<li>16Android系统编程思想篇：中介者模式</li>\n<li><a href=\"https://github.com/guoxiaoxing/android-open-source-project-analysis/blob/master/doc/Android系统编程思想篇/17Android系统编程思想篇：代理模式.md\" target=\"_blank\" rel=\"external\">17Android系统编程思想篇：代理模式</a></li>\n<li>18Android系统编程思想篇：组合模式</li>\n<li>19Android系统编程思想篇：适配器模式</li>\n<li>20Android系统编程思想篇：装饰模式</li>\n<li>21Android系统编程思想篇：享元模式</li>\n<li>22Android系统编程思想篇：外观模式</li>\n<li>23Android系统编程思想篇：桥接模式</li>\n<li>24Android系统编程思想篇：软件设计原则</li>\n</ul>"},{"title":"Java/JVM原理分析与实践系列文章","date":"2016-12-31T16:00:00.000Z","_content":"\n本系列文章讨论JDK Framework、JVM以及关于Java的一些最佳实践。\n\n<!-- more -->\n\n# Java\n\n>本系列文章讨论JDK Framework、JVM以及关于Java的一些最佳实践。\n\n- [Open JDK](http://openjdk.java.net/)\n- [Java SE](http://www.oracle.com/technetwork/java/javase/overview/index.html)\n- [Java SE Document](http://docs.oracle.com/javase/8/)\n\n## Java编程篇\n\n- [01Java编程篇：对象](https://github.com/guoxiaoxing/java/blob/master/doc/Java编程篇/01Java编程篇：对象.md)\n- 02Java编程篇：类与接口\n- 03Java编程篇：泛型\n- 04Java编程篇：集合\n- 05Java编程篇：序列化\n- 06Java编程篇：注解\n- 07Java编程篇：IO\n- 08Java编程篇：并发\n\n## Java虚拟机篇\n\n- [01Java虚拟机篇：Java虚拟机概述](https://github.com/guoxiaoxing/java/blob/master/doc/Java虚拟机篇/01Java虚拟机篇：Java虚拟机概述.md)\n- [02Java虚拟机篇：内存结构](https://github.com/guoxiaoxing/java/blob/master/doc/Java虚拟机篇/02Java虚拟机篇：内存结构.md)\n- 03Java虚拟机篇：内存分配与垃圾回收\n- 03Java虚拟机篇：内存模型与现场\n- 04Java虚拟机篇：线程安全与线程锁\n- 05Java虚拟机篇：类文件结构\n- 06Java虚拟机篇：类加载机制\n- 07Java虚拟机篇：字节码执行原理\n- 08Java虚拟机篇：类编译原理与优化\n","source":"_posts/Java:JVM原理分析与实践系列文章.md","raw":"title: Java/JVM原理分析与实践系列文章\ndate: 2017-1-1 00:00:00\ntags:\n---\n\n本系列文章讨论JDK Framework、JVM以及关于Java的一些最佳实践。\n\n<!-- more -->\n\n# Java\n\n>本系列文章讨论JDK Framework、JVM以及关于Java的一些最佳实践。\n\n- [Open JDK](http://openjdk.java.net/)\n- [Java SE](http://www.oracle.com/technetwork/java/javase/overview/index.html)\n- [Java SE Document](http://docs.oracle.com/javase/8/)\n\n## Java编程篇\n\n- [01Java编程篇：对象](https://github.com/guoxiaoxing/java/blob/master/doc/Java编程篇/01Java编程篇：对象.md)\n- 02Java编程篇：类与接口\n- 03Java编程篇：泛型\n- 04Java编程篇：集合\n- 05Java编程篇：序列化\n- 06Java编程篇：注解\n- 07Java编程篇：IO\n- 08Java编程篇：并发\n\n## Java虚拟机篇\n\n- [01Java虚拟机篇：Java虚拟机概述](https://github.com/guoxiaoxing/java/blob/master/doc/Java虚拟机篇/01Java虚拟机篇：Java虚拟机概述.md)\n- [02Java虚拟机篇：内存结构](https://github.com/guoxiaoxing/java/blob/master/doc/Java虚拟机篇/02Java虚拟机篇：内存结构.md)\n- 03Java虚拟机篇：内存分配与垃圾回收\n- 03Java虚拟机篇：内存模型与现场\n- 04Java虚拟机篇：线程安全与线程锁\n- 05Java虚拟机篇：类文件结构\n- 06Java虚拟机篇：类加载机制\n- 07Java虚拟机篇：字节码执行原理\n- 08Java虚拟机篇：类编译原理与优化\n","slug":"Java:JVM原理分析与实践系列文章","published":1,"updated":"2017-07-13T10:12:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52acn600002oncwrkfgqhek","content":"<p>本系列文章讨论JDK Framework、JVM以及关于Java的一些最佳实践。</p>\n<a id=\"more\"></a>\n<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1><blockquote>\n<p>本系列文章讨论JDK Framework、JVM以及关于Java的一些最佳实践。</p>\n</blockquote>\n<ul>\n<li><a href=\"http://openjdk.java.net/\" target=\"_blank\" rel=\"external\">Open JDK</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/overview/index.html\" target=\"_blank\" rel=\"external\">Java SE</a></li>\n<li><a href=\"http://docs.oracle.com/javase/8/\" target=\"_blank\" rel=\"external\">Java SE Document</a></li>\n</ul>\n<h2 id=\"Java编程篇\"><a href=\"#Java编程篇\" class=\"headerlink\" title=\"Java编程篇\"></a>Java编程篇</h2><ul>\n<li><a href=\"https://github.com/guoxiaoxing/java/blob/master/doc/Java编程篇/01Java编程篇：对象.md\" target=\"_blank\" rel=\"external\">01Java编程篇：对象</a></li>\n<li>02Java编程篇：类与接口</li>\n<li>03Java编程篇：泛型</li>\n<li>04Java编程篇：集合</li>\n<li>05Java编程篇：序列化</li>\n<li>06Java编程篇：注解</li>\n<li>07Java编程篇：IO</li>\n<li>08Java编程篇：并发</li>\n</ul>\n<h2 id=\"Java虚拟机篇\"><a href=\"#Java虚拟机篇\" class=\"headerlink\" title=\"Java虚拟机篇\"></a>Java虚拟机篇</h2><ul>\n<li><a href=\"https://github.com/guoxiaoxing/java/blob/master/doc/Java虚拟机篇/01Java虚拟机篇：Java虚拟机概述.md\" target=\"_blank\" rel=\"external\">01Java虚拟机篇：Java虚拟机概述</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/java/blob/master/doc/Java虚拟机篇/02Java虚拟机篇：内存结构.md\" target=\"_blank\" rel=\"external\">02Java虚拟机篇：内存结构</a></li>\n<li>03Java虚拟机篇：内存分配与垃圾回收</li>\n<li>03Java虚拟机篇：内存模型与现场</li>\n<li>04Java虚拟机篇：线程安全与线程锁</li>\n<li>05Java虚拟机篇：类文件结构</li>\n<li>06Java虚拟机篇：类加载机制</li>\n<li>07Java虚拟机篇：字节码执行原理</li>\n<li>08Java虚拟机篇：类编译原理与优化</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本系列文章讨论JDK Framework、JVM以及关于Java的一些最佳实践。</p>","more":"<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1><blockquote>\n<p>本系列文章讨论JDK Framework、JVM以及关于Java的一些最佳实践。</p>\n</blockquote>\n<ul>\n<li><a href=\"http://openjdk.java.net/\" target=\"_blank\" rel=\"external\">Open JDK</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/overview/index.html\" target=\"_blank\" rel=\"external\">Java SE</a></li>\n<li><a href=\"http://docs.oracle.com/javase/8/\" target=\"_blank\" rel=\"external\">Java SE Document</a></li>\n</ul>\n<h2 id=\"Java编程篇\"><a href=\"#Java编程篇\" class=\"headerlink\" title=\"Java编程篇\"></a>Java编程篇</h2><ul>\n<li><a href=\"https://github.com/guoxiaoxing/java/blob/master/doc/Java编程篇/01Java编程篇：对象.md\" target=\"_blank\" rel=\"external\">01Java编程篇：对象</a></li>\n<li>02Java编程篇：类与接口</li>\n<li>03Java编程篇：泛型</li>\n<li>04Java编程篇：集合</li>\n<li>05Java编程篇：序列化</li>\n<li>06Java编程篇：注解</li>\n<li>07Java编程篇：IO</li>\n<li>08Java编程篇：并发</li>\n</ul>\n<h2 id=\"Java虚拟机篇\"><a href=\"#Java虚拟机篇\" class=\"headerlink\" title=\"Java虚拟机篇\"></a>Java虚拟机篇</h2><ul>\n<li><a href=\"https://github.com/guoxiaoxing/java/blob/master/doc/Java虚拟机篇/01Java虚拟机篇：Java虚拟机概述.md\" target=\"_blank\" rel=\"external\">01Java虚拟机篇：Java虚拟机概述</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/java/blob/master/doc/Java虚拟机篇/02Java虚拟机篇：内存结构.md\" target=\"_blank\" rel=\"external\">02Java虚拟机篇：内存结构</a></li>\n<li>03Java虚拟机篇：内存分配与垃圾回收</li>\n<li>03Java虚拟机篇：内存模型与现场</li>\n<li>04Java虚拟机篇：线程安全与线程锁</li>\n<li>05Java虚拟机篇：类文件结构</li>\n<li>06Java虚拟机篇：类加载机制</li>\n<li>07Java虚拟机篇：字节码执行原理</li>\n<li>08Java虚拟机篇：类编译原理与优化</li>\n</ul>"},{"title":"Android主流开源框架原理分析与实践系列文章","date":"2016-12-31T16:00:00.000Z","_content":"\n本系列文章主要分析各类开源框架的实现，当然这些被选中的框架也是我们在技术选型中使用最广泛的框架。\n\n注：以下都是应用非常广泛的开源框架，可以作为大家技术选型的参考。另外，由于精力有限，不可能对每个框架都做细致的分析\n，这些会挑选笔者有过深入实践，理解相对比较深入的框架进行分析。\n\n<!-- more -->\n\n**关于作者**\n\n>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，热爱编程，技术栈主要涉及以下几个方面\n>\n>- Android/Linux\n>- Java/Kotlin/JVM\n>- Python\n>- JavaScript/React/ReactNative\n>- DataStructure/Algorithm\n>\n>文章首发于[Github](https://github.com/guoxiaoxing)，后续也会同步在[简书](http://www.jianshu.com/users/66a47e04215b/latest_articles)与\n[CSDN](http://blog.csdn.net/allenwells)等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。\n\n# Android Open Framwork Analysis\n\n本系列文章主要分析各类开源框架的实现，当然这些被选中的框架也是我们在技术选型中使用最广泛的框架。\n\n注：以下都是应用非常广泛的开源框架，可以作为大家技术选型的参考。另外，由于精力有限，不可能对每个框架都做细致的分析\n，这些会挑选笔者有过深入实践，理解相对比较深入的框架进行分析。\n\n## Networking\n\n网络请求框架方面我们用的是khttp+etrofit，当然也有同学反映Retrofit使用起来不是很简便，这个时候你可以使用okhttp-OkGo，chuck等\n这些封装库来简化调用过程。\n\n- okhttp: An HTTP+HTTP/2 client for Android and Java applications\n- retrofit: Type-safe HTTP client for Android and Java by Square, Inc.\n\n[okhttp](https://github.com/square/okhttp)\n[retrofit](https://github.com/square/retrofit)\n\n## Image Loader\n\n图片加载框架方面当然是功能强大的Fresco。\n\n[fresco](https://github.com/facebook/fresco): https://github.com/facebook/fresco\n\n## O/R Mapping\n\n数据库方面，由于Realm高效易用的特性，以及它对各大平台的支持，使得它成为数据库框架方面非常好的选择。\n\n[realm-java](https://github.com/realm/realm-java): Realm is a mobile database: a replacement for SQLite & ORMs\n\n## Dependency Injection\n\n依赖注入是为了解耦，常见的依赖注入框架有：\n\n- ButterKnife: Bind Android views and callbacks to fields and methods\n- Dagger: A fast dependency injector for Android and Java\n\n[ButterKnife](https://github.com/JakeWharton/butterknife)\n\n[Dagger](https://github.com/google/dagger)\n\n## RxJava\n\nRxJava系列主要用来完成异步编程，对于Android开发而言常用的框架有：\n\n- RxJava: A library for composing asynchronous and event-based programs using observable sequences for the Java VM.\n- RxAndroid: RxJava bindings for Android\n\n[RxJava](https://github.com/ReactiveX/RxJava)\n\n[RxAndroid](https://github.com/ReactiveX/RxAndroid) \n\n## JSON\n\nJSON序列化与反序列化也是非常常见的操作，JSON解析常见的框架有：\n\n- gson：A Java serialization/deserialization library to convert Java Objects into JSON and back\n- fastjson: A fast JSON parser/generator for Java \n\n[gson](https://github.com/google/gson)\n\n## JavaScript\n\n随着前端技术的发展，跨平台开发技术也逐渐成熟起来，常见的跨平台框架有：\n\n- React Native: A framework for building native apps with React\n- Weex: A framework for building Mobile cross-platform UI\n\n我们公司目前使用的React Native。\n\n[react-native](https://github.com/facebook/react-native)\n\n## Android Plugin\n\nAndroid的插件化技术也是近两年很火热的技术，涌现了很多优秀的框架。主流的插件化框架有：\n\n- DynamicAPK\n- AndroidDynamicLoader\n- dynamic-load-apk\n- android-pluginmgr\n- DroidPlugin：A plugin framework on android,Run any third-party apk without installation, modification or repackage\n\n[DroidPlugin](https://github.com/DroidPluginTeam/DroidPlugin)\n\n## Android Hot Fix\n\n客户端并不能像前端那样即写即发，所以热修复技术就显得非常有价值，尤其是在遭遇重大线上bug的时候，主流的热修复框架有：\n\n- Dexposed\n- AndFix\n- Nuwa\n- HotFix\n- DroidFix\n- AnoleFix\n- Amigo\n- Tinker\n","source":"_posts/Android主流开源框架原理分析与实践系列文章.md","raw":"title: Android主流开源框架原理分析与实践系列文章\ndate: 2017-1-1 00:00:00\ntags:\n---\n\n本系列文章主要分析各类开源框架的实现，当然这些被选中的框架也是我们在技术选型中使用最广泛的框架。\n\n注：以下都是应用非常广泛的开源框架，可以作为大家技术选型的参考。另外，由于精力有限，不可能对每个框架都做细致的分析\n，这些会挑选笔者有过深入实践，理解相对比较深入的框架进行分析。\n\n<!-- more -->\n\n**关于作者**\n\n>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，热爱编程，技术栈主要涉及以下几个方面\n>\n>- Android/Linux\n>- Java/Kotlin/JVM\n>- Python\n>- JavaScript/React/ReactNative\n>- DataStructure/Algorithm\n>\n>文章首发于[Github](https://github.com/guoxiaoxing)，后续也会同步在[简书](http://www.jianshu.com/users/66a47e04215b/latest_articles)与\n[CSDN](http://blog.csdn.net/allenwells)等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。\n\n# Android Open Framwork Analysis\n\n本系列文章主要分析各类开源框架的实现，当然这些被选中的框架也是我们在技术选型中使用最广泛的框架。\n\n注：以下都是应用非常广泛的开源框架，可以作为大家技术选型的参考。另外，由于精力有限，不可能对每个框架都做细致的分析\n，这些会挑选笔者有过深入实践，理解相对比较深入的框架进行分析。\n\n## Networking\n\n网络请求框架方面我们用的是khttp+etrofit，当然也有同学反映Retrofit使用起来不是很简便，这个时候你可以使用okhttp-OkGo，chuck等\n这些封装库来简化调用过程。\n\n- okhttp: An HTTP+HTTP/2 client for Android and Java applications\n- retrofit: Type-safe HTTP client for Android and Java by Square, Inc.\n\n[okhttp](https://github.com/square/okhttp)\n[retrofit](https://github.com/square/retrofit)\n\n## Image Loader\n\n图片加载框架方面当然是功能强大的Fresco。\n\n[fresco](https://github.com/facebook/fresco): https://github.com/facebook/fresco\n\n## O/R Mapping\n\n数据库方面，由于Realm高效易用的特性，以及它对各大平台的支持，使得它成为数据库框架方面非常好的选择。\n\n[realm-java](https://github.com/realm/realm-java): Realm is a mobile database: a replacement for SQLite & ORMs\n\n## Dependency Injection\n\n依赖注入是为了解耦，常见的依赖注入框架有：\n\n- ButterKnife: Bind Android views and callbacks to fields and methods\n- Dagger: A fast dependency injector for Android and Java\n\n[ButterKnife](https://github.com/JakeWharton/butterknife)\n\n[Dagger](https://github.com/google/dagger)\n\n## RxJava\n\nRxJava系列主要用来完成异步编程，对于Android开发而言常用的框架有：\n\n- RxJava: A library for composing asynchronous and event-based programs using observable sequences for the Java VM.\n- RxAndroid: RxJava bindings for Android\n\n[RxJava](https://github.com/ReactiveX/RxJava)\n\n[RxAndroid](https://github.com/ReactiveX/RxAndroid) \n\n## JSON\n\nJSON序列化与反序列化也是非常常见的操作，JSON解析常见的框架有：\n\n- gson：A Java serialization/deserialization library to convert Java Objects into JSON and back\n- fastjson: A fast JSON parser/generator for Java \n\n[gson](https://github.com/google/gson)\n\n## JavaScript\n\n随着前端技术的发展，跨平台开发技术也逐渐成熟起来，常见的跨平台框架有：\n\n- React Native: A framework for building native apps with React\n- Weex: A framework for building Mobile cross-platform UI\n\n我们公司目前使用的React Native。\n\n[react-native](https://github.com/facebook/react-native)\n\n## Android Plugin\n\nAndroid的插件化技术也是近两年很火热的技术，涌现了很多优秀的框架。主流的插件化框架有：\n\n- DynamicAPK\n- AndroidDynamicLoader\n- dynamic-load-apk\n- android-pluginmgr\n- DroidPlugin：A plugin framework on android,Run any third-party apk without installation, modification or repackage\n\n[DroidPlugin](https://github.com/DroidPluginTeam/DroidPlugin)\n\n## Android Hot Fix\n\n客户端并不能像前端那样即写即发，所以热修复技术就显得非常有价值，尤其是在遭遇重大线上bug的时候，主流的热修复框架有：\n\n- Dexposed\n- AndFix\n- Nuwa\n- HotFix\n- DroidFix\n- AnoleFix\n- Amigo\n- Tinker\n","slug":"Android主流开源框架原理分析与实践系列文章","published":1,"updated":"2017-07-13T10:12:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52acn640004oncw057ke5ne","content":"<p>本系列文章主要分析各类开源框架的实现，当然这些被选中的框架也是我们在技术选型中使用最广泛的框架。</p>\n<p>注：以下都是应用非常广泛的开源框架，可以作为大家技术选型的参考。另外，由于精力有限，不可能对每个框架都做细致的分析<br>，这些会挑选笔者有过深入实践，理解相对比较深入的框架进行分析。</p>\n<a id=\"more\"></a>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，热爱编程，技术栈主要涉及以下几个方面</p>\n<ul>\n<li>Android/Linux</li>\n<li>Java/Kotlin/JVM</li>\n<li>Python</li>\n<li>JavaScript/React/ReactNative</li>\n<li>DataStructure/Algorithm</li>\n</ul>\n<p>文章首发于<a href=\"https://github.com/guoxiaoxing\" target=\"_blank\" rel=\"external\">Github</a>，后续也会同步在<a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">简书</a>与<br><a href=\"http://blog.csdn.net/allenwells\" target=\"_blank\" rel=\"external\">CSDN</a>等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。</p>\n</blockquote>\n<h1 id=\"Android-Open-Framwork-Analysis\"><a href=\"#Android-Open-Framwork-Analysis\" class=\"headerlink\" title=\"Android Open Framwork Analysis\"></a>Android Open Framwork Analysis</h1><p>本系列文章主要分析各类开源框架的实现，当然这些被选中的框架也是我们在技术选型中使用最广泛的框架。</p>\n<p>注：以下都是应用非常广泛的开源框架，可以作为大家技术选型的参考。另外，由于精力有限，不可能对每个框架都做细致的分析<br>，这些会挑选笔者有过深入实践，理解相对比较深入的框架进行分析。</p>\n<h2 id=\"Networking\"><a href=\"#Networking\" class=\"headerlink\" title=\"Networking\"></a>Networking</h2><p>网络请求框架方面我们用的是khttp+etrofit，当然也有同学反映Retrofit使用起来不是很简便，这个时候你可以使用okhttp-OkGo，chuck等<br>这些封装库来简化调用过程。</p>\n<ul>\n<li>okhttp: An HTTP+HTTP/2 client for Android and Java applications</li>\n<li>retrofit: Type-safe HTTP client for Android and Java by Square, Inc.</li>\n</ul>\n<p><a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">okhttp</a><br><a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">retrofit</a></p>\n<h2 id=\"Image-Loader\"><a href=\"#Image-Loader\" class=\"headerlink\" title=\"Image Loader\"></a>Image Loader</h2><p>图片加载框架方面当然是功能强大的Fresco。</p>\n<p><a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">fresco</a>: <a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">https://github.com/facebook/fresco</a></p>\n<h2 id=\"O-R-Mapping\"><a href=\"#O-R-Mapping\" class=\"headerlink\" title=\"O/R Mapping\"></a>O/R Mapping</h2><p>数据库方面，由于Realm高效易用的特性，以及它对各大平台的支持，使得它成为数据库框架方面非常好的选择。</p>\n<p><a href=\"https://github.com/realm/realm-java\" target=\"_blank\" rel=\"external\">realm-java</a>: Realm is a mobile database: a replacement for SQLite &amp; ORMs</p>\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h2><p>依赖注入是为了解耦，常见的依赖注入框架有：</p>\n<ul>\n<li>ButterKnife: Bind Android views and callbacks to fields and methods</li>\n<li>Dagger: A fast dependency injector for Android and Java</li>\n</ul>\n<p><a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a></p>\n<p><a href=\"https://github.com/google/dagger\" target=\"_blank\" rel=\"external\">Dagger</a></p>\n<h2 id=\"RxJava\"><a href=\"#RxJava\" class=\"headerlink\" title=\"RxJava\"></a>RxJava</h2><p>RxJava系列主要用来完成异步编程，对于Android开发而言常用的框架有：</p>\n<ul>\n<li>RxJava: A library for composing asynchronous and event-based programs using observable sequences for the Java VM.</li>\n<li>RxAndroid: RxJava bindings for Android</li>\n</ul>\n<p><a href=\"https://github.com/ReactiveX/RxJava\" target=\"_blank\" rel=\"external\">RxJava</a></p>\n<p><a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">RxAndroid</a> </p>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON序列化与反序列化也是非常常见的操作，JSON解析常见的框架有：</p>\n<ul>\n<li>gson：A Java serialization/deserialization library to convert Java Objects into JSON and back</li>\n<li>fastjson: A fast JSON parser/generator for Java </li>\n</ul>\n<p><a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">gson</a></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>随着前端技术的发展，跨平台开发技术也逐渐成熟起来，常见的跨平台框架有：</p>\n<ul>\n<li>React Native: A framework for building native apps with React</li>\n<li>Weex: A framework for building Mobile cross-platform UI</li>\n</ul>\n<p>我们公司目前使用的React Native。</p>\n<p><a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"external\">react-native</a></p>\n<h2 id=\"Android-Plugin\"><a href=\"#Android-Plugin\" class=\"headerlink\" title=\"Android Plugin\"></a>Android Plugin</h2><p>Android的插件化技术也是近两年很火热的技术，涌现了很多优秀的框架。主流的插件化框架有：</p>\n<ul>\n<li>DynamicAPK</li>\n<li>AndroidDynamicLoader</li>\n<li>dynamic-load-apk</li>\n<li>android-pluginmgr</li>\n<li>DroidPlugin：A plugin framework on android,Run any third-party apk without installation, modification or repackage</li>\n</ul>\n<p><a href=\"https://github.com/DroidPluginTeam/DroidPlugin\" target=\"_blank\" rel=\"external\">DroidPlugin</a></p>\n<h2 id=\"Android-Hot-Fix\"><a href=\"#Android-Hot-Fix\" class=\"headerlink\" title=\"Android Hot Fix\"></a>Android Hot Fix</h2><p>客户端并不能像前端那样即写即发，所以热修复技术就显得非常有价值，尤其是在遭遇重大线上bug的时候，主流的热修复框架有：</p>\n<ul>\n<li>Dexposed</li>\n<li>AndFix</li>\n<li>Nuwa</li>\n<li>HotFix</li>\n<li>DroidFix</li>\n<li>AnoleFix</li>\n<li>Amigo</li>\n<li>Tinker</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本系列文章主要分析各类开源框架的实现，当然这些被选中的框架也是我们在技术选型中使用最广泛的框架。</p>\n<p>注：以下都是应用非常广泛的开源框架，可以作为大家技术选型的参考。另外，由于精力有限，不可能对每个框架都做细致的分析<br>，这些会挑选笔者有过深入实践，理解相对比较深入的框架进行分析。</p>","more":"<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，热爱编程，技术栈主要涉及以下几个方面</p>\n<ul>\n<li>Android/Linux</li>\n<li>Java/Kotlin/JVM</li>\n<li>Python</li>\n<li>JavaScript/React/ReactNative</li>\n<li>DataStructure/Algorithm</li>\n</ul>\n<p>文章首发于<a href=\"https://github.com/guoxiaoxing\" target=\"_blank\" rel=\"external\">Github</a>，后续也会同步在<a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">简书</a>与<br><a href=\"http://blog.csdn.net/allenwells\" target=\"_blank\" rel=\"external\">CSDN</a>等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。</p>\n</blockquote>\n<h1 id=\"Android-Open-Framwork-Analysis\"><a href=\"#Android-Open-Framwork-Analysis\" class=\"headerlink\" title=\"Android Open Framwork Analysis\"></a>Android Open Framwork Analysis</h1><p>本系列文章主要分析各类开源框架的实现，当然这些被选中的框架也是我们在技术选型中使用最广泛的框架。</p>\n<p>注：以下都是应用非常广泛的开源框架，可以作为大家技术选型的参考。另外，由于精力有限，不可能对每个框架都做细致的分析<br>，这些会挑选笔者有过深入实践，理解相对比较深入的框架进行分析。</p>\n<h2 id=\"Networking\"><a href=\"#Networking\" class=\"headerlink\" title=\"Networking\"></a>Networking</h2><p>网络请求框架方面我们用的是khttp+etrofit，当然也有同学反映Retrofit使用起来不是很简便，这个时候你可以使用okhttp-OkGo，chuck等<br>这些封装库来简化调用过程。</p>\n<ul>\n<li>okhttp: An HTTP+HTTP/2 client for Android and Java applications</li>\n<li>retrofit: Type-safe HTTP client for Android and Java by Square, Inc.</li>\n</ul>\n<p><a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">okhttp</a><br><a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">retrofit</a></p>\n<h2 id=\"Image-Loader\"><a href=\"#Image-Loader\" class=\"headerlink\" title=\"Image Loader\"></a>Image Loader</h2><p>图片加载框架方面当然是功能强大的Fresco。</p>\n<p><a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">fresco</a>: <a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">https://github.com/facebook/fresco</a></p>\n<h2 id=\"O-R-Mapping\"><a href=\"#O-R-Mapping\" class=\"headerlink\" title=\"O/R Mapping\"></a>O/R Mapping</h2><p>数据库方面，由于Realm高效易用的特性，以及它对各大平台的支持，使得它成为数据库框架方面非常好的选择。</p>\n<p><a href=\"https://github.com/realm/realm-java\" target=\"_blank\" rel=\"external\">realm-java</a>: Realm is a mobile database: a replacement for SQLite &amp; ORMs</p>\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h2><p>依赖注入是为了解耦，常见的依赖注入框架有：</p>\n<ul>\n<li>ButterKnife: Bind Android views and callbacks to fields and methods</li>\n<li>Dagger: A fast dependency injector for Android and Java</li>\n</ul>\n<p><a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a></p>\n<p><a href=\"https://github.com/google/dagger\" target=\"_blank\" rel=\"external\">Dagger</a></p>\n<h2 id=\"RxJava\"><a href=\"#RxJava\" class=\"headerlink\" title=\"RxJava\"></a>RxJava</h2><p>RxJava系列主要用来完成异步编程，对于Android开发而言常用的框架有：</p>\n<ul>\n<li>RxJava: A library for composing asynchronous and event-based programs using observable sequences for the Java VM.</li>\n<li>RxAndroid: RxJava bindings for Android</li>\n</ul>\n<p><a href=\"https://github.com/ReactiveX/RxJava\" target=\"_blank\" rel=\"external\">RxJava</a></p>\n<p><a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">RxAndroid</a> </p>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON序列化与反序列化也是非常常见的操作，JSON解析常见的框架有：</p>\n<ul>\n<li>gson：A Java serialization/deserialization library to convert Java Objects into JSON and back</li>\n<li>fastjson: A fast JSON parser/generator for Java </li>\n</ul>\n<p><a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">gson</a></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>随着前端技术的发展，跨平台开发技术也逐渐成熟起来，常见的跨平台框架有：</p>\n<ul>\n<li>React Native: A framework for building native apps with React</li>\n<li>Weex: A framework for building Mobile cross-platform UI</li>\n</ul>\n<p>我们公司目前使用的React Native。</p>\n<p><a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"external\">react-native</a></p>\n<h2 id=\"Android-Plugin\"><a href=\"#Android-Plugin\" class=\"headerlink\" title=\"Android Plugin\"></a>Android Plugin</h2><p>Android的插件化技术也是近两年很火热的技术，涌现了很多优秀的框架。主流的插件化框架有：</p>\n<ul>\n<li>DynamicAPK</li>\n<li>AndroidDynamicLoader</li>\n<li>dynamic-load-apk</li>\n<li>android-pluginmgr</li>\n<li>DroidPlugin：A plugin framework on android,Run any third-party apk without installation, modification or repackage</li>\n</ul>\n<p><a href=\"https://github.com/DroidPluginTeam/DroidPlugin\" target=\"_blank\" rel=\"external\">DroidPlugin</a></p>\n<h2 id=\"Android-Hot-Fix\"><a href=\"#Android-Hot-Fix\" class=\"headerlink\" title=\"Android Hot Fix\"></a>Android Hot Fix</h2><p>客户端并不能像前端那样即写即发，所以热修复技术就显得非常有价值，尤其是在遭遇重大线上bug的时候，主流的热修复框架有：</p>\n<ul>\n<li>Dexposed</li>\n<li>AndFix</li>\n<li>Nuwa</li>\n<li>HotFix</li>\n<li>DroidFix</li>\n<li>AnoleFix</li>\n<li>Amigo</li>\n<li>Tinker</li>\n</ul>"},{"title":"WebView三部曲：代码交互","date":"2016-07-30T16:00:00.000Z","_content":"\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n<!-- more -->\n\n# WebView三部曲：基本用法\n\n作者: 郭孝星  \n邮箱: guoxiaoxingse@gmail.com  \n博客: https://guoxiaoxing.github.io/  \n简书: http://www.jianshu.com/users/66a47e04215b/latest_articles\n\n**关于作者**\n\n>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。\n\n**关于文章**\n\n>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问\n题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文\n章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n\nWebView也是Android View的一种, 我们通常用它来在应用内部展示网页, 和以往一样, 我们先来简单看一下它的基本用法。\n\n添加网络权限\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n在布局中添加WebView\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<WebView  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/webview\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n/>\n```\n\n使用WebView加载网页\n\n```\nWebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.loadUrl(\"http://www.example.com\");\n```\n\n以上就是WebView的简单用法, 相比大家已经十分熟悉, 下面我们就来逐一看看WebView的其他特性。\n\n# 一 WebView基本组件\n\n了解了基本用法, 我们对WebView就有了大致的印象, 下面我们来看看构建Web应用的三个重要组件。\n\n## 1.1 WebSettings\n\nWebSettings用来对WebView做各种设置, 你可以这样获取WebSettings:\n\n```java\nWebSettings webSettings = mWebView .getSettings();\n```\n\nWebSettings的常见设置如下所示:\n\nJS处理\n\n- setJavaScriptEnabled(true);  //支持js\n- setPluginsEnabled(true);  //支持插件 \n- setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 \n\n缩放处理\n\n- setUseWideViewPort(true);  //将图片调整到适合webview的大小 \n- setLoadWithOverviewMode(true); // 缩放至屏幕的大小\n- setSupportZoom(true);  //支持缩放，默认为true。是下面那个的前提。\n- setBuiltInZoomControls(true); //设置内置的缩放控件。 这个取决于setSupportZoom(), 若setSupportZoom(false)，则该WebView不可缩放，这个不管设置什么都不能缩放。\n- setDisplayZoomControls(false); //隐藏原生的缩放控件\n\n内容布局\n\n- setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局\n- supportMultipleWindows(); //多窗口 \n\n文件缓存\n\n- setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 \n- setAllowFileAccess(true);  //设置可以访问文件 \n\n其他设置\n\n- setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点\n- setLoadsImagesAutomatically(true); //支持自动加载图片\n- setDefaultTextEncodingName(\"utf-8\"); //设置编码格式\n- setPluginState(PluginState.OFF); //设置是否支持flash插件\n- setDefaultFontSize(20); //设置默认字体大小\n\n## 1.2 WebViewClient\n\nWebViewClient用来帮助WebView处理各种通知, 请求事件。我们通过继承WebViewClient并重载它的方法可以实现不同功能的定制。具体如下所示:\n\n- shouldOverrideUrlLoading(WebView view, String url) //在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。比如获取url，查看url.contains(“add”)，进行添加操作\n \n- shouldOverrideKeyEvent(WebView view, KeyEvent event) //处理在浏览器中的按键事件。 \n\n- onPageStarted(WebView view, String url, Bitmap favicon) //开始载入页面时调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。 \n\n- onPageFinished(WebView view, String url) //在页面加载结束时调用, 我们可以关闭loading 条，切换程序动作。 \n\n- onLoadResource(WebView view, String url) //在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 \n\n- onReceivedError(WebView view, int errorCode, String description, String failingUrl) //报告错误信息 \n\n- doUpdateVisitedHistory(WebView view, String url, boolean isReload) //更新历史记录 \n\n- onFormResubmission(WebView view, Message dontResend, Message resend) //应用程序重新请求网页数据\n\n- onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm) //获取返回信息授权请求 \n\n- onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //让webview处理https请求。\n\n- onScaleChanged(WebView view, float oldScale, float newScale) //WebView发生改变时调用\n\n- onUnhandledKeyEvent(WebView view, KeyEvent event) //Key事件未被加载时调用\n\n## 1.3 WebChromeClient\n\nWebChromeClient用来帮助WebView处理JS的对话框、网址图标、网址标题和加载进度等。同样地, 通过继承WebChromeClient并重载它的方法也可以实现不同功能的定制, 如下所示:\n\n- public void onProgressChanged(WebView view, int newProgress); //获得网页的加载进度，显示在右上角的TextView控件中\n\n- public void onReceivedTitle(WebView view, String title); //获取Web页中的title用来设置自己界面中的title, 当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为\"找不到该网页\",\n\n- public void onReceivedIcon(WebView view, Bitmap icon); //获取Web页中的icon\n\n- public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg);\n\n- public void onCloseWindow(WebView window);\n\n- public boolean onJsAlert(WebView view, String url, String message, JsResult result); //处理alert弹出框，html 弹框的一种方式\n\n- public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) //处理confirm弹出框\n\n- public boolean onJsConfirm(WebView view, String url, String message, JsResult result); //处理prompt弹出框\n\n# 二 WebView生命周期\n\n## 2.1 onResume()  \n\nWebView为活跃状态时回调，可以正常执行网页的响应。\n\n## 2.2 onPause() \n\nWebView被切换到后台时回调, 页面被失去焦点, 变成不可见状态，onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。\n\n## 2.3 pauseTimers() \n\n当应用程序被切换到后台时回调，该方法针对全应用程序的WebView，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。\n\n## 2.4 resumeTimers()\n\n恢复pauseTimers时的动作。\n\n## 2.5 destroy() \n\n关闭了Activity时回调, WebView调用destory时, WebView仍绑定在Activity上.这是由于自定义WebView构建时传入了该Activity的context对象, 因此需要先从父\n容器中移除WebView, 然后再销毁webview。\n\n```java\nmRootLayout.removeView(webView);  \nmWebView.destroy();\n```\n\n# 三 WebView页面导航\n\n## 3.1 页面跳转\n\n当我们在WebView点击链接时, 默认的WebView会直接跳转到别的浏览器中, 如果想要实现在WebView内跳转就需要设置WebViewClient, 下面我们先来\n说说WebView、WebViewClient、WebChromeClient三者的区别。\n\n- WebView: 主要负责解析和渲染网页\n- WebViewClient: 辅助WebView处理各种通知和请求事件\n- WebChromeClient: 辅助WebView处理JavaScript中的对话框, 网址图标和标题等\n\n如果我们想控制不同链接的跳转方式, 我们需要继承WebViewClient重写shouldOverrideUrlLoading()方法\n\n```java\n    static class CustomWebViewClient extends WebViewClient {\n\n        private Context mContext;\n\n        public CustomWebViewClient(Context context) {\n            mContext = context;\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            if (Uri.parse(url).getHost().equals(\"github.com/guoxiaoxing\")) {\n                //如果是自己站点的链接, 则用本地WebView跳转\n                return false;\n            }\n            //如果不是自己的站点则launch别的Activity来处理\n            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n            mContext.startActivity(intent);\n            return true;\n        }\n    }\n```\n\n关于shouldOverrideUrlLoading()方法的两点说明:\n\n1 方法返回值\n\n返回true: Android 系统会处理URL, 一般是唤起系统浏览器。\n返回false: 当前 WebView 处理URL。\n\n由于默认放回false, 如果我们只想在WebView内处理链接跳转只需要设置mWebView.setWebViewClient(new WebViewClient())即可\n\n```java\n/** \n     * Give the host application a chance to take over the control when a new \n     * url is about to be loaded in the current WebView. If WebViewClient is not \n     * provided, by default WebView will ask Activity Manager to choose the \n     * proper handler for the url. If WebViewClient is provided, return true \n     * means the host application handles the url, while return false means the \n     * current WebView handles the url. \n     * This method is not called for requests using the POST \"method\". \n     * \n     * @param view The WebView that is initiating the callback. \n     * @param url The url to be loaded. \n     * @return True if the host application wants to leave the current WebView \n     *         and handle the url itself, otherwise return false. \n     */  \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {  \n        return false;  \n    }  \n```\n\n2 方法deprecated问题\n\nshouldOverrideUrlLoading()方法在API >= 24时被标记deprecated, 它的替代方法是\n\n```\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n            view.loadUrl(request.toString());\n            return true;\n        }\n```\n\n但是public boolean shouldOverrideUrlLoading(WebView view, String url)支持更广泛的API我们在使用的时候还是它, \n关于这两个方法的讨论可以参见:\n\nhttp://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead  \nhttp://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest\n\n## 3.2 页面回退\n\nAndroid的返回键, 如果想要实现WebView内网页的回退, 可以重写onKeyEvent()方法。\n\n```java\n@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n    // Check if the key event was the Back button and if there's history\n    if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack()) {\n        myWebView.goBack();\n        return true;\n    }\n    // If it wasn't the Back key or there's no web page history, bubble up to the default\n    // system behavior (probably exit the activity)\n    return super.onKeyDown(keyCode, event);\n}\n```\n\n## 3.3 页面滑动\n\n关于页面滑动, 我们在做下拉刷新等功能时, 经常会去判断WebView是否滚动到顶部或者滚动到底部。\n\n我们先来看一看三个判断高度的方法\n\n```java\ngetScrollY();\n```\n\n该方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.\n\n```java\ngetHeight();\ngetBottom();\n```\n\n该方法都返回当前WebView这个容器的高度\n\n```\ngetContentHeight(); \n```\n\n返回的是整个html的高度, 但并不等同于当前整个页面的高度, 因为WebView有缩放功能, 所以当前整个页面的高度实际上应该是原始html的高度\n再乘上缩放比例. 因此, 判断方法是:\n\n```java\nif (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) {\n    //已经处于底端\n}\n\nif(webView.getScrollY() == 0){\n    //处于顶端\n}\n```\n\n以上这个方法也是我们常用的方法, 不过从API 17开始, mWebView.getScale()被标记为deprecated\n\n>This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions \nbetween the web rendering and UI threads; prefer onScaleChanged(WebView, \n\n因为scale的获取可以用一下方式:\n\n```java\npublic class CustomWebView extends WebView {\n\npublic CustomWebView(Context context) {\n    super(context);\n    setWebViewClient(new WebViewClient() {\n        @Override\n        public void onScaleChanged(WebView view, float oldScale, float newScale) {\n            super.onScaleChanged(view, oldScale, newScale);\n            mCurrentScale = newScale\n        }\n    });\n}\n```\n\n关于mWebView.getScale()的讨论可以参见:\n\nhttps://developer.android.com/reference/android/webkit/WebView.html\n\nhttp://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4\n\n# 三 WebView缓存实现\n\n在项目中如果使用到WebView控件, 当加载html页面时, 会在/data/data/包名目录下生成database与cache两个文件夹。\n请求的url记录是保存在WebViewCache.db, 而url的内容是保存在WebViewCache文件夹下。\n\n控制缓存行为\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n//优先使用缓存\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); \n//只在缓存中读取\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);\n/不使用缓存\nWwebSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);\n```\n\n清除缓存\n\n```java\nclearCache(true); //清除网页访问留下的缓存，由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.\nclearHistory (); //清除当前webview访问的历史记录，只会webview访问历史记录里的所有记录除了当前访问记录.\nclearFormData () //这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据。\n```\n\n# 四 WebView Cookies\n\n添加Cookies\n\n```java\npublic void synCookies() {\n    if (!CacheUtils.isLogin(this)) return;\n    CookieSyncManager.createInstance(this);\n    CookieManager cookieManager = CookieManager.getInstance();\n    cookieManager.setAcceptCookie(true);\n    cookieManager.removeSessionCookie();//移除\n    String cookies = PreferenceHelper.readString(this, AppConfig.COOKIE_KEY, AppConfig.COOKIE_KEY);\n    KJLoger.debug(cookies);\n    cookieManager.setCookie(url, cookies);\n    CookieSyncManager.getInstance().sync();\n}\n```\n\n清除Cookies\n\n```java\nCookieManager.getInstance().removeSessionCookie();\n```\n\n# 五 WebView本地资源访问\n\n当我们在WebView中加载出从web服务器上拿取的内容时，是无法访问本地资源的，如assets目录下的图片资源，因为这样的行为属于跨域行为（Cross-Domain），而WebView是禁止\n的。解决这个问题的方案是把html内容先下载到本地，然后使用loadDataWithBaseURL加载html。这样就可以在html中使用 file:///android_asset/xxx.png 的链接来引用包里\n面assets下的资源了。\n\n```java\nprivate void loadWithAccessLocal(final String htmlUrl) {\n    new Thread(new Runnable() {\n        public void run() {\n            try {\n                final String htmlStr = NetService.fetchHtml(htmlUrl);\n                if (htmlStr != null) {\n                    TaskExecutor.runTaskOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            loadDataWithBaseURL(htmlUrl, htmlStr, \"text/html\", \"UTF-8\", \"\");\n                        }\n                    });\n                    return;\n                }\n            } catch (Exception e) {\n                Log.e(\"Exception:\" + e.getMessage());\n            }\n\n            TaskExecutor.runTaskOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    onPageLoadedError(-1, \"fetch html failed\");\n                }\n            });\n        }\n    }).start();\n}\n```\n\n**注意**\n\n- 从网络上下载html的过程应放在工作线程中\n- html下载成功后渲染出html的步骤应放在UI主线程，不然WebView会报错\n- html下载失败则可以使用我们前面讲述的方法来显示自定义错误界面","source":"_posts/WebView三部曲：基本用法.md","raw":"title: WebView三部曲：代码交互\ndate: 2016-7-31 00:00:00\ntags:\n---\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n<!-- more -->\n\n# WebView三部曲：基本用法\n\n作者: 郭孝星  \n邮箱: guoxiaoxingse@gmail.com  \n博客: https://guoxiaoxing.github.io/  \n简书: http://www.jianshu.com/users/66a47e04215b/latest_articles\n\n**关于作者**\n\n>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。\n\n**关于文章**\n\n>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问\n题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文\n章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n\nWebView也是Android View的一种, 我们通常用它来在应用内部展示网页, 和以往一样, 我们先来简单看一下它的基本用法。\n\n添加网络权限\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n在布局中添加WebView\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<WebView  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/webview\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n/>\n```\n\n使用WebView加载网页\n\n```\nWebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.loadUrl(\"http://www.example.com\");\n```\n\n以上就是WebView的简单用法, 相比大家已经十分熟悉, 下面我们就来逐一看看WebView的其他特性。\n\n# 一 WebView基本组件\n\n了解了基本用法, 我们对WebView就有了大致的印象, 下面我们来看看构建Web应用的三个重要组件。\n\n## 1.1 WebSettings\n\nWebSettings用来对WebView做各种设置, 你可以这样获取WebSettings:\n\n```java\nWebSettings webSettings = mWebView .getSettings();\n```\n\nWebSettings的常见设置如下所示:\n\nJS处理\n\n- setJavaScriptEnabled(true);  //支持js\n- setPluginsEnabled(true);  //支持插件 \n- setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 \n\n缩放处理\n\n- setUseWideViewPort(true);  //将图片调整到适合webview的大小 \n- setLoadWithOverviewMode(true); // 缩放至屏幕的大小\n- setSupportZoom(true);  //支持缩放，默认为true。是下面那个的前提。\n- setBuiltInZoomControls(true); //设置内置的缩放控件。 这个取决于setSupportZoom(), 若setSupportZoom(false)，则该WebView不可缩放，这个不管设置什么都不能缩放。\n- setDisplayZoomControls(false); //隐藏原生的缩放控件\n\n内容布局\n\n- setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局\n- supportMultipleWindows(); //多窗口 \n\n文件缓存\n\n- setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 \n- setAllowFileAccess(true);  //设置可以访问文件 \n\n其他设置\n\n- setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点\n- setLoadsImagesAutomatically(true); //支持自动加载图片\n- setDefaultTextEncodingName(\"utf-8\"); //设置编码格式\n- setPluginState(PluginState.OFF); //设置是否支持flash插件\n- setDefaultFontSize(20); //设置默认字体大小\n\n## 1.2 WebViewClient\n\nWebViewClient用来帮助WebView处理各种通知, 请求事件。我们通过继承WebViewClient并重载它的方法可以实现不同功能的定制。具体如下所示:\n\n- shouldOverrideUrlLoading(WebView view, String url) //在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。比如获取url，查看url.contains(“add”)，进行添加操作\n \n- shouldOverrideKeyEvent(WebView view, KeyEvent event) //处理在浏览器中的按键事件。 \n\n- onPageStarted(WebView view, String url, Bitmap favicon) //开始载入页面时调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。 \n\n- onPageFinished(WebView view, String url) //在页面加载结束时调用, 我们可以关闭loading 条，切换程序动作。 \n\n- onLoadResource(WebView view, String url) //在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 \n\n- onReceivedError(WebView view, int errorCode, String description, String failingUrl) //报告错误信息 \n\n- doUpdateVisitedHistory(WebView view, String url, boolean isReload) //更新历史记录 \n\n- onFormResubmission(WebView view, Message dontResend, Message resend) //应用程序重新请求网页数据\n\n- onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm) //获取返回信息授权请求 \n\n- onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //让webview处理https请求。\n\n- onScaleChanged(WebView view, float oldScale, float newScale) //WebView发生改变时调用\n\n- onUnhandledKeyEvent(WebView view, KeyEvent event) //Key事件未被加载时调用\n\n## 1.3 WebChromeClient\n\nWebChromeClient用来帮助WebView处理JS的对话框、网址图标、网址标题和加载进度等。同样地, 通过继承WebChromeClient并重载它的方法也可以实现不同功能的定制, 如下所示:\n\n- public void onProgressChanged(WebView view, int newProgress); //获得网页的加载进度，显示在右上角的TextView控件中\n\n- public void onReceivedTitle(WebView view, String title); //获取Web页中的title用来设置自己界面中的title, 当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为\"找不到该网页\",\n\n- public void onReceivedIcon(WebView view, Bitmap icon); //获取Web页中的icon\n\n- public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg);\n\n- public void onCloseWindow(WebView window);\n\n- public boolean onJsAlert(WebView view, String url, String message, JsResult result); //处理alert弹出框，html 弹框的一种方式\n\n- public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) //处理confirm弹出框\n\n- public boolean onJsConfirm(WebView view, String url, String message, JsResult result); //处理prompt弹出框\n\n# 二 WebView生命周期\n\n## 2.1 onResume()  \n\nWebView为活跃状态时回调，可以正常执行网页的响应。\n\n## 2.2 onPause() \n\nWebView被切换到后台时回调, 页面被失去焦点, 变成不可见状态，onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。\n\n## 2.3 pauseTimers() \n\n当应用程序被切换到后台时回调，该方法针对全应用程序的WebView，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。\n\n## 2.4 resumeTimers()\n\n恢复pauseTimers时的动作。\n\n## 2.5 destroy() \n\n关闭了Activity时回调, WebView调用destory时, WebView仍绑定在Activity上.这是由于自定义WebView构建时传入了该Activity的context对象, 因此需要先从父\n容器中移除WebView, 然后再销毁webview。\n\n```java\nmRootLayout.removeView(webView);  \nmWebView.destroy();\n```\n\n# 三 WebView页面导航\n\n## 3.1 页面跳转\n\n当我们在WebView点击链接时, 默认的WebView会直接跳转到别的浏览器中, 如果想要实现在WebView内跳转就需要设置WebViewClient, 下面我们先来\n说说WebView、WebViewClient、WebChromeClient三者的区别。\n\n- WebView: 主要负责解析和渲染网页\n- WebViewClient: 辅助WebView处理各种通知和请求事件\n- WebChromeClient: 辅助WebView处理JavaScript中的对话框, 网址图标和标题等\n\n如果我们想控制不同链接的跳转方式, 我们需要继承WebViewClient重写shouldOverrideUrlLoading()方法\n\n```java\n    static class CustomWebViewClient extends WebViewClient {\n\n        private Context mContext;\n\n        public CustomWebViewClient(Context context) {\n            mContext = context;\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            if (Uri.parse(url).getHost().equals(\"github.com/guoxiaoxing\")) {\n                //如果是自己站点的链接, 则用本地WebView跳转\n                return false;\n            }\n            //如果不是自己的站点则launch别的Activity来处理\n            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n            mContext.startActivity(intent);\n            return true;\n        }\n    }\n```\n\n关于shouldOverrideUrlLoading()方法的两点说明:\n\n1 方法返回值\n\n返回true: Android 系统会处理URL, 一般是唤起系统浏览器。\n返回false: 当前 WebView 处理URL。\n\n由于默认放回false, 如果我们只想在WebView内处理链接跳转只需要设置mWebView.setWebViewClient(new WebViewClient())即可\n\n```java\n/** \n     * Give the host application a chance to take over the control when a new \n     * url is about to be loaded in the current WebView. If WebViewClient is not \n     * provided, by default WebView will ask Activity Manager to choose the \n     * proper handler for the url. If WebViewClient is provided, return true \n     * means the host application handles the url, while return false means the \n     * current WebView handles the url. \n     * This method is not called for requests using the POST \"method\". \n     * \n     * @param view The WebView that is initiating the callback. \n     * @param url The url to be loaded. \n     * @return True if the host application wants to leave the current WebView \n     *         and handle the url itself, otherwise return false. \n     */  \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {  \n        return false;  \n    }  \n```\n\n2 方法deprecated问题\n\nshouldOverrideUrlLoading()方法在API >= 24时被标记deprecated, 它的替代方法是\n\n```\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n            view.loadUrl(request.toString());\n            return true;\n        }\n```\n\n但是public boolean shouldOverrideUrlLoading(WebView view, String url)支持更广泛的API我们在使用的时候还是它, \n关于这两个方法的讨论可以参见:\n\nhttp://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead  \nhttp://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest\n\n## 3.2 页面回退\n\nAndroid的返回键, 如果想要实现WebView内网页的回退, 可以重写onKeyEvent()方法。\n\n```java\n@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n    // Check if the key event was the Back button and if there's history\n    if ((keyCode == KeyEvent.KEYCODE_BACK) && myWebView.canGoBack()) {\n        myWebView.goBack();\n        return true;\n    }\n    // If it wasn't the Back key or there's no web page history, bubble up to the default\n    // system behavior (probably exit the activity)\n    return super.onKeyDown(keyCode, event);\n}\n```\n\n## 3.3 页面滑动\n\n关于页面滑动, 我们在做下拉刷新等功能时, 经常会去判断WebView是否滚动到顶部或者滚动到底部。\n\n我们先来看一看三个判断高度的方法\n\n```java\ngetScrollY();\n```\n\n该方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.\n\n```java\ngetHeight();\ngetBottom();\n```\n\n该方法都返回当前WebView这个容器的高度\n\n```\ngetContentHeight(); \n```\n\n返回的是整个html的高度, 但并不等同于当前整个页面的高度, 因为WebView有缩放功能, 所以当前整个页面的高度实际上应该是原始html的高度\n再乘上缩放比例. 因此, 判断方法是:\n\n```java\nif (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) {\n    //已经处于底端\n}\n\nif(webView.getScrollY() == 0){\n    //处于顶端\n}\n```\n\n以上这个方法也是我们常用的方法, 不过从API 17开始, mWebView.getScale()被标记为deprecated\n\n>This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions \nbetween the web rendering and UI threads; prefer onScaleChanged(WebView, \n\n因为scale的获取可以用一下方式:\n\n```java\npublic class CustomWebView extends WebView {\n\npublic CustomWebView(Context context) {\n    super(context);\n    setWebViewClient(new WebViewClient() {\n        @Override\n        public void onScaleChanged(WebView view, float oldScale, float newScale) {\n            super.onScaleChanged(view, oldScale, newScale);\n            mCurrentScale = newScale\n        }\n    });\n}\n```\n\n关于mWebView.getScale()的讨论可以参见:\n\nhttps://developer.android.com/reference/android/webkit/WebView.html\n\nhttp://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4\n\n# 三 WebView缓存实现\n\n在项目中如果使用到WebView控件, 当加载html页面时, 会在/data/data/包名目录下生成database与cache两个文件夹。\n请求的url记录是保存在WebViewCache.db, 而url的内容是保存在WebViewCache文件夹下。\n\n控制缓存行为\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n//优先使用缓存\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); \n//只在缓存中读取\nwebSettings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);\n/不使用缓存\nWwebSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);\n```\n\n清除缓存\n\n```java\nclearCache(true); //清除网页访问留下的缓存，由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.\nclearHistory (); //清除当前webview访问的历史记录，只会webview访问历史记录里的所有记录除了当前访问记录.\nclearFormData () //这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据。\n```\n\n# 四 WebView Cookies\n\n添加Cookies\n\n```java\npublic void synCookies() {\n    if (!CacheUtils.isLogin(this)) return;\n    CookieSyncManager.createInstance(this);\n    CookieManager cookieManager = CookieManager.getInstance();\n    cookieManager.setAcceptCookie(true);\n    cookieManager.removeSessionCookie();//移除\n    String cookies = PreferenceHelper.readString(this, AppConfig.COOKIE_KEY, AppConfig.COOKIE_KEY);\n    KJLoger.debug(cookies);\n    cookieManager.setCookie(url, cookies);\n    CookieSyncManager.getInstance().sync();\n}\n```\n\n清除Cookies\n\n```java\nCookieManager.getInstance().removeSessionCookie();\n```\n\n# 五 WebView本地资源访问\n\n当我们在WebView中加载出从web服务器上拿取的内容时，是无法访问本地资源的，如assets目录下的图片资源，因为这样的行为属于跨域行为（Cross-Domain），而WebView是禁止\n的。解决这个问题的方案是把html内容先下载到本地，然后使用loadDataWithBaseURL加载html。这样就可以在html中使用 file:///android_asset/xxx.png 的链接来引用包里\n面assets下的资源了。\n\n```java\nprivate void loadWithAccessLocal(final String htmlUrl) {\n    new Thread(new Runnable() {\n        public void run() {\n            try {\n                final String htmlStr = NetService.fetchHtml(htmlUrl);\n                if (htmlStr != null) {\n                    TaskExecutor.runTaskOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            loadDataWithBaseURL(htmlUrl, htmlStr, \"text/html\", \"UTF-8\", \"\");\n                        }\n                    });\n                    return;\n                }\n            } catch (Exception e) {\n                Log.e(\"Exception:\" + e.getMessage());\n            }\n\n            TaskExecutor.runTaskOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    onPageLoadedError(-1, \"fetch html failed\");\n                }\n            });\n        }\n    }).start();\n}\n```\n\n**注意**\n\n- 从网络上下载html的过程应放在工作线程中\n- html下载成功后渲染出html的步骤应放在UI主线程，不然WebView会报错\n- html下载失败则可以使用我们前面讲述的方法来显示自定义错误界面","slug":"WebView三部曲：基本用法","published":1,"updated":"2017-07-12T10:02:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52acn6i0006oncwzy52ec9r","content":"<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"WebView三部曲：基本用法\"><a href=\"#WebView三部曲：基本用法\" class=\"headerlink\" title=\"WebView三部曲：基本用法\"></a>WebView三部曲：基本用法</h1><p>作者: 郭孝星<br>邮箱: guoxiaoxingse@gmail.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>简书: <a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/users/66a47e04215b/latest_articles</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问<br>题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文<br>章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<p>WebView也是Android View的一种, 我们通常用它来在应用内部展示网页, 和以往一样, 我们先来简单看一下它的基本用法。</p>\n<p>添加网络权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>在布局中添加WebView</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WebView</span>  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/webview\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<p>使用WebView加载网页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class=\"line\">myWebView.loadUrl(&quot;http://www.example.com&quot;);</div></pre></td></tr></table></figure>\n<p>以上就是WebView的简单用法, 相比大家已经十分熟悉, 下面我们就来逐一看看WebView的其他特性。</p>\n<h1 id=\"一-WebView基本组件\"><a href=\"#一-WebView基本组件\" class=\"headerlink\" title=\"一 WebView基本组件\"></a>一 WebView基本组件</h1><p>了解了基本用法, 我们对WebView就有了大致的印象, 下面我们来看看构建Web应用的三个重要组件。</p>\n<h2 id=\"1-1-WebSettings\"><a href=\"#1-1-WebSettings\" class=\"headerlink\" title=\"1.1 WebSettings\"></a>1.1 WebSettings</h2><p>WebSettings用来对WebView做各种设置, 你可以这样获取WebSettings:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView .getSettings();</div></pre></td></tr></table></figure>\n<p>WebSettings的常见设置如下所示:</p>\n<p>JS处理</p>\n<ul>\n<li>setJavaScriptEnabled(true);  //支持js</li>\n<li>setPluginsEnabled(true);  //支持插件 </li>\n<li>setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 </li>\n</ul>\n<p>缩放处理</p>\n<ul>\n<li>setUseWideViewPort(true);  //将图片调整到适合webview的大小 </li>\n<li>setLoadWithOverviewMode(true); // 缩放至屏幕的大小</li>\n<li>setSupportZoom(true);  //支持缩放，默认为true。是下面那个的前提。</li>\n<li>setBuiltInZoomControls(true); //设置内置的缩放控件。 这个取决于setSupportZoom(), 若setSupportZoom(false)，则该WebView不可缩放，这个不管设置什么都不能缩放。</li>\n<li>setDisplayZoomControls(false); //隐藏原生的缩放控件</li>\n</ul>\n<p>内容布局</p>\n<ul>\n<li>setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局</li>\n<li>supportMultipleWindows(); //多窗口 </li>\n</ul>\n<p>文件缓存</p>\n<ul>\n<li>setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 </li>\n<li>setAllowFileAccess(true);  //设置可以访问文件 </li>\n</ul>\n<p>其他设置</p>\n<ul>\n<li>setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点</li>\n<li>setLoadsImagesAutomatically(true); //支持自动加载图片</li>\n<li>setDefaultTextEncodingName(“utf-8”); //设置编码格式</li>\n<li>setPluginState(PluginState.OFF); //设置是否支持flash插件</li>\n<li>setDefaultFontSize(20); //设置默认字体大小</li>\n</ul>\n<h2 id=\"1-2-WebViewClient\"><a href=\"#1-2-WebViewClient\" class=\"headerlink\" title=\"1.2 WebViewClient\"></a>1.2 WebViewClient</h2><p>WebViewClient用来帮助WebView处理各种通知, 请求事件。我们通过继承WebViewClient并重载它的方法可以实现不同功能的定制。具体如下所示:</p>\n<ul>\n<li><p>shouldOverrideUrlLoading(WebView view, String url) //在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。比如获取url，查看url.contains(“add”)，进行添加操作</p>\n</li>\n<li><p>shouldOverrideKeyEvent(WebView view, KeyEvent event) //处理在浏览器中的按键事件。 </p>\n</li>\n<li><p>onPageStarted(WebView view, String url, Bitmap favicon) //开始载入页面时调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。 </p>\n</li>\n<li><p>onPageFinished(WebView view, String url) //在页面加载结束时调用, 我们可以关闭loading 条，切换程序动作。 </p>\n</li>\n<li><p>onLoadResource(WebView view, String url) //在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 </p>\n</li>\n<li><p>onReceivedError(WebView view, int errorCode, String description, String failingUrl) //报告错误信息 </p>\n</li>\n<li><p>doUpdateVisitedHistory(WebView view, String url, boolean isReload) //更新历史记录 </p>\n</li>\n<li><p>onFormResubmission(WebView view, Message dontResend, Message resend) //应用程序重新请求网页数据</p>\n</li>\n<li><p>onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm) //获取返回信息授权请求 </p>\n</li>\n<li><p>onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //让webview处理https请求。</p>\n</li>\n<li><p>onScaleChanged(WebView view, float oldScale, float newScale) //WebView发生改变时调用</p>\n</li>\n<li><p>onUnhandledKeyEvent(WebView view, KeyEvent event) //Key事件未被加载时调用</p>\n</li>\n</ul>\n<h2 id=\"1-3-WebChromeClient\"><a href=\"#1-3-WebChromeClient\" class=\"headerlink\" title=\"1.3 WebChromeClient\"></a>1.3 WebChromeClient</h2><p>WebChromeClient用来帮助WebView处理JS的对话框、网址图标、网址标题和加载进度等。同样地, 通过继承WebChromeClient并重载它的方法也可以实现不同功能的定制, 如下所示:</p>\n<ul>\n<li><p>public void onProgressChanged(WebView view, int newProgress); //获得网页的加载进度，显示在右上角的TextView控件中</p>\n</li>\n<li><p>public void onReceivedTitle(WebView view, String title); //获取Web页中的title用来设置自己界面中的title, 当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为”找不到该网页”,</p>\n</li>\n<li><p>public void onReceivedIcon(WebView view, Bitmap icon); //获取Web页中的icon</p>\n</li>\n<li><p>public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg);</p>\n</li>\n<li><p>public void onCloseWindow(WebView window);</p>\n</li>\n<li><p>public boolean onJsAlert(WebView view, String url, String message, JsResult result); //处理alert弹出框，html 弹框的一种方式</p>\n</li>\n<li><p>public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) //处理confirm弹出框</p>\n</li>\n<li><p>public boolean onJsConfirm(WebView view, String url, String message, JsResult result); //处理prompt弹出框</p>\n</li>\n</ul>\n<h1 id=\"二-WebView生命周期\"><a href=\"#二-WebView生命周期\" class=\"headerlink\" title=\"二 WebView生命周期\"></a>二 WebView生命周期</h1><h2 id=\"2-1-onResume\"><a href=\"#2-1-onResume\" class=\"headerlink\" title=\"2.1 onResume()\"></a>2.1 onResume()</h2><p>WebView为活跃状态时回调，可以正常执行网页的响应。</p>\n<h2 id=\"2-2-onPause\"><a href=\"#2-2-onPause\" class=\"headerlink\" title=\"2.2 onPause()\"></a>2.2 onPause()</h2><p>WebView被切换到后台时回调, 页面被失去焦点, 变成不可见状态，onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</p>\n<h2 id=\"2-3-pauseTimers\"><a href=\"#2-3-pauseTimers\" class=\"headerlink\" title=\"2.3 pauseTimers()\"></a>2.3 pauseTimers()</h2><p>当应用程序被切换到后台时回调，该方法针对全应用程序的WebView，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</p>\n<h2 id=\"2-4-resumeTimers\"><a href=\"#2-4-resumeTimers\" class=\"headerlink\" title=\"2.4 resumeTimers()\"></a>2.4 resumeTimers()</h2><p>恢复pauseTimers时的动作。</p>\n<h2 id=\"2-5-destroy\"><a href=\"#2-5-destroy\" class=\"headerlink\" title=\"2.5 destroy()\"></a>2.5 destroy()</h2><p>关闭了Activity时回调, WebView调用destory时, WebView仍绑定在Activity上.这是由于自定义WebView构建时传入了该Activity的context对象, 因此需要先从父<br>容器中移除WebView, 然后再销毁webview。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mRootLayout.removeView(webView);  </div><div class=\"line\">mWebView.destroy();</div></pre></td></tr></table></figure>\n<h1 id=\"三-WebView页面导航\"><a href=\"#三-WebView页面导航\" class=\"headerlink\" title=\"三 WebView页面导航\"></a>三 WebView页面导航</h1><h2 id=\"3-1-页面跳转\"><a href=\"#3-1-页面跳转\" class=\"headerlink\" title=\"3.1 页面跳转\"></a>3.1 页面跳转</h2><p>当我们在WebView点击链接时, 默认的WebView会直接跳转到别的浏览器中, 如果想要实现在WebView内跳转就需要设置WebViewClient, 下面我们先来<br>说说WebView、WebViewClient、WebChromeClient三者的区别。</p>\n<ul>\n<li>WebView: 主要负责解析和渲染网页</li>\n<li>WebViewClient: 辅助WebView处理各种通知和请求事件</li>\n<li>WebChromeClient: 辅助WebView处理JavaScript中的对话框, 网址图标和标题等</li>\n</ul>\n<p>如果我们想控制不同链接的跳转方式, 我们需要继承WebViewClient重写shouldOverrideUrlLoading()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomWebViewClient</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Uri.parse(url).getHost().equals(<span class=\"string\">\"github.com/guoxiaoxing\"</span>)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是自己站点的链接, 则用本地WebView跳转</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//如果不是自己的站点则launch别的Activity来处理</span></div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</div><div class=\"line\">        mContext.startActivity(intent);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于shouldOverrideUrlLoading()方法的两点说明:</p>\n<p>1 方法返回值</p>\n<p>返回true: Android 系统会处理URL, 一般是唤起系统浏览器。<br>返回false: 当前 WebView 处理URL。</p>\n<p>由于默认放回false, 如果我们只想在WebView内处理链接跳转只需要设置mWebView.setWebViewClient(new WebViewClient())即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\">     * Give the host application a chance to take over the control when a new </div><div class=\"line\">     * url is about to be loaded in the current WebView. If WebViewClient is not </div><div class=\"line\">     * provided, by default WebView will ask Activity Manager to choose the </div><div class=\"line\">     * proper handler for the url. If WebViewClient is provided, return true </div><div class=\"line\">     * means the host application handles the url, while return false means the </div><div class=\"line\">     * current WebView handles the url. </div><div class=\"line\">     * This method is not called for requests using the POST \"method\". </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> view The WebView that is initiating the callback. </div><div class=\"line\">     * <span class=\"doctag\">@param</span> url The url to be loaded. </div><div class=\"line\">     * <span class=\"doctag\">@return</span> True if the host application wants to leave the current WebView </div><div class=\"line\">     *         and handle the url itself, otherwise return false. </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>2 方法deprecated问题</p>\n<p>shouldOverrideUrlLoading()方法在API &gt;= 24时被标记deprecated, 它的替代方法是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123;</div><div class=\"line\">    view.loadUrl(request.toString());</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是public boolean shouldOverrideUrlLoading(WebView view, String url)支持更广泛的API我们在使用的时候还是它,<br>关于这两个方法的讨论可以参见:</p>\n<p><a href=\"http://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead</a><br><a href=\"http://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest</a></p>\n<h2 id=\"3-2-页面回退\"><a href=\"#3-2-页面回退\" class=\"headerlink\" title=\"3.2 页面回退\"></a>3.2 页面回退</h2><p>Android的返回键, 如果想要实现WebView内网页的回退, 可以重写onKeyEvent()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Check if the key event was the Back button and if there's history</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; myWebView.canGoBack()) &#123;</div><div class=\"line\">        myWebView.goBack();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// If it wasn't the Back key or there's no web page history, bubble up to the default</span></div><div class=\"line\">    <span class=\"comment\">// system behavior (probably exit the activity)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-页面滑动\"><a href=\"#3-3-页面滑动\" class=\"headerlink\" title=\"3.3 页面滑动\"></a>3.3 页面滑动</h2><p>关于页面滑动, 我们在做下拉刷新等功能时, 经常会去判断WebView是否滚动到顶部或者滚动到底部。</p>\n<p>我们先来看一看三个判断高度的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getScrollY();</div></pre></td></tr></table></figure>\n<p>该方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">getHeight();</div><div class=\"line\">getBottom();</div></pre></td></tr></table></figure>\n<p>该方法都返回当前WebView这个容器的高度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getContentHeight();</div></pre></td></tr></table></figure>\n<p>返回的是整个html的高度, 但并不等同于当前整个页面的高度, 因为WebView有缩放功能, 所以当前整个页面的高度实际上应该是原始html的高度<br>再乘上缩放比例. 因此, 判断方法是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) &#123;</div><div class=\"line\">    <span class=\"comment\">//已经处于底端</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(webView.getScrollY() == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">    <span class=\"comment\">//处于顶端</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上这个方法也是我们常用的方法, 不过从API 17开始, mWebView.getScale()被标记为deprecated</p>\n<blockquote>\n<p>This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions<br>between the web rendering and UI threads; prefer onScaleChanged(WebView, </p>\n</blockquote>\n<p>因为scale的获取可以用一下方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomWebView</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomWebView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScaleChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">float</span> oldScale, <span class=\"keyword\">float</span> newScale)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onScaleChanged(view, oldScale, newScale);</div><div class=\"line\">            mCurrentScale = newScale</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于mWebView.getScale()的讨论可以参见:</p>\n<p><a href=\"https://developer.android.com/reference/android/webkit/WebView.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/webkit/WebView.html</a></p>\n<p><a href=\"http://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4</a></p>\n<h1 id=\"三-WebView缓存实现\"><a href=\"#三-WebView缓存实现\" class=\"headerlink\" title=\"三 WebView缓存实现\"></a>三 WebView缓存实现</h1><p>在项目中如果使用到WebView控件, 当加载html页面时, 会在/data/data/包名目录下生成database与cache两个文件夹。<br>请求的url记录是保存在WebViewCache.db, 而url的内容是保存在WebViewCache文件夹下。</p>\n<p>控制缓存行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView.getSettings();</div><div class=\"line\"><span class=\"comment\">//优先使用缓存</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); </div><div class=\"line\"><span class=\"comment\">//只在缓存中读取</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);</div><div class=\"line\">/不使用缓存</div><div class=\"line\">WwebSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);</div></pre></td></tr></table></figure>\n<p>清除缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">clearCache(<span class=\"keyword\">true</span>); <span class=\"comment\">//清除网页访问留下的缓存，由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.</span></div><div class=\"line\">clearHistory (); <span class=\"comment\">//清除当前webview访问的历史记录，只会webview访问历史记录里的所有记录除了当前访问记录.</span></div><div class=\"line\">clearFormData () <span class=\"comment\">//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据。</span></div></pre></td></tr></table></figure>\n<h1 id=\"四-WebView-Cookies\"><a href=\"#四-WebView-Cookies\" class=\"headerlink\" title=\"四 WebView Cookies\"></a>四 WebView Cookies</h1><p>添加Cookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">synCookies</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!CacheUtils.isLogin(<span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span>;</div><div class=\"line\">    CookieSyncManager.createInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">    CookieManager cookieManager = CookieManager.getInstance();</div><div class=\"line\">    cookieManager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">    cookieManager.removeSessionCookie();<span class=\"comment\">//移除</span></div><div class=\"line\">    String cookies = PreferenceHelper.readString(<span class=\"keyword\">this</span>, AppConfig.COOKIE_KEY, AppConfig.COOKIE_KEY);</div><div class=\"line\">    KJLoger.debug(cookies);</div><div class=\"line\">    cookieManager.setCookie(url, cookies);</div><div class=\"line\">    CookieSyncManager.getInstance().sync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>清除Cookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager.getInstance().removeSessionCookie();</div></pre></td></tr></table></figure>\n<h1 id=\"五-WebView本地资源访问\"><a href=\"#五-WebView本地资源访问\" class=\"headerlink\" title=\"五 WebView本地资源访问\"></a>五 WebView本地资源访问</h1><p>当我们在WebView中加载出从web服务器上拿取的内容时，是无法访问本地资源的，如assets目录下的图片资源，因为这样的行为属于跨域行为（Cross-Domain），而WebView是禁止<br>的。解决这个问题的方案是把html内容先下载到本地，然后使用loadDataWithBaseURL加载html。这样就可以在html中使用 file:///android_asset/xxx.png 的链接来引用包里<br>面assets下的资源了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadWithAccessLocal</span><span class=\"params\">(<span class=\"keyword\">final</span> String htmlUrl)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> String htmlStr = NetService.fetchHtml(htmlUrl);</div><div class=\"line\">                <span class=\"keyword\">if</span> (htmlStr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    TaskExecutor.runTaskOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                            loadDataWithBaseURL(htmlUrl, htmlStr, <span class=\"string\">\"text/html\"</span>, <span class=\"string\">\"UTF-8\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"Exception:\"</span> + e.getMessage());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            TaskExecutor.runTaskOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    onPageLoadedError(-<span class=\"number\">1</span>, <span class=\"string\">\"fetch html failed\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ul>\n<li>从网络上下载html的过程应放在工作线程中</li>\n<li>html下载成功后渲染出html的步骤应放在UI主线程，不然WebView会报错</li>\n<li>html下载失败则可以使用我们前面讲述的方法来显示自定义错误界面</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>","more":"<h1 id=\"WebView三部曲：基本用法\"><a href=\"#WebView三部曲：基本用法\" class=\"headerlink\" title=\"WebView三部曲：基本用法\"></a>WebView三部曲：基本用法</h1><p>作者: 郭孝星<br>邮箱: guoxiaoxingse@gmail.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>简书: <a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/users/66a47e04215b/latest_articles</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问<br>题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文<br>章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<p>WebView也是Android View的一种, 我们通常用它来在应用内部展示网页, 和以往一样, 我们先来简单看一下它的基本用法。</p>\n<p>添加网络权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>在布局中添加WebView</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WebView</span>  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/webview\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<p>使用WebView加载网页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class=\"line\">myWebView.loadUrl(&quot;http://www.example.com&quot;);</div></pre></td></tr></table></figure>\n<p>以上就是WebView的简单用法, 相比大家已经十分熟悉, 下面我们就来逐一看看WebView的其他特性。</p>\n<h1 id=\"一-WebView基本组件\"><a href=\"#一-WebView基本组件\" class=\"headerlink\" title=\"一 WebView基本组件\"></a>一 WebView基本组件</h1><p>了解了基本用法, 我们对WebView就有了大致的印象, 下面我们来看看构建Web应用的三个重要组件。</p>\n<h2 id=\"1-1-WebSettings\"><a href=\"#1-1-WebSettings\" class=\"headerlink\" title=\"1.1 WebSettings\"></a>1.1 WebSettings</h2><p>WebSettings用来对WebView做各种设置, 你可以这样获取WebSettings:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView .getSettings();</div></pre></td></tr></table></figure>\n<p>WebSettings的常见设置如下所示:</p>\n<p>JS处理</p>\n<ul>\n<li>setJavaScriptEnabled(true);  //支持js</li>\n<li>setPluginsEnabled(true);  //支持插件 </li>\n<li>setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 </li>\n</ul>\n<p>缩放处理</p>\n<ul>\n<li>setUseWideViewPort(true);  //将图片调整到适合webview的大小 </li>\n<li>setLoadWithOverviewMode(true); // 缩放至屏幕的大小</li>\n<li>setSupportZoom(true);  //支持缩放，默认为true。是下面那个的前提。</li>\n<li>setBuiltInZoomControls(true); //设置内置的缩放控件。 这个取决于setSupportZoom(), 若setSupportZoom(false)，则该WebView不可缩放，这个不管设置什么都不能缩放。</li>\n<li>setDisplayZoomControls(false); //隐藏原生的缩放控件</li>\n</ul>\n<p>内容布局</p>\n<ul>\n<li>setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局</li>\n<li>supportMultipleWindows(); //多窗口 </li>\n</ul>\n<p>文件缓存</p>\n<ul>\n<li>setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 </li>\n<li>setAllowFileAccess(true);  //设置可以访问文件 </li>\n</ul>\n<p>其他设置</p>\n<ul>\n<li>setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点</li>\n<li>setLoadsImagesAutomatically(true); //支持自动加载图片</li>\n<li>setDefaultTextEncodingName(“utf-8”); //设置编码格式</li>\n<li>setPluginState(PluginState.OFF); //设置是否支持flash插件</li>\n<li>setDefaultFontSize(20); //设置默认字体大小</li>\n</ul>\n<h2 id=\"1-2-WebViewClient\"><a href=\"#1-2-WebViewClient\" class=\"headerlink\" title=\"1.2 WebViewClient\"></a>1.2 WebViewClient</h2><p>WebViewClient用来帮助WebView处理各种通知, 请求事件。我们通过继承WebViewClient并重载它的方法可以实现不同功能的定制。具体如下所示:</p>\n<ul>\n<li><p>shouldOverrideUrlLoading(WebView view, String url) //在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。比如获取url，查看url.contains(“add”)，进行添加操作</p>\n</li>\n<li><p>shouldOverrideKeyEvent(WebView view, KeyEvent event) //处理在浏览器中的按键事件。 </p>\n</li>\n<li><p>onPageStarted(WebView view, String url, Bitmap favicon) //开始载入页面时调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。 </p>\n</li>\n<li><p>onPageFinished(WebView view, String url) //在页面加载结束时调用, 我们可以关闭loading 条，切换程序动作。 </p>\n</li>\n<li><p>onLoadResource(WebView view, String url) //在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 </p>\n</li>\n<li><p>onReceivedError(WebView view, int errorCode, String description, String failingUrl) //报告错误信息 </p>\n</li>\n<li><p>doUpdateVisitedHistory(WebView view, String url, boolean isReload) //更新历史记录 </p>\n</li>\n<li><p>onFormResubmission(WebView view, Message dontResend, Message resend) //应用程序重新请求网页数据</p>\n</li>\n<li><p>onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm) //获取返回信息授权请求 </p>\n</li>\n<li><p>onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //让webview处理https请求。</p>\n</li>\n<li><p>onScaleChanged(WebView view, float oldScale, float newScale) //WebView发生改变时调用</p>\n</li>\n<li><p>onUnhandledKeyEvent(WebView view, KeyEvent event) //Key事件未被加载时调用</p>\n</li>\n</ul>\n<h2 id=\"1-3-WebChromeClient\"><a href=\"#1-3-WebChromeClient\" class=\"headerlink\" title=\"1.3 WebChromeClient\"></a>1.3 WebChromeClient</h2><p>WebChromeClient用来帮助WebView处理JS的对话框、网址图标、网址标题和加载进度等。同样地, 通过继承WebChromeClient并重载它的方法也可以实现不同功能的定制, 如下所示:</p>\n<ul>\n<li><p>public void onProgressChanged(WebView view, int newProgress); //获得网页的加载进度，显示在右上角的TextView控件中</p>\n</li>\n<li><p>public void onReceivedTitle(WebView view, String title); //获取Web页中的title用来设置自己界面中的title, 当加载出错的时候，比如无网络，这时onReceiveTitle中获取的标题为”找不到该网页”,</p>\n</li>\n<li><p>public void onReceivedIcon(WebView view, Bitmap icon); //获取Web页中的icon</p>\n</li>\n<li><p>public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg);</p>\n</li>\n<li><p>public void onCloseWindow(WebView window);</p>\n</li>\n<li><p>public boolean onJsAlert(WebView view, String url, String message, JsResult result); //处理alert弹出框，html 弹框的一种方式</p>\n</li>\n<li><p>public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) //处理confirm弹出框</p>\n</li>\n<li><p>public boolean onJsConfirm(WebView view, String url, String message, JsResult result); //处理prompt弹出框</p>\n</li>\n</ul>\n<h1 id=\"二-WebView生命周期\"><a href=\"#二-WebView生命周期\" class=\"headerlink\" title=\"二 WebView生命周期\"></a>二 WebView生命周期</h1><h2 id=\"2-1-onResume\"><a href=\"#2-1-onResume\" class=\"headerlink\" title=\"2.1 onResume()\"></a>2.1 onResume()</h2><p>WebView为活跃状态时回调，可以正常执行网页的响应。</p>\n<h2 id=\"2-2-onPause\"><a href=\"#2-2-onPause\" class=\"headerlink\" title=\"2.2 onPause()\"></a>2.2 onPause()</h2><p>WebView被切换到后台时回调, 页面被失去焦点, 变成不可见状态，onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</p>\n<h2 id=\"2-3-pauseTimers\"><a href=\"#2-3-pauseTimers\" class=\"headerlink\" title=\"2.3 pauseTimers()\"></a>2.3 pauseTimers()</h2><p>当应用程序被切换到后台时回调，该方法针对全应用程序的WebView，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</p>\n<h2 id=\"2-4-resumeTimers\"><a href=\"#2-4-resumeTimers\" class=\"headerlink\" title=\"2.4 resumeTimers()\"></a>2.4 resumeTimers()</h2><p>恢复pauseTimers时的动作。</p>\n<h2 id=\"2-5-destroy\"><a href=\"#2-5-destroy\" class=\"headerlink\" title=\"2.5 destroy()\"></a>2.5 destroy()</h2><p>关闭了Activity时回调, WebView调用destory时, WebView仍绑定在Activity上.这是由于自定义WebView构建时传入了该Activity的context对象, 因此需要先从父<br>容器中移除WebView, 然后再销毁webview。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mRootLayout.removeView(webView);  </div><div class=\"line\">mWebView.destroy();</div></pre></td></tr></table></figure>\n<h1 id=\"三-WebView页面导航\"><a href=\"#三-WebView页面导航\" class=\"headerlink\" title=\"三 WebView页面导航\"></a>三 WebView页面导航</h1><h2 id=\"3-1-页面跳转\"><a href=\"#3-1-页面跳转\" class=\"headerlink\" title=\"3.1 页面跳转\"></a>3.1 页面跳转</h2><p>当我们在WebView点击链接时, 默认的WebView会直接跳转到别的浏览器中, 如果想要实现在WebView内跳转就需要设置WebViewClient, 下面我们先来<br>说说WebView、WebViewClient、WebChromeClient三者的区别。</p>\n<ul>\n<li>WebView: 主要负责解析和渲染网页</li>\n<li>WebViewClient: 辅助WebView处理各种通知和请求事件</li>\n<li>WebChromeClient: 辅助WebView处理JavaScript中的对话框, 网址图标和标题等</li>\n</ul>\n<p>如果我们想控制不同链接的跳转方式, 我们需要继承WebViewClient重写shouldOverrideUrlLoading()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomWebViewClient</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Uri.parse(url).getHost().equals(<span class=\"string\">\"github.com/guoxiaoxing\"</span>)) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果是自己站点的链接, 则用本地WebView跳转</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//如果不是自己的站点则launch别的Activity来处理</span></div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</div><div class=\"line\">        mContext.startActivity(intent);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于shouldOverrideUrlLoading()方法的两点说明:</p>\n<p>1 方法返回值</p>\n<p>返回true: Android 系统会处理URL, 一般是唤起系统浏览器。<br>返回false: 当前 WebView 处理URL。</p>\n<p>由于默认放回false, 如果我们只想在WebView内处理链接跳转只需要设置mWebView.setWebViewClient(new WebViewClient())即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\">     * Give the host application a chance to take over the control when a new </div><div class=\"line\">     * url is about to be loaded in the current WebView. If WebViewClient is not </div><div class=\"line\">     * provided, by default WebView will ask Activity Manager to choose the </div><div class=\"line\">     * proper handler for the url. If WebViewClient is provided, return true </div><div class=\"line\">     * means the host application handles the url, while return false means the </div><div class=\"line\">     * current WebView handles the url. </div><div class=\"line\">     * This method is not called for requests using the POST \"method\". </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> view The WebView that is initiating the callback. </div><div class=\"line\">     * <span class=\"doctag\">@param</span> url The url to be loaded. </div><div class=\"line\">     * <span class=\"doctag\">@return</span> True if the host application wants to leave the current WebView </div><div class=\"line\">     *         and handle the url itself, otherwise return false. </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>2 方法deprecated问题</p>\n<p>shouldOverrideUrlLoading()方法在API &gt;= 24时被标记deprecated, 它的替代方法是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123;</div><div class=\"line\">    view.loadUrl(request.toString());</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是public boolean shouldOverrideUrlLoading(WebView view, String url)支持更广泛的API我们在使用的时候还是它,<br>关于这两个方法的讨论可以参见:</p>\n<p><a href=\"http://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/36484074/is-shouldoverrideurlloading-really-deprecated-what-can-i-use-instead</a><br><a href=\"http://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/26651586/difference-between-shouldoverrideurlloading-and-shouldinterceptrequest</a></p>\n<h2 id=\"3-2-页面回退\"><a href=\"#3-2-页面回退\" class=\"headerlink\" title=\"3.2 页面回退\"></a>3.2 页面回退</h2><p>Android的返回键, 如果想要实现WebView内网页的回退, 可以重写onKeyEvent()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Check if the key event was the Back button and if there's history</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; myWebView.canGoBack()) &#123;</div><div class=\"line\">        myWebView.goBack();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// If it wasn't the Back key or there's no web page history, bubble up to the default</span></div><div class=\"line\">    <span class=\"comment\">// system behavior (probably exit the activity)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-页面滑动\"><a href=\"#3-3-页面滑动\" class=\"headerlink\" title=\"3.3 页面滑动\"></a>3.3 页面滑动</h2><p>关于页面滑动, 我们在做下拉刷新等功能时, 经常会去判断WebView是否滚动到顶部或者滚动到底部。</p>\n<p>我们先来看一看三个判断高度的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getScrollY();</div></pre></td></tr></table></figure>\n<p>该方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">getHeight();</div><div class=\"line\">getBottom();</div></pre></td></tr></table></figure>\n<p>该方法都返回当前WebView这个容器的高度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getContentHeight();</div></pre></td></tr></table></figure>\n<p>返回的是整个html的高度, 但并不等同于当前整个页面的高度, 因为WebView有缩放功能, 所以当前整个页面的高度实际上应该是原始html的高度<br>再乘上缩放比例. 因此, 判断方法是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) &#123;</div><div class=\"line\">    <span class=\"comment\">//已经处于底端</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(webView.getScrollY() == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">    <span class=\"comment\">//处于顶端</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上这个方法也是我们常用的方法, 不过从API 17开始, mWebView.getScale()被标记为deprecated</p>\n<blockquote>\n<p>This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions<br>between the web rendering and UI threads; prefer onScaleChanged(WebView, </p>\n</blockquote>\n<p>因为scale的获取可以用一下方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomWebView</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomWebView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScaleChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">float</span> oldScale, <span class=\"keyword\">float</span> newScale)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onScaleChanged(view, oldScale, newScale);</div><div class=\"line\">            mCurrentScale = newScale</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关于mWebView.getScale()的讨论可以参见:</p>\n<p><a href=\"https://developer.android.com/reference/android/webkit/WebView.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/webkit/WebView.html</a></p>\n<p><a href=\"http://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/16079863/how-get-webview-scale-in-android-4</a></p>\n<h1 id=\"三-WebView缓存实现\"><a href=\"#三-WebView缓存实现\" class=\"headerlink\" title=\"三 WebView缓存实现\"></a>三 WebView缓存实现</h1><p>在项目中如果使用到WebView控件, 当加载html页面时, 会在/data/data/包名目录下生成database与cache两个文件夹。<br>请求的url记录是保存在WebViewCache.db, 而url的内容是保存在WebViewCache文件夹下。</p>\n<p>控制缓存行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView.getSettings();</div><div class=\"line\"><span class=\"comment\">//优先使用缓存</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); </div><div class=\"line\"><span class=\"comment\">//只在缓存中读取</span></div><div class=\"line\">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ONLY);</div><div class=\"line\">/不使用缓存</div><div class=\"line\">WwebSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);</div></pre></td></tr></table></figure>\n<p>清除缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">clearCache(<span class=\"keyword\">true</span>); <span class=\"comment\">//清除网页访问留下的缓存，由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.</span></div><div class=\"line\">clearHistory (); <span class=\"comment\">//清除当前webview访问的历史记录，只会webview访问历史记录里的所有记录除了当前访问记录.</span></div><div class=\"line\">clearFormData () <span class=\"comment\">//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据。</span></div></pre></td></tr></table></figure>\n<h1 id=\"四-WebView-Cookies\"><a href=\"#四-WebView-Cookies\" class=\"headerlink\" title=\"四 WebView Cookies\"></a>四 WebView Cookies</h1><p>添加Cookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">synCookies</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!CacheUtils.isLogin(<span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span>;</div><div class=\"line\">    CookieSyncManager.createInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">    CookieManager cookieManager = CookieManager.getInstance();</div><div class=\"line\">    cookieManager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">    cookieManager.removeSessionCookie();<span class=\"comment\">//移除</span></div><div class=\"line\">    String cookies = PreferenceHelper.readString(<span class=\"keyword\">this</span>, AppConfig.COOKIE_KEY, AppConfig.COOKIE_KEY);</div><div class=\"line\">    KJLoger.debug(cookies);</div><div class=\"line\">    cookieManager.setCookie(url, cookies);</div><div class=\"line\">    CookieSyncManager.getInstance().sync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>清除Cookies</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager.getInstance().removeSessionCookie();</div></pre></td></tr></table></figure>\n<h1 id=\"五-WebView本地资源访问\"><a href=\"#五-WebView本地资源访问\" class=\"headerlink\" title=\"五 WebView本地资源访问\"></a>五 WebView本地资源访问</h1><p>当我们在WebView中加载出从web服务器上拿取的内容时，是无法访问本地资源的，如assets目录下的图片资源，因为这样的行为属于跨域行为（Cross-Domain），而WebView是禁止<br>的。解决这个问题的方案是把html内容先下载到本地，然后使用loadDataWithBaseURL加载html。这样就可以在html中使用 file:///android_asset/xxx.png 的链接来引用包里<br>面assets下的资源了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadWithAccessLocal</span><span class=\"params\">(<span class=\"keyword\">final</span> String htmlUrl)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> String htmlStr = NetService.fetchHtml(htmlUrl);</div><div class=\"line\">                <span class=\"keyword\">if</span> (htmlStr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    TaskExecutor.runTaskOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                            loadDataWithBaseURL(htmlUrl, htmlStr, <span class=\"string\">\"text/html\"</span>, <span class=\"string\">\"UTF-8\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"Exception:\"</span> + e.getMessage());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            TaskExecutor.runTaskOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    onPageLoadedError(-<span class=\"number\">1</span>, <span class=\"string\">\"fetch html failed\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ul>\n<li>从网络上下载html的过程应放在工作线程中</li>\n<li>html下载成功后渲染出html的步骤应放在UI主线程，不然WebView会报错</li>\n<li>html下载失败则可以使用我们前面讲述的方法来显示自定义错误界面</li>\n</ul>"},{"title":"WebView三部曲：代码交互","date":"2016-07-30T16:00:00.000Z","_content":"\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n<!-- more -->\n\n# WebView三部曲：性能优化\n\n作者: 郭孝星  \n邮箱: guoxiaoxingse@gmail.com  \n博客: https://guoxiaoxing.github.io/  \n简书: http://www.jianshu.com/users/66a47e04215b/latest_articles\n\n**关于作者**\n\n>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。\n\n**关于文章**\n\n>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问\n题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文\n章, 关注文章的最新的动态。\n\n**关于文章**\n\n>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与\n我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你\n有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n\n# 一 优化网页加载速度\n\n默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果\n在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或\njs文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。\n\n设置WebView, 先禁止加载图片\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n\n//图片加载\nif(Build.VERSION.SDK_INT >= 19){\n    webSettings.setLoadsImagesAutomatically(true);\n}else {\n    webSettings.setLoadsImagesAutomatically(false);\n}\n```\n\n覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片\n\n```java\n@Override\npublic void onPageFinished(WebView view, String url) {\n    super.onPageFinished(view, url);\n    if (!view.getSettings().getLoadsImagesAutomatically()) {\n        view.getSettings().setLoadsImagesAutomatically(true);\n    }\n}\n```\n\n**注意**: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。\n\n# 二 硬件加速页面闪烁问题\n\n4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边\n滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:\n\n过度前关闭硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n}\n```\n\n过度前开启硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n}\n```\n\n以上三篇, 大致就说这么多,  在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。\n               \n该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。\n               \n```java\npackage com.guoxiaoxing.webview;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.Window;\nimport android.webkit.JsResult;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebResourceError;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.ProgressBar;\n\nimport com.jockeyjs.Jockey;\nimport com.jockeyjs.JockeyImpl;\n\n/**\n * Author: guoxiaoxing\n * Date: 16/7/21 下午4:03\n * Function: H5Activity 提供各种功能载入Web页面\n * <p>\n * For more information, you can visit https://github.com/guoxiaoxing or contact me by\n * guoxiaoxingv@163.com\n */\npublic class H5Activity extends AppCompatActivity {\n\n    public static final String H5_URL = \"H5_URL\";\n    private static final String JOCKEY_EVENT_NAME = \"JOCKEY_EVENT_NAME\";\n    private static final String TAG = H5Activity.class.getSimpleName();\n\n    private Toolbar mToolbar;\n    private ProgressBar mProgressBar;\n\n    private Jockey mJockey;\n    private WebView mWebView;\n    private WebViewClient mWebViewClient;\n    private WebChromeClient mWebChromeClient;\n\n    private String mUrl;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.activity_h5);\n        setupView();\n        setupSettings();\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        setupJockey();\n        setupData();\n    }\n\n    private void setupView() {\n        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);\n        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);\n        mWebView = (WebView) findViewById(R.id.h5_webview);\n    }\n\n    private void setupSettings() {\n\n        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);\n        mWebView.setHorizontalScrollBarEnabled(false);\n        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);\n\n        WebSettings mWebSettings = mWebView.getSettings();\n        mWebSettings.setSupportZoom(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDefaultTextEncodingName(\"utf-8\");\n        mWebSettings.setLoadsImagesAutomatically(true);\n\n        //JS\n        mWebSettings.setJavaScriptEnabled(true);\n        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n\n        mWebSettings.setAllowFileAccess(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDatabaseEnabled(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setDomStorageEnabled(true);\n\n\n        //缓存\n        ConnectivityManager connectivityManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo info = connectivityManager.getActiveNetworkInfo();\n        if (info != null && info.isConnected()) {\n            String wvcc = info.getTypeName();\n            Log.d(TAG, \"current network: \" + wvcc);\n            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);\n        } else {\n            Log.d(TAG, \"No network is connected, use cache\");\n            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\n        }\n\n        if (Build.VERSION.SDK_INT >= 16) {\n            mWebSettings.setAllowFileAccessFromFileURLs(true);\n            mWebSettings.setAllowUniversalAccessFromFileURLs(true);\n        }\n\n        if (Build.VERSION.SDK_INT >= 12) {\n            mWebSettings.setAllowContentAccess(true);\n        }\n\n        setupWebViewClient();\n        setupWebChromeClient();\n    }\n\n    private void setupJockey() {\n        mJockey = JockeyImpl.getDefault();\n        mJockey.configure(mWebView);\n        mJockey.setWebViewClient(mWebViewClient);\n        mJockey.setOnValidateListener(new Jockey.OnValidateListener() {\n            @Override\n            public boolean validate(String host) {\n                return \"yourdomain.com\".equals(host);\n            }\n        });\n\n        //TODO set your event handler\n        mJockey.on(JOCKEY_EVENT_NAME, new EventHandler());\n    }\n\n    private void setupData() {\n        mUrl = getIntent().getStringExtra(H5_URL);\n        if (TextUtils.isEmpty(mUrl)) {\n            //TODO show error page\n        } else {\n            mWebView.loadUrl(mUrl);\n        }\n    }\n\n    private void setupWebViewClient() {\n        mWebViewClient = new WebViewClient() {\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                //TODO 处理URL, 例如对指定的URL做不同的处理等\n                return false;\n            }\n\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n            @Override\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                super.onReceivedError(view, request, error);\n            }\n        };\n        mWebView.setWebViewClient(mWebViewClient);\n    }\n\n    private void setupWebChromeClient() {\n        mWebChromeClient = new WebChromeClient() {\n            @Override\n            public void onReceivedTitle(WebView view, String title) {\n                super.onReceivedTitle(view, title);\n                mToolbar.setTitle(title);\n\n            }\n\n            @Override\n            public void onProgressChanged(WebView view, int newProgress) {\n                super.onProgressChanged(view, newProgress);\n                mProgressBar.setProgress(newProgress);\n                if (newProgress == 100) {\n                    mProgressBar.setVisibility(View.GONE);\n                } else {\n                    mProgressBar.setVisibility(View.VISIBLE);\n                }\n            }\n\n            @Override\n            public boolean onJsAlert(WebView view, String url, String message, JsResult result) {\n                return super.onJsAlert(view, url, message, result);\n            }\n        };\n        mWebView.setWebChromeClient(mWebChromeClient);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {\n            mWebView.goBack();\n            return true;\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n}\n\n```","source":"_posts/WebView三部曲：性能优化.md","raw":"title: WebView三部曲：代码交互\ndate: 2016-7-31 00:00:00\ntags:\n---\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n<!-- more -->\n\n# WebView三部曲：性能优化\n\n作者: 郭孝星  \n邮箱: guoxiaoxingse@gmail.com  \n博客: https://guoxiaoxing.github.io/  \n简书: http://www.jianshu.com/users/66a47e04215b/latest_articles\n\n**关于作者**\n\n>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。\n\n**关于文章**\n\n>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问\n题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文\n章, 关注文章的最新的动态。\n\n**关于文章**\n\n>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与\n我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你\n有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n\n# 一 优化网页加载速度\n\n默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果\n在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或\njs文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。\n\n设置WebView, 先禁止加载图片\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n\n//图片加载\nif(Build.VERSION.SDK_INT >= 19){\n    webSettings.setLoadsImagesAutomatically(true);\n}else {\n    webSettings.setLoadsImagesAutomatically(false);\n}\n```\n\n覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片\n\n```java\n@Override\npublic void onPageFinished(WebView view, String url) {\n    super.onPageFinished(view, url);\n    if (!view.getSettings().getLoadsImagesAutomatically()) {\n        view.getSettings().setLoadsImagesAutomatically(true);\n    }\n}\n```\n\n**注意**: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。\n\n# 二 硬件加速页面闪烁问题\n\n4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边\n滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:\n\n过度前关闭硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n}\n```\n\n过度前开启硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n}\n```\n\n以上三篇, 大致就说这么多,  在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。\n               \n该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。\n               \n```java\npackage com.guoxiaoxing.webview;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.Window;\nimport android.webkit.JsResult;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebResourceError;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.ProgressBar;\n\nimport com.jockeyjs.Jockey;\nimport com.jockeyjs.JockeyImpl;\n\n/**\n * Author: guoxiaoxing\n * Date: 16/7/21 下午4:03\n * Function: H5Activity 提供各种功能载入Web页面\n * <p>\n * For more information, you can visit https://github.com/guoxiaoxing or contact me by\n * guoxiaoxingv@163.com\n */\npublic class H5Activity extends AppCompatActivity {\n\n    public static final String H5_URL = \"H5_URL\";\n    private static final String JOCKEY_EVENT_NAME = \"JOCKEY_EVENT_NAME\";\n    private static final String TAG = H5Activity.class.getSimpleName();\n\n    private Toolbar mToolbar;\n    private ProgressBar mProgressBar;\n\n    private Jockey mJockey;\n    private WebView mWebView;\n    private WebViewClient mWebViewClient;\n    private WebChromeClient mWebChromeClient;\n\n    private String mUrl;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.activity_h5);\n        setupView();\n        setupSettings();\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        setupJockey();\n        setupData();\n    }\n\n    private void setupView() {\n        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);\n        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);\n        mWebView = (WebView) findViewById(R.id.h5_webview);\n    }\n\n    private void setupSettings() {\n\n        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);\n        mWebView.setHorizontalScrollBarEnabled(false);\n        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);\n\n        WebSettings mWebSettings = mWebView.getSettings();\n        mWebSettings.setSupportZoom(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDefaultTextEncodingName(\"utf-8\");\n        mWebSettings.setLoadsImagesAutomatically(true);\n\n        //JS\n        mWebSettings.setJavaScriptEnabled(true);\n        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n\n        mWebSettings.setAllowFileAccess(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDatabaseEnabled(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setDomStorageEnabled(true);\n\n\n        //缓存\n        ConnectivityManager connectivityManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo info = connectivityManager.getActiveNetworkInfo();\n        if (info != null && info.isConnected()) {\n            String wvcc = info.getTypeName();\n            Log.d(TAG, \"current network: \" + wvcc);\n            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);\n        } else {\n            Log.d(TAG, \"No network is connected, use cache\");\n            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\n        }\n\n        if (Build.VERSION.SDK_INT >= 16) {\n            mWebSettings.setAllowFileAccessFromFileURLs(true);\n            mWebSettings.setAllowUniversalAccessFromFileURLs(true);\n        }\n\n        if (Build.VERSION.SDK_INT >= 12) {\n            mWebSettings.setAllowContentAccess(true);\n        }\n\n        setupWebViewClient();\n        setupWebChromeClient();\n    }\n\n    private void setupJockey() {\n        mJockey = JockeyImpl.getDefault();\n        mJockey.configure(mWebView);\n        mJockey.setWebViewClient(mWebViewClient);\n        mJockey.setOnValidateListener(new Jockey.OnValidateListener() {\n            @Override\n            public boolean validate(String host) {\n                return \"yourdomain.com\".equals(host);\n            }\n        });\n\n        //TODO set your event handler\n        mJockey.on(JOCKEY_EVENT_NAME, new EventHandler());\n    }\n\n    private void setupData() {\n        mUrl = getIntent().getStringExtra(H5_URL);\n        if (TextUtils.isEmpty(mUrl)) {\n            //TODO show error page\n        } else {\n            mWebView.loadUrl(mUrl);\n        }\n    }\n\n    private void setupWebViewClient() {\n        mWebViewClient = new WebViewClient() {\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                //TODO 处理URL, 例如对指定的URL做不同的处理等\n                return false;\n            }\n\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n            @Override\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                super.onReceivedError(view, request, error);\n            }\n        };\n        mWebView.setWebViewClient(mWebViewClient);\n    }\n\n    private void setupWebChromeClient() {\n        mWebChromeClient = new WebChromeClient() {\n            @Override\n            public void onReceivedTitle(WebView view, String title) {\n                super.onReceivedTitle(view, title);\n                mToolbar.setTitle(title);\n\n            }\n\n            @Override\n            public void onProgressChanged(WebView view, int newProgress) {\n                super.onProgressChanged(view, newProgress);\n                mProgressBar.setProgress(newProgress);\n                if (newProgress == 100) {\n                    mProgressBar.setVisibility(View.GONE);\n                } else {\n                    mProgressBar.setVisibility(View.VISIBLE);\n                }\n            }\n\n            @Override\n            public boolean onJsAlert(WebView view, String url, String message, JsResult result) {\n                return super.onJsAlert(view, url, message, result);\n            }\n        };\n        mWebView.setWebChromeClient(mWebChromeClient);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {\n            mWebView.goBack();\n            return true;\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n}\n\n```","slug":"WebView三部曲：性能优化","published":1,"updated":"2017-07-12T10:02:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52acn6k0007oncwgav2zd5e","content":"<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"WebView三部曲：性能优化\"><a href=\"#WebView三部曲：性能优化\" class=\"headerlink\" title=\"WebView三部曲：性能优化\"></a>WebView三部曲：性能优化</h1><p>作者: 郭孝星<br>邮箱: guoxiaoxingse@gmail.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>简书: <a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/users/66a47e04215b/latest_articles</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问<br>题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文<br>章, 关注文章的最新的动态。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与<br>我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你<br>有所帮助, 也欢迎去star文章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<h1 id=\"一-优化网页加载速度\"><a href=\"#一-优化网页加载速度\" class=\"headerlink\" title=\"一 优化网页加载速度\"></a>一 优化网页加载速度</h1><p>默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果<br>在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或<br>js文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。</p>\n<p>设置WebView, 先禁止加载图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView.getSettings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//图片加载</span></div><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= <span class=\"number\">19</span>)&#123;</div><div class=\"line\">    webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!view.getSettings().getLoadsImagesAutomatically()) &#123;</div><div class=\"line\">        view.getSettings().setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。</p>\n<h1 id=\"二-硬件加速页面闪烁问题\"><a href=\"#二-硬件加速页面闪烁问题\" class=\"headerlink\" title=\"二 硬件加速页面闪烁问题\"></a>二 硬件加速页面闪烁问题</h1><p>4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边<br>滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:</p>\n<p>过度前关闭硬件加速</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB)&#123;</div><div class=\"line\">    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>过度前开启硬件加速</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB)&#123;</div><div class=\"line\">    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上三篇, 大致就说这么多,  在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。</p>\n<p>该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.guoxiaoxing.webview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.ConnectivityManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.NetworkInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Build;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.TextUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.KeyEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.JsResult;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebChromeClient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebResourceError;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebResourceRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebSettings;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebViewClient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ProgressBar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jockeyjs.Jockey;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jockeyjs.JockeyImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Author: guoxiaoxing</div><div class=\"line\"> * Date: 16/7/21 下午4:03</div><div class=\"line\"> * Function: H5Activity 提供各种功能载入Web页面</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * For more information, you can visit https://github.com/guoxiaoxing or contact me by</div><div class=\"line\"> * guoxiaoxingv@163.com</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H5Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String H5_URL = <span class=\"string\">\"H5_URL\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String JOCKEY_EVENT_NAME = <span class=\"string\">\"JOCKEY_EVENT_NAME\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = H5Activity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> ProgressBar mProgressBar;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Jockey mJockey;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebView mWebView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebViewClient mWebViewClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebChromeClient mWebChromeClient;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String mUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class=\"line\">        setContentView(R.layout.activity_h5);</div><div class=\"line\">        setupView();</div><div class=\"line\">        setupSettings();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">        setupJockey();</div><div class=\"line\">        setupData();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);</div><div class=\"line\">        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);</div><div class=\"line\">        mWebView = (WebView) findViewById(R.id.h5_webview);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupSettings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);</div><div class=\"line\">        mWebView.setHorizontalScrollBarEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);</div><div class=\"line\"></div><div class=\"line\">        WebSettings mWebSettings = mWebView.getSettings();</div><div class=\"line\">        mWebSettings.setSupportZoom(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDefaultTextEncodingName(<span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">        mWebSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//JS</span></div><div class=\"line\">        mWebSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        mWebSettings.setAllowFileAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDatabaseEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDomStorageEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//缓存</span></div><div class=\"line\">        ConnectivityManager connectivityManager = (ConnectivityManager) <span class=\"keyword\">this</span>.getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class=\"line\">        NetworkInfo info = connectivityManager.getActiveNetworkInfo();</div><div class=\"line\">        <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span> &amp;&amp; info.isConnected()) &#123;</div><div class=\"line\">            String wvcc = info.getTypeName();</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"current network: \"</span> + wvcc);</div><div class=\"line\">            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"No network is connected, use cache\"</span>);</div><div class=\"line\">            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">16</span>) &#123;</div><div class=\"line\">            mWebSettings.setAllowFileAccessFromFileURLs(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mWebSettings.setAllowUniversalAccessFromFileURLs(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">12</span>) &#123;</div><div class=\"line\">            mWebSettings.setAllowContentAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        setupWebViewClient();</div><div class=\"line\">        setupWebChromeClient();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupJockey</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mJockey = JockeyImpl.getDefault();</div><div class=\"line\">        mJockey.configure(mWebView);</div><div class=\"line\">        mJockey.setWebViewClient(mWebViewClient);</div><div class=\"line\">        mJockey.setOnValidateListener(<span class=\"keyword\">new</span> Jockey.OnValidateListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validate</span><span class=\"params\">(String host)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"yourdomain.com\"</span>.equals(host);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//TODO set your event handler</span></div><div class=\"line\">        mJockey.on(JOCKEY_EVENT_NAME, <span class=\"keyword\">new</span> EventHandler());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mUrl = getIntent().getStringExtra(H5_URL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(mUrl)) &#123;</div><div class=\"line\">            <span class=\"comment\">//TODO show error page</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mWebView.loadUrl(mUrl);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebViewClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWebViewClient = <span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//TODO 处理URL, 例如对指定的URL做不同的处理等</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedError(view, request, error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mWebView.setWebViewClient(mWebViewClient);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebChromeClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWebChromeClient = <span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedTitle</span><span class=\"params\">(WebView view, String title)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedTitle(view, title);</div><div class=\"line\">                mToolbar.setTitle(title);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onProgressChanged(view, newProgress);</div><div class=\"line\">                mProgressBar.setProgress(newProgress);</div><div class=\"line\">                <span class=\"keyword\">if</span> (newProgress == <span class=\"number\">100</span>) &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.GONE);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onJsAlert</span><span class=\"params\">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onJsAlert(view, url, message, result);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mWebView.setWebChromeClient(mWebChromeClient);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123;</div><div class=\"line\">            mWebView.goBack();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>","more":"<h1 id=\"WebView三部曲：性能优化\"><a href=\"#WebView三部曲：性能优化\" class=\"headerlink\" title=\"WebView三部曲：性能优化\"></a>WebView三部曲：性能优化</h1><p>作者: 郭孝星<br>邮箱: guoxiaoxingse@gmail.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>简书: <a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/users/66a47e04215b/latest_articles</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问<br>题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文<br>章, 关注文章的最新的动态。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与<br>我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你<br>有所帮助, 也欢迎去star文章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<h1 id=\"一-优化网页加载速度\"><a href=\"#一-优化网页加载速度\" class=\"headerlink\" title=\"一 优化网页加载速度\"></a>一 优化网页加载速度</h1><p>默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果<br>在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或<br>js文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。</p>\n<p>设置WebView, 先禁止加载图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSettings = mWebView.getSettings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//图片加载</span></div><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= <span class=\"number\">19</span>)&#123;</div><div class=\"line\">    webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    webSettings.setLoadsImagesAutomatically(<span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!view.getSettings().getLoadsImagesAutomatically()) &#123;</div><div class=\"line\">        view.getSettings().setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。</p>\n<h1 id=\"二-硬件加速页面闪烁问题\"><a href=\"#二-硬件加速页面闪烁问题\" class=\"headerlink\" title=\"二 硬件加速页面闪烁问题\"></a>二 硬件加速页面闪烁问题</h1><p>4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边<br>滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:</p>\n<p>过度前关闭硬件加速</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB)&#123;</div><div class=\"line\">    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>过度前开启硬件加速</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB)&#123;</div><div class=\"line\">    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上三篇, 大致就说这么多,  在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。</p>\n<p>该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.guoxiaoxing.webview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.ConnectivityManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.NetworkInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Build;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.TextUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.KeyEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.JsResult;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebChromeClient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebResourceError;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebResourceRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebSettings;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebViewClient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ProgressBar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jockeyjs.Jockey;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jockeyjs.JockeyImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Author: guoxiaoxing</div><div class=\"line\"> * Date: 16/7/21 下午4:03</div><div class=\"line\"> * Function: H5Activity 提供各种功能载入Web页面</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * For more information, you can visit https://github.com/guoxiaoxing or contact me by</div><div class=\"line\"> * guoxiaoxingv@163.com</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H5Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String H5_URL = <span class=\"string\">\"H5_URL\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String JOCKEY_EVENT_NAME = <span class=\"string\">\"JOCKEY_EVENT_NAME\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = H5Activity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> ProgressBar mProgressBar;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Jockey mJockey;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebView mWebView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebViewClient mWebViewClient;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebChromeClient mWebChromeClient;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String mUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class=\"line\">        setContentView(R.layout.activity_h5);</div><div class=\"line\">        setupView();</div><div class=\"line\">        setupSettings();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">        setupJockey();</div><div class=\"line\">        setupData();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);</div><div class=\"line\">        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);</div><div class=\"line\">        mWebView = (WebView) findViewById(R.id.h5_webview);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupSettings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);</div><div class=\"line\">        mWebView.setHorizontalScrollBarEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);</div><div class=\"line\"></div><div class=\"line\">        WebSettings mWebSettings = mWebView.getSettings();</div><div class=\"line\">        mWebSettings.setSupportZoom(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDefaultTextEncodingName(<span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">        mWebSettings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//JS</span></div><div class=\"line\">        mWebSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        mWebSettings.setAllowFileAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDatabaseEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mWebSettings.setDomStorageEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//缓存</span></div><div class=\"line\">        ConnectivityManager connectivityManager = (ConnectivityManager) <span class=\"keyword\">this</span>.getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class=\"line\">        NetworkInfo info = connectivityManager.getActiveNetworkInfo();</div><div class=\"line\">        <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span> &amp;&amp; info.isConnected()) &#123;</div><div class=\"line\">            String wvcc = info.getTypeName();</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"current network: \"</span> + wvcc);</div><div class=\"line\">            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"No network is connected, use cache\"</span>);</div><div class=\"line\">            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">16</span>) &#123;</div><div class=\"line\">            mWebSettings.setAllowFileAccessFromFileURLs(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mWebSettings.setAllowUniversalAccessFromFileURLs(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">12</span>) &#123;</div><div class=\"line\">            mWebSettings.setAllowContentAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        setupWebViewClient();</div><div class=\"line\">        setupWebChromeClient();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupJockey</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mJockey = JockeyImpl.getDefault();</div><div class=\"line\">        mJockey.configure(mWebView);</div><div class=\"line\">        mJockey.setWebViewClient(mWebViewClient);</div><div class=\"line\">        mJockey.setOnValidateListener(<span class=\"keyword\">new</span> Jockey.OnValidateListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validate</span><span class=\"params\">(String host)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"yourdomain.com\"</span>.equals(host);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//TODO set your event handler</span></div><div class=\"line\">        mJockey.on(JOCKEY_EVENT_NAME, <span class=\"keyword\">new</span> EventHandler());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mUrl = getIntent().getStringExtra(H5_URL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(mUrl)) &#123;</div><div class=\"line\">            <span class=\"comment\">//TODO show error page</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mWebView.loadUrl(mUrl);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebViewClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWebViewClient = <span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//TODO 处理URL, 例如对指定的URL做不同的处理等</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedError(view, request, error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mWebView.setWebViewClient(mWebViewClient);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebChromeClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWebChromeClient = <span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedTitle</span><span class=\"params\">(WebView view, String title)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onReceivedTitle(view, title);</div><div class=\"line\">                mToolbar.setTitle(title);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onProgressChanged(view, newProgress);</div><div class=\"line\">                mProgressBar.setProgress(newProgress);</div><div class=\"line\">                <span class=\"keyword\">if</span> (newProgress == <span class=\"number\">100</span>) &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.GONE);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onJsAlert</span><span class=\"params\">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onJsAlert(view, url, message, result);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mWebView.setWebChromeClient(mWebChromeClient);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123;</div><div class=\"line\">            mWebView.goBack();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onKeyDown(keyCode, event);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"WebView三部曲：代码交互","date":"2016-07-30T16:00:00.000Z","_content":"\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n<!-- more -->\n\n# WebView三部曲：代码交互\n\n作者: 郭孝星  \n邮箱: guoxiaoxingse@gmail.com  \n博客: https://guoxiaoxing.github.io/  \n简书: http://www.jianshu.com/users/66a47e04215b/latest_articles\n\n**关于作者**\n\n>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。\n\n**关于文章**\n\n>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问\n题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文\n章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n# 一 Android原生方案\n\n关于WebView中Java代码和JS代码的交互实现, Android给了一套原生的方案, 我们先来看看原生的用法。后面我们还会讲到其他的开源方法。\n\nJavaScript代码和Android代码是通过addJavascriptInterface()来建立连接的, 我们来看下具体的用法。\n\n1 设置WebView支持JavaScript\n\n```java\nwebView.getSettings().setJavaScriptEnabled(true);\n```\n\n2 在Android工程里定义一个接口\n\n```java\npublic class WebAppInterface {\n    Context mContext;\n\n    /** Instantiate the interface and set the context */\n    WebAppInterface(Context c) {\n        mContext = c;\n    }\n\n    /** Show a toast from the web page */\n    @JavascriptInterface\n    public void showToast(String toast) {\n        Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n**注意**: API >= 17时, 必须在被JavaScript调用的Android方法前添加@JavascriptInterface注解, 否则将无法识别。\n\n3 在Android代码中将该接口添加到WebView\n\n```java\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.addJavascriptInterface(new WebAppInterface(this), \"Android\");\n```\n\n这个\"Android\"就是我们为这个接口取的别名, 在JavaScript就可以通过Android.showToast(toast)这种方式来调用此方法。\n\n4 在JavaScript中调用Android方法\n\n```js\n<input type=\"button\" value=\"Say hello\" onClick=\"showAndroidToast('Hello Android!')\" />\n\n<script type=\"text/javascript\">\n    function showAndroidToast(toast) {\n        Android.showToast(toast);\n    }\n</script>\n```\n\n在JavaScript中我们不用再去实例化WebAppInterface接口, WebView会自动帮我们完成这一工作, 使它能够为WebPage所用。\n\n**注意**:\n\n由于addJavascriptInterface()给予了JS代码控制应用的能力, 这是一项非常有用的特性, 但同时也带来了安全上的隐患, \n\n> Using addJavascriptInterface() allows JavaScript to control your Android application. This can be a very useful feature or a dangerous \nsecurity issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by an unknown person or \nprocess), then an attacker can include HTML that executes your client-side code and possibly any code of the attacker's choosing. As such, \nyou should not use addJavascriptInterface() unless you wrote all of the HTML and JavaScript that appears in your WebView. You should also \nnot allow the user to navigate to other web pages that are not your own, within your WebView (instead, allow the user's default browser \napplication to open foreign links—by default, the user's web browser opens all URL links, so be careful only if you handle page navigation\nas described in the following section).\n \n下面正式引入我们在项目中常用的两套开源的替代方案\n\n# 二 jockeyjs开源方案\n\n[jockeyjs](https://github.com/tcoulter/jockeyjs)是一套IOS/Android双平台的Native和JS交互方法, 比较适合用在项目中。\n\n>Library to facilitate communication between iOS apps and JS apps running inside a UIWebView\n\njockeyjs对Native和JS的交互做了优美的封装, 事件的发送与接收都可以通过send()和on()来完成。我们先简单的看一下Event的发送与接收。\n\nSending events from app to JavaScript\n\n```java\n// Send an event to JavaScript, passing a payload\njockey.send(\"event-name\", webView, payload);\n\n//With a callback to execute after all listeners have finished\njockey.send(\"event-name\", webView, payload, new JockeyCallback() {\n    @Override\n    public void call() {\n        //Your execution code\n    }\n});\n```\n\nReceiving events from app in JavaScript\n\n```java\n// Listen for an event from iOS, but don't notify iOS we've completed processing\n// until an asynchronous function has finished (in this case a timeout).\nJockey.on(\"event-name\", function(payload, complete) {\n  // Example of event'ed handler.\n  setTimeout(function() {\n    alert(\"Timeout over!\");\n    complete();\n  }, 1000);\n});\n```\n\nSending events from JavaScript to app\n\n```java\n// Send an event to iOS.\nJockey.send(\"event-name\");\n\n// Send an event to iOS, passing an optional payload.\nJockey.send(\"event-name\", {\n  key: \"value\"\n});\n\n// Send an event to iOS, pass an optional payload, and catch the callback when all the\n// iOS listeners have finished processing.\nJockey.send(\"event-name\", {\n  key: \"value\"\n}, function() {\n  alert(\"iOS has finished processing!\");\n});\n```\n\nReceiving events from JavaScript in app\n\n```java\n//Listen for an event from JavaScript and log a message when we have receied it.\njockey.on(\"event-name\", new JockeyHandler() {\n    @Override\n    protected void doPerform(Map<Object, Object> payload) {\n        Log.d(\"jockey\", \"Things are happening\");\n    }\n});\n\n//Listen for an event from JavaScript, but don't notify the JavaScript that the listener has completed\n//until an asynchronous function has finished\n//Note: Because this method is executed in the background, if you want the method to interact with the UI thread\n//it will need to use something like a android.os.Handler to post to the UI thread.\njockey.on(\"event-name\", new JockeyAsyncHandler() {\n    @Override\n    protected void doPerform(Map<Object, Object> payload) {\n        //Do something asynchronously\n        //No need to called completed(), Jockey will take care of that for you!\n    }\n});\n\n\n//We can even chain together several handlers so that they get processed in sequence.\n//Here we also see an example of the NativeOS interface which allows us to chain some common\n//system handlers to simulate native UI interactions.\njockey.on(\"event-name\", nativeOS(this)\n            .toast(\"Event occurred!\")\n            .vibrate(100), //Don't forget to grant permission\n            new JockeyHandler() {\n                @Override\n                protected void doPerform(Map<Object, Object> payload) {\n                }\n            }\n);\n\n//...More Handlers\n\n\n//If you would like to stop listening for a specific event\njockey.off(\"event-name\");\n\n//If you would like to stop listening to ALL events\njockey.clear();\n```\n\n通过上面的代码, 我们对jockeyjs的使用有了大致的理解, 下面我们具体来看一下在项目中的使用。\n\n1 依赖配置\n\n下载代码: https://github.com/tcoulter/jockeyjs, 将JockeyJS.Android导入到工程中。\n\n2 jockeyjs配置\n\njockeyjs有两种使用方式\n\n方式一:\n\n只在一个Activity中使用jockey或者多Activity共享一个jockey实例\n\n```java\n//Declare an instance of Jockey\nJockey jockey;\n\n//The WebView that we will be using, assumed to be instantiated either through findViewById or some method of injection.\nWebView webView;\n\nWebViewClient myWebViewClient;\n\n@Override\nprotected void onStart() {\n    super.onStart();\n\n    //Get the default JockeyImpl\n    jockey = JockeyImpl.getDefault();\n\n    //Configure your webView to be used with Jockey\n    jockey.configure(webView);\n\n    //Pass Jockey your custom WebViewClient\n    //Notice we can do this even after our webView has been configured.\n    jockey.setWebViewClient(myWebViewClient)\n\n    //Set some event handlers\n    setJockeyEvents();\n\n    //Load your webPage\n    webView.loadUrl(\"file:///your.url.com\");\n}\n```\n\n方式二:\n\n另一种就是把jockey当成一种全局的Service来用, 这种方式下我们可以在多个Activity之间甚至整个应用内共享handler. 当然我们同样需要\n把jockey的生命周期和应用的生命周期绑定在一起。\n\n```java\n//First we declare the members involved in using Jockey\n\n//A WebView to interact with\nprivate WebView webView;\n\n//Our instance of the Jockey interface\nprivate Jockey jockey;\n\n//A helper for binding services\nprivate boolean _bound;\n\n//A service connection for making use of the JockeyService\nprivate ServiceConnection _connection = new ServiceConnection() {\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n        _bound = false;\n    }\n\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n        JockeyBinder binder = (JockeyBinder) service;\n\n        //Retrieves the instance of the JockeyService from the binder\n        jockey = binder.getService();\n\n        //This will setup the WebView to enable JavaScript execution and provide a custom JockeyWebViewClient\n        jockey.configure(webView);\n\n        //Make Jockey start listening for events\n        setJockeyEvents();\n\n        _bound = true;\n\n        //Redirect the WebView to your webpage.\n        webView.loadUrl(\"file:///android_assets/index.html\");\n    }\n\n}\n\n///....Other member variables....////\n\n\n//Then we bind the JockeyService to our activity through a helper function in our onStart method\n@Override\nprotected void onStart() {\n    super.onStart();\n    JockeyService.bind(this, _connection);\n}\n\n//In order to bind this with the Android lifecycle we need to make sure that the service also shuts down at the appropriate time.\n@Override\nprotected void onStop() {\n    super.onStop();\n    if (_bound) {\n        JockeyService.unbind(this, _connection);\n    }\n}\n```\n\n\n以上便是jockeyjs的大致用法.","source":"_posts/WebView三部曲：代码交互.md","raw":"title: WebView三部曲：代码交互\ndate: 2016-7-31 00:00:00\ntags:\n---\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n<!-- more -->\n\n# WebView三部曲：代码交互\n\n作者: 郭孝星  \n邮箱: guoxiaoxingse@gmail.com  \n博客: https://guoxiaoxing.github.io/  \n简书: http://www.jianshu.com/users/66a47e04215b/latest_articles\n\n**关于作者**\n\n>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。\n\n**关于文章**\n\n>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问\n题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文\n章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n- [WebView三部曲：基本用法](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md) \n- [WebView三部曲：代码交互](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md) \n- [WebView三部曲：性能优化](https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md)\n\n# 一 Android原生方案\n\n关于WebView中Java代码和JS代码的交互实现, Android给了一套原生的方案, 我们先来看看原生的用法。后面我们还会讲到其他的开源方法。\n\nJavaScript代码和Android代码是通过addJavascriptInterface()来建立连接的, 我们来看下具体的用法。\n\n1 设置WebView支持JavaScript\n\n```java\nwebView.getSettings().setJavaScriptEnabled(true);\n```\n\n2 在Android工程里定义一个接口\n\n```java\npublic class WebAppInterface {\n    Context mContext;\n\n    /** Instantiate the interface and set the context */\n    WebAppInterface(Context c) {\n        mContext = c;\n    }\n\n    /** Show a toast from the web page */\n    @JavascriptInterface\n    public void showToast(String toast) {\n        Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n**注意**: API >= 17时, 必须在被JavaScript调用的Android方法前添加@JavascriptInterface注解, 否则将无法识别。\n\n3 在Android代码中将该接口添加到WebView\n\n```java\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.addJavascriptInterface(new WebAppInterface(this), \"Android\");\n```\n\n这个\"Android\"就是我们为这个接口取的别名, 在JavaScript就可以通过Android.showToast(toast)这种方式来调用此方法。\n\n4 在JavaScript中调用Android方法\n\n```js\n<input type=\"button\" value=\"Say hello\" onClick=\"showAndroidToast('Hello Android!')\" />\n\n<script type=\"text/javascript\">\n    function showAndroidToast(toast) {\n        Android.showToast(toast);\n    }\n</script>\n```\n\n在JavaScript中我们不用再去实例化WebAppInterface接口, WebView会自动帮我们完成这一工作, 使它能够为WebPage所用。\n\n**注意**:\n\n由于addJavascriptInterface()给予了JS代码控制应用的能力, 这是一项非常有用的特性, 但同时也带来了安全上的隐患, \n\n> Using addJavascriptInterface() allows JavaScript to control your Android application. This can be a very useful feature or a dangerous \nsecurity issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by an unknown person or \nprocess), then an attacker can include HTML that executes your client-side code and possibly any code of the attacker's choosing. As such, \nyou should not use addJavascriptInterface() unless you wrote all of the HTML and JavaScript that appears in your WebView. You should also \nnot allow the user to navigate to other web pages that are not your own, within your WebView (instead, allow the user's default browser \napplication to open foreign links—by default, the user's web browser opens all URL links, so be careful only if you handle page navigation\nas described in the following section).\n \n下面正式引入我们在项目中常用的两套开源的替代方案\n\n# 二 jockeyjs开源方案\n\n[jockeyjs](https://github.com/tcoulter/jockeyjs)是一套IOS/Android双平台的Native和JS交互方法, 比较适合用在项目中。\n\n>Library to facilitate communication between iOS apps and JS apps running inside a UIWebView\n\njockeyjs对Native和JS的交互做了优美的封装, 事件的发送与接收都可以通过send()和on()来完成。我们先简单的看一下Event的发送与接收。\n\nSending events from app to JavaScript\n\n```java\n// Send an event to JavaScript, passing a payload\njockey.send(\"event-name\", webView, payload);\n\n//With a callback to execute after all listeners have finished\njockey.send(\"event-name\", webView, payload, new JockeyCallback() {\n    @Override\n    public void call() {\n        //Your execution code\n    }\n});\n```\n\nReceiving events from app in JavaScript\n\n```java\n// Listen for an event from iOS, but don't notify iOS we've completed processing\n// until an asynchronous function has finished (in this case a timeout).\nJockey.on(\"event-name\", function(payload, complete) {\n  // Example of event'ed handler.\n  setTimeout(function() {\n    alert(\"Timeout over!\");\n    complete();\n  }, 1000);\n});\n```\n\nSending events from JavaScript to app\n\n```java\n// Send an event to iOS.\nJockey.send(\"event-name\");\n\n// Send an event to iOS, passing an optional payload.\nJockey.send(\"event-name\", {\n  key: \"value\"\n});\n\n// Send an event to iOS, pass an optional payload, and catch the callback when all the\n// iOS listeners have finished processing.\nJockey.send(\"event-name\", {\n  key: \"value\"\n}, function() {\n  alert(\"iOS has finished processing!\");\n});\n```\n\nReceiving events from JavaScript in app\n\n```java\n//Listen for an event from JavaScript and log a message when we have receied it.\njockey.on(\"event-name\", new JockeyHandler() {\n    @Override\n    protected void doPerform(Map<Object, Object> payload) {\n        Log.d(\"jockey\", \"Things are happening\");\n    }\n});\n\n//Listen for an event from JavaScript, but don't notify the JavaScript that the listener has completed\n//until an asynchronous function has finished\n//Note: Because this method is executed in the background, if you want the method to interact with the UI thread\n//it will need to use something like a android.os.Handler to post to the UI thread.\njockey.on(\"event-name\", new JockeyAsyncHandler() {\n    @Override\n    protected void doPerform(Map<Object, Object> payload) {\n        //Do something asynchronously\n        //No need to called completed(), Jockey will take care of that for you!\n    }\n});\n\n\n//We can even chain together several handlers so that they get processed in sequence.\n//Here we also see an example of the NativeOS interface which allows us to chain some common\n//system handlers to simulate native UI interactions.\njockey.on(\"event-name\", nativeOS(this)\n            .toast(\"Event occurred!\")\n            .vibrate(100), //Don't forget to grant permission\n            new JockeyHandler() {\n                @Override\n                protected void doPerform(Map<Object, Object> payload) {\n                }\n            }\n);\n\n//...More Handlers\n\n\n//If you would like to stop listening for a specific event\njockey.off(\"event-name\");\n\n//If you would like to stop listening to ALL events\njockey.clear();\n```\n\n通过上面的代码, 我们对jockeyjs的使用有了大致的理解, 下面我们具体来看一下在项目中的使用。\n\n1 依赖配置\n\n下载代码: https://github.com/tcoulter/jockeyjs, 将JockeyJS.Android导入到工程中。\n\n2 jockeyjs配置\n\njockeyjs有两种使用方式\n\n方式一:\n\n只在一个Activity中使用jockey或者多Activity共享一个jockey实例\n\n```java\n//Declare an instance of Jockey\nJockey jockey;\n\n//The WebView that we will be using, assumed to be instantiated either through findViewById or some method of injection.\nWebView webView;\n\nWebViewClient myWebViewClient;\n\n@Override\nprotected void onStart() {\n    super.onStart();\n\n    //Get the default JockeyImpl\n    jockey = JockeyImpl.getDefault();\n\n    //Configure your webView to be used with Jockey\n    jockey.configure(webView);\n\n    //Pass Jockey your custom WebViewClient\n    //Notice we can do this even after our webView has been configured.\n    jockey.setWebViewClient(myWebViewClient)\n\n    //Set some event handlers\n    setJockeyEvents();\n\n    //Load your webPage\n    webView.loadUrl(\"file:///your.url.com\");\n}\n```\n\n方式二:\n\n另一种就是把jockey当成一种全局的Service来用, 这种方式下我们可以在多个Activity之间甚至整个应用内共享handler. 当然我们同样需要\n把jockey的生命周期和应用的生命周期绑定在一起。\n\n```java\n//First we declare the members involved in using Jockey\n\n//A WebView to interact with\nprivate WebView webView;\n\n//Our instance of the Jockey interface\nprivate Jockey jockey;\n\n//A helper for binding services\nprivate boolean _bound;\n\n//A service connection for making use of the JockeyService\nprivate ServiceConnection _connection = new ServiceConnection() {\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n        _bound = false;\n    }\n\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n        JockeyBinder binder = (JockeyBinder) service;\n\n        //Retrieves the instance of the JockeyService from the binder\n        jockey = binder.getService();\n\n        //This will setup the WebView to enable JavaScript execution and provide a custom JockeyWebViewClient\n        jockey.configure(webView);\n\n        //Make Jockey start listening for events\n        setJockeyEvents();\n\n        _bound = true;\n\n        //Redirect the WebView to your webpage.\n        webView.loadUrl(\"file:///android_assets/index.html\");\n    }\n\n}\n\n///....Other member variables....////\n\n\n//Then we bind the JockeyService to our activity through a helper function in our onStart method\n@Override\nprotected void onStart() {\n    super.onStart();\n    JockeyService.bind(this, _connection);\n}\n\n//In order to bind this with the Android lifecycle we need to make sure that the service also shuts down at the appropriate time.\n@Override\nprotected void onStop() {\n    super.onStop();\n    if (_bound) {\n        JockeyService.unbind(this, _connection);\n    }\n}\n```\n\n\n以上便是jockeyjs的大致用法.","slug":"WebView三部曲：代码交互","published":1,"updated":"2017-07-12T10:02:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52acn6u0008oncwmqirgs8t","content":"<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"WebView三部曲：代码交互\"><a href=\"#WebView三部曲：代码交互\" class=\"headerlink\" title=\"WebView三部曲：代码交互\"></a>WebView三部曲：代码交互</h1><p>作者: 郭孝星<br>邮箱: guoxiaoxingse@gmail.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>简书: <a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/users/66a47e04215b/latest_articles</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问<br>题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文<br>章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<h1 id=\"一-Android原生方案\"><a href=\"#一-Android原生方案\" class=\"headerlink\" title=\"一 Android原生方案\"></a>一 Android原生方案</h1><p>关于WebView中Java代码和JS代码的交互实现, Android给了一套原生的方案, 我们先来看看原生的用法。后面我们还会讲到其他的开源方法。</p>\n<p>JavaScript代码和Android代码是通过addJavascriptInterface()来建立连接的, 我们来看下具体的用法。</p>\n<p>1 设置WebView支持JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>2 在Android工程里定义一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppInterface</span> </span>&#123;</div><div class=\"line\">    Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Instantiate the interface and set the context */</span></div><div class=\"line\">    WebAppInterface(Context c) &#123;</div><div class=\"line\">        mContext = c;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Show a toast from the web page */</span></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showToast</span><span class=\"params\">(String toast)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>: API &gt;= 17时, 必须在被JavaScript调用的Android方法前添加@JavascriptInterface注解, 否则将无法识别。</p>\n<p>3 在Android代码中将该接口添加到WebView</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView webView = (WebView) findViewById(R.id.webview);</div><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> WebAppInterface(<span class=\"keyword\">this</span>), <span class=\"string\">\"Android\"</span>);</div></pre></td></tr></table></figure>\n<p>这个”Android”就是我们为这个接口取的别名, 在JavaScript就可以通过Android.showToast(toast)这种方式来调用此方法。</p>\n<p>4 在JavaScript中调用Android方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"Say hello\"</span> onClick=<span class=\"string\">\"showAndroidToast('Hello Android!')\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showAndroidToast</span>(<span class=\"params\">toast</span>) </span>&#123;</div><div class=\"line\">        Android.showToast(toast);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在JavaScript中我们不用再去实例化WebAppInterface接口, WebView会自动帮我们完成这一工作, 使它能够为WebPage所用。</p>\n<p><strong>注意</strong>:</p>\n<p>由于addJavascriptInterface()给予了JS代码控制应用的能力, 这是一项非常有用的特性, 但同时也带来了安全上的隐患, </p>\n<blockquote>\n<p>Using addJavascriptInterface() allows JavaScript to control your Android application. This can be a very useful feature or a dangerous<br>security issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by an unknown person or<br>process), then an attacker can include HTML that executes your client-side code and possibly any code of the attacker’s choosing. As such,<br>you should not use addJavascriptInterface() unless you wrote all of the HTML and JavaScript that appears in your WebView. You should also<br>not allow the user to navigate to other web pages that are not your own, within your WebView (instead, allow the user’s default browser<br>application to open foreign links—by default, the user’s web browser opens all URL links, so be careful only if you handle page navigation<br>as described in the following section).</p>\n</blockquote>\n<p>下面正式引入我们在项目中常用的两套开源的替代方案</p>\n<h1 id=\"二-jockeyjs开源方案\"><a href=\"#二-jockeyjs开源方案\" class=\"headerlink\" title=\"二 jockeyjs开源方案\"></a>二 jockeyjs开源方案</h1><p><a href=\"https://github.com/tcoulter/jockeyjs\" target=\"_blank\" rel=\"external\">jockeyjs</a>是一套IOS/Android双平台的Native和JS交互方法, 比较适合用在项目中。</p>\n<blockquote>\n<p>Library to facilitate communication between iOS apps and JS apps running inside a UIWebView</p>\n</blockquote>\n<p>jockeyjs对Native和JS的交互做了优美的封装, 事件的发送与接收都可以通过send()和on()来完成。我们先简单的看一下Event的发送与接收。</p>\n<p>Sending events from app to JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Send an event to JavaScript, passing a payload</span></div><div class=\"line\">jockey.send(<span class=\"string\">\"event-name\"</span>, webView, payload);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//With a callback to execute after all listeners have finished</span></div><div class=\"line\">jockey.send(<span class=\"string\">\"event-name\"</span>, webView, payload, <span class=\"keyword\">new</span> JockeyCallback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Your execution code</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Receiving events from app in JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Listen for an event from iOS, but don't notify iOS we've completed processing</span></div><div class=\"line\"><span class=\"comment\">// until an asynchronous function has finished (in this case a timeout).</span></div><div class=\"line\">Jockey.on(<span class=\"string\">\"event-name\"</span>, function(payload, complete) &#123;</div><div class=\"line\">  <span class=\"comment\">// Example of event'ed handler.</span></div><div class=\"line\">  setTimeout(function() &#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Timeout over!\"</span>);</div><div class=\"line\">    complete();</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Sending events from JavaScript to app</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Send an event to iOS.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Send an event to iOS, passing an optional payload.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>, &#123;</div><div class=\"line\">  key: <span class=\"string\">\"value\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Send an event to iOS, pass an optional payload, and catch the callback when all the</span></div><div class=\"line\"><span class=\"comment\">// iOS listeners have finished processing.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>, &#123;</div><div class=\"line\">  key: <span class=\"string\">\"value\"</span></div><div class=\"line\">&#125;, function() &#123;</div><div class=\"line\">  alert(<span class=\"string\">\"iOS has finished processing!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Receiving events from JavaScript in app</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Listen for an event from JavaScript and log a message when we have receied it.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, <span class=\"keyword\">new</span> JockeyHandler() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"string\">\"jockey\"</span>, <span class=\"string\">\"Things are happening\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Listen for an event from JavaScript, but don't notify the JavaScript that the listener has completed</span></div><div class=\"line\"><span class=\"comment\">//until an asynchronous function has finished</span></div><div class=\"line\"><span class=\"comment\">//Note: Because this method is executed in the background, if you want the method to interact with the UI thread</span></div><div class=\"line\"><span class=\"comment\">//it will need to use something like a android.os.Handler to post to the UI thread.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, <span class=\"keyword\">new</span> JockeyAsyncHandler() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Do something asynchronously</span></div><div class=\"line\">        <span class=\"comment\">//No need to called completed(), Jockey will take care of that for you!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//We can even chain together several handlers so that they get processed in sequence.</span></div><div class=\"line\"><span class=\"comment\">//Here we also see an example of the NativeOS interface which allows us to chain some common</span></div><div class=\"line\"><span class=\"comment\">//system handlers to simulate native UI interactions.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, nativeOS(<span class=\"keyword\">this</span>)</div><div class=\"line\">            .toast(<span class=\"string\">\"Event occurred!\"</span>)</div><div class=\"line\">            .vibrate(<span class=\"number\">100</span>), <span class=\"comment\">//Don't forget to grant permission</span></div><div class=\"line\">            <span class=\"keyword\">new</span> JockeyHandler() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...More Handlers</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//If you would like to stop listening for a specific event</span></div><div class=\"line\">jockey.off(<span class=\"string\">\"event-name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//If you would like to stop listening to ALL events</span></div><div class=\"line\">jockey.clear();</div></pre></td></tr></table></figure>\n<p>通过上面的代码, 我们对jockeyjs的使用有了大致的理解, 下面我们具体来看一下在项目中的使用。</p>\n<p>1 依赖配置</p>\n<p>下载代码: <a href=\"https://github.com/tcoulter/jockeyjs\" target=\"_blank\" rel=\"external\">https://github.com/tcoulter/jockeyjs</a>, 将JockeyJS.Android导入到工程中。</p>\n<p>2 jockeyjs配置</p>\n<p>jockeyjs有两种使用方式</p>\n<p>方式一:</p>\n<p>只在一个Activity中使用jockey或者多Activity共享一个jockey实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Declare an instance of Jockey</span></div><div class=\"line\">Jockey jockey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//The WebView that we will be using, assumed to be instantiated either through findViewById or some method of injection.</span></div><div class=\"line\">WebView webView;</div><div class=\"line\"></div><div class=\"line\">WebViewClient myWebViewClient;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Get the default JockeyImpl</span></div><div class=\"line\">    jockey = JockeyImpl.getDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Configure your webView to be used with Jockey</span></div><div class=\"line\">    jockey.configure(webView);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Pass Jockey your custom WebViewClient</span></div><div class=\"line\">    <span class=\"comment\">//Notice we can do this even after our webView has been configured.</span></div><div class=\"line\">    jockey.setWebViewClient(myWebViewClient)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Set some event handlers</span></div><div class=\"line\">    setJockeyEvents();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Load your webPage</span></div><div class=\"line\">    webView.loadUrl(<span class=\"string\">\"file:///your.url.com\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>方式二:</p>\n<p>另一种就是把jockey当成一种全局的Service来用, 这种方式下我们可以在多个Activity之间甚至整个应用内共享handler. 当然我们同样需要<br>把jockey的生命周期和应用的生命周期绑定在一起。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//First we declare the members involved in using Jockey</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A WebView to interact with</span></div><div class=\"line\"><span class=\"keyword\">private</span> WebView webView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Our instance of the Jockey interface</span></div><div class=\"line\"><span class=\"keyword\">private</span> Jockey jockey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A helper for binding services</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> _bound;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A service connection for making use of the JockeyService</span></div><div class=\"line\"><span class=\"keyword\">private</span> ServiceConnection _connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">        _bound = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">        JockeyBinder binder = (JockeyBinder) service;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Retrieves the instance of the JockeyService from the binder</span></div><div class=\"line\">        jockey = binder.getService();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//This will setup the WebView to enable JavaScript execution and provide a custom JockeyWebViewClient</span></div><div class=\"line\">        jockey.configure(webView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Make Jockey start listening for events</span></div><div class=\"line\">        setJockeyEvents();</div><div class=\"line\"></div><div class=\"line\">        _bound = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Redirect the WebView to your webpage.</span></div><div class=\"line\">        webView.loadUrl(<span class=\"string\">\"file:///android_assets/index.html\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///....Other member variables....////</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Then we bind the JockeyService to our activity through a helper function in our onStart method</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">    JockeyService.bind(<span class=\"keyword\">this</span>, _connection);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//In order to bind this with the Android lifecycle we need to make sure that the service also shuts down at the appropriate time.</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">    <span class=\"keyword\">if</span> (_bound) &#123;</div><div class=\"line\">        JockeyService.unbind(<span class=\"keyword\">this</span>, _connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上便是jockeyjs的大致用法.</p>\n","site":{"data":{}},"excerpt":"<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>","more":"<h1 id=\"WebView三部曲：代码交互\"><a href=\"#WebView三部曲：代码交互\" class=\"headerlink\" title=\"WebView三部曲：代码交互\"></a>WebView三部曲：代码交互</h1><p>作者: 郭孝星<br>邮箱: guoxiaoxingse@gmail.com<br>博客: <a href=\"https://guoxiaoxing.github.io/\">https://guoxiaoxing.github.io/</a><br>简书: <a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/users/66a47e04215b/latest_articles</a></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，字仲明，非著名程序员，代码洁癖患者，爱编程，好音乐，喜烹饪，爱一切有趣的事物和人。</p>\n</blockquote>\n<p><strong>关于文章</strong></p>\n<blockquote>\n<p>作者的文章都会同时发布在个人博客和简书博客上, 文章顶部也会附上文章的Github链接。如果文章中有什么疑问欢迎发邮件与我交流, 对于交流的问<br>题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你有所帮助, 也欢迎去star文<br>章, 关注文章的最新的动态。</p>\n</blockquote>\n<p>本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:</p>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：基本用法.md\" target=\"_blank\" rel=\"external\">WebView三部曲：基本用法</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：代码交互.md\" target=\"_blank\" rel=\"external\">WebView三部曲：代码交互</a> </li>\n<li><a href=\"https://github.com/guoxiaoxing/android-hybird-app/blob/master/webview/doc/WebView三部曲：性能优化.md\" target=\"_blank\" rel=\"external\">WebView三部曲：性能优化</a></li>\n</ul>\n<h1 id=\"一-Android原生方案\"><a href=\"#一-Android原生方案\" class=\"headerlink\" title=\"一 Android原生方案\"></a>一 Android原生方案</h1><p>关于WebView中Java代码和JS代码的交互实现, Android给了一套原生的方案, 我们先来看看原生的用法。后面我们还会讲到其他的开源方法。</p>\n<p>JavaScript代码和Android代码是通过addJavascriptInterface()来建立连接的, 我们来看下具体的用法。</p>\n<p>1 设置WebView支持JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<p>2 在Android工程里定义一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppInterface</span> </span>&#123;</div><div class=\"line\">    Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Instantiate the interface and set the context */</span></div><div class=\"line\">    WebAppInterface(Context c) &#123;</div><div class=\"line\">        mContext = c;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Show a toast from the web page */</span></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showToast</span><span class=\"params\">(String toast)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>: API &gt;= 17时, 必须在被JavaScript调用的Android方法前添加@JavascriptInterface注解, 否则将无法识别。</p>\n<p>3 在Android代码中将该接口添加到WebView</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebView webView = (WebView) findViewById(R.id.webview);</div><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> WebAppInterface(<span class=\"keyword\">this</span>), <span class=\"string\">\"Android\"</span>);</div></pre></td></tr></table></figure>\n<p>这个”Android”就是我们为这个接口取的别名, 在JavaScript就可以通过Android.showToast(toast)这种方式来调用此方法。</p>\n<p>4 在JavaScript中调用Android方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"Say hello\"</span> onClick=<span class=\"string\">\"showAndroidToast('Hello Android!')\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showAndroidToast</span>(<span class=\"params\">toast</span>) </span>&#123;</div><div class=\"line\">        Android.showToast(toast);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在JavaScript中我们不用再去实例化WebAppInterface接口, WebView会自动帮我们完成这一工作, 使它能够为WebPage所用。</p>\n<p><strong>注意</strong>:</p>\n<p>由于addJavascriptInterface()给予了JS代码控制应用的能力, 这是一项非常有用的特性, 但同时也带来了安全上的隐患, </p>\n<blockquote>\n<p>Using addJavascriptInterface() allows JavaScript to control your Android application. This can be a very useful feature or a dangerous<br>security issue. When the HTML in the WebView is untrustworthy (for example, part or all of the HTML is provided by an unknown person or<br>process), then an attacker can include HTML that executes your client-side code and possibly any code of the attacker’s choosing. As such,<br>you should not use addJavascriptInterface() unless you wrote all of the HTML and JavaScript that appears in your WebView. You should also<br>not allow the user to navigate to other web pages that are not your own, within your WebView (instead, allow the user’s default browser<br>application to open foreign links—by default, the user’s web browser opens all URL links, so be careful only if you handle page navigation<br>as described in the following section).</p>\n</blockquote>\n<p>下面正式引入我们在项目中常用的两套开源的替代方案</p>\n<h1 id=\"二-jockeyjs开源方案\"><a href=\"#二-jockeyjs开源方案\" class=\"headerlink\" title=\"二 jockeyjs开源方案\"></a>二 jockeyjs开源方案</h1><p><a href=\"https://github.com/tcoulter/jockeyjs\" target=\"_blank\" rel=\"external\">jockeyjs</a>是一套IOS/Android双平台的Native和JS交互方法, 比较适合用在项目中。</p>\n<blockquote>\n<p>Library to facilitate communication between iOS apps and JS apps running inside a UIWebView</p>\n</blockquote>\n<p>jockeyjs对Native和JS的交互做了优美的封装, 事件的发送与接收都可以通过send()和on()来完成。我们先简单的看一下Event的发送与接收。</p>\n<p>Sending events from app to JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Send an event to JavaScript, passing a payload</span></div><div class=\"line\">jockey.send(<span class=\"string\">\"event-name\"</span>, webView, payload);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//With a callback to execute after all listeners have finished</span></div><div class=\"line\">jockey.send(<span class=\"string\">\"event-name\"</span>, webView, payload, <span class=\"keyword\">new</span> JockeyCallback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Your execution code</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Receiving events from app in JavaScript</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Listen for an event from iOS, but don't notify iOS we've completed processing</span></div><div class=\"line\"><span class=\"comment\">// until an asynchronous function has finished (in this case a timeout).</span></div><div class=\"line\">Jockey.on(<span class=\"string\">\"event-name\"</span>, function(payload, complete) &#123;</div><div class=\"line\">  <span class=\"comment\">// Example of event'ed handler.</span></div><div class=\"line\">  setTimeout(function() &#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Timeout over!\"</span>);</div><div class=\"line\">    complete();</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Sending events from JavaScript to app</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Send an event to iOS.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Send an event to iOS, passing an optional payload.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>, &#123;</div><div class=\"line\">  key: <span class=\"string\">\"value\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Send an event to iOS, pass an optional payload, and catch the callback when all the</span></div><div class=\"line\"><span class=\"comment\">// iOS listeners have finished processing.</span></div><div class=\"line\">Jockey.send(<span class=\"string\">\"event-name\"</span>, &#123;</div><div class=\"line\">  key: <span class=\"string\">\"value\"</span></div><div class=\"line\">&#125;, function() &#123;</div><div class=\"line\">  alert(<span class=\"string\">\"iOS has finished processing!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Receiving events from JavaScript in app</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Listen for an event from JavaScript and log a message when we have receied it.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, <span class=\"keyword\">new</span> JockeyHandler() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"string\">\"jockey\"</span>, <span class=\"string\">\"Things are happening\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Listen for an event from JavaScript, but don't notify the JavaScript that the listener has completed</span></div><div class=\"line\"><span class=\"comment\">//until an asynchronous function has finished</span></div><div class=\"line\"><span class=\"comment\">//Note: Because this method is executed in the background, if you want the method to interact with the UI thread</span></div><div class=\"line\"><span class=\"comment\">//it will need to use something like a android.os.Handler to post to the UI thread.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, <span class=\"keyword\">new</span> JockeyAsyncHandler() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Do something asynchronously</span></div><div class=\"line\">        <span class=\"comment\">//No need to called completed(), Jockey will take care of that for you!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//We can even chain together several handlers so that they get processed in sequence.</span></div><div class=\"line\"><span class=\"comment\">//Here we also see an example of the NativeOS interface which allows us to chain some common</span></div><div class=\"line\"><span class=\"comment\">//system handlers to simulate native UI interactions.</span></div><div class=\"line\">jockey.on(<span class=\"string\">\"event-name\"</span>, nativeOS(<span class=\"keyword\">this</span>)</div><div class=\"line\">            .toast(<span class=\"string\">\"Event occurred!\"</span>)</div><div class=\"line\">            .vibrate(<span class=\"number\">100</span>), <span class=\"comment\">//Don't forget to grant permission</span></div><div class=\"line\">            <span class=\"keyword\">new</span> JockeyHandler() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPerform</span><span class=\"params\">(Map&lt;Object, Object&gt; payload)</span> </span>&#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...More Handlers</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//If you would like to stop listening for a specific event</span></div><div class=\"line\">jockey.off(<span class=\"string\">\"event-name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//If you would like to stop listening to ALL events</span></div><div class=\"line\">jockey.clear();</div></pre></td></tr></table></figure>\n<p>通过上面的代码, 我们对jockeyjs的使用有了大致的理解, 下面我们具体来看一下在项目中的使用。</p>\n<p>1 依赖配置</p>\n<p>下载代码: <a href=\"https://github.com/tcoulter/jockeyjs\" target=\"_blank\" rel=\"external\">https://github.com/tcoulter/jockeyjs</a>, 将JockeyJS.Android导入到工程中。</p>\n<p>2 jockeyjs配置</p>\n<p>jockeyjs有两种使用方式</p>\n<p>方式一:</p>\n<p>只在一个Activity中使用jockey或者多Activity共享一个jockey实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Declare an instance of Jockey</span></div><div class=\"line\">Jockey jockey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//The WebView that we will be using, assumed to be instantiated either through findViewById or some method of injection.</span></div><div class=\"line\">WebView webView;</div><div class=\"line\"></div><div class=\"line\">WebViewClient myWebViewClient;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Get the default JockeyImpl</span></div><div class=\"line\">    jockey = JockeyImpl.getDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Configure your webView to be used with Jockey</span></div><div class=\"line\">    jockey.configure(webView);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Pass Jockey your custom WebViewClient</span></div><div class=\"line\">    <span class=\"comment\">//Notice we can do this even after our webView has been configured.</span></div><div class=\"line\">    jockey.setWebViewClient(myWebViewClient)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Set some event handlers</span></div><div class=\"line\">    setJockeyEvents();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Load your webPage</span></div><div class=\"line\">    webView.loadUrl(<span class=\"string\">\"file:///your.url.com\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>方式二:</p>\n<p>另一种就是把jockey当成一种全局的Service来用, 这种方式下我们可以在多个Activity之间甚至整个应用内共享handler. 当然我们同样需要<br>把jockey的生命周期和应用的生命周期绑定在一起。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//First we declare the members involved in using Jockey</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A WebView to interact with</span></div><div class=\"line\"><span class=\"keyword\">private</span> WebView webView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Our instance of the Jockey interface</span></div><div class=\"line\"><span class=\"keyword\">private</span> Jockey jockey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A helper for binding services</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> _bound;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//A service connection for making use of the JockeyService</span></div><div class=\"line\"><span class=\"keyword\">private</span> ServiceConnection _connection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">        _bound = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">        JockeyBinder binder = (JockeyBinder) service;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Retrieves the instance of the JockeyService from the binder</span></div><div class=\"line\">        jockey = binder.getService();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//This will setup the WebView to enable JavaScript execution and provide a custom JockeyWebViewClient</span></div><div class=\"line\">        jockey.configure(webView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Make Jockey start listening for events</span></div><div class=\"line\">        setJockeyEvents();</div><div class=\"line\"></div><div class=\"line\">        _bound = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//Redirect the WebView to your webpage.</span></div><div class=\"line\">        webView.loadUrl(<span class=\"string\">\"file:///android_assets/index.html\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///....Other member variables....////</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Then we bind the JockeyService to our activity through a helper function in our onStart method</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">    JockeyService.bind(<span class=\"keyword\">this</span>, _connection);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//In order to bind this with the Android lifecycle we need to make sure that the service also shuts down at the appropriate time.</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">    <span class=\"keyword\">if</span> (_bound) &#123;</div><div class=\"line\">        JockeyService.unbind(<span class=\"keyword\">this</span>, _connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上便是jockeyjs的大致用法.</p>"},{"title":"React Native 原理分析与实践系列文章","date":"2016-12-31T16:00:00.000Z","_content":"\n篇系列文章主要分析ReactNative源码，分析ReactNative的启动流程、渲染原理、通信机制与线程模型等方面内容。\n\n<!-- more -->\n\n# React Native\n\n<img src=\"https://github.com/guoxiaoxing/awesome-react-native/raw/master/art/react_native_banner.png\" width=\"1000\"/>\n\n**关于作者**\n\n>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，爱好广泛，技术栈主要涉及以下几个方面\n>\n>- Android/Linux\n>- Java/Kotlin/JVM\n>- Python\n>- JavaScript/React/ReactNative\n>- DataStructure/Algorithm\n>\n>文章首发于[Github](https://github.com/guoxiaoxing)，后续也会同步在[简书](http://www.jianshu.com/users/66a47e04215b/latest_articles)与\n[CSDN](http://blog.csdn.net/allenwells)等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。\n\n\n文章持续更新中...\n\n## ReactNative基础篇\n\n>本篇系列文章主要介绍ReactNative的基本组件以及一些基本用法。\n\n- [1ReactNative实践篇：环境配置与编译](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative基础篇/1ReactNative实践篇：环境配置与编译.md)\n- 2ReactNative实践篇：基本概念\n- 3ReactNative实践篇：基本组件-View\n- 4ReactNative实践篇：基本组件-Text、TextInput与Button\n- 5ReactNative实践篇：基本组件-ScrollView、ListView\n- 6ReactNative实践篇：基本组件-MapView\n- 7ReactNative实践篇：基本组件-WebView\n- 8ReactNative实践篇：基本组件-Modal\n- 9ReactNative实践篇：基本组件-Navigator\n- 10ReactNative实践篇：基本组件-Picker\n- 11ReactNative实践篇：基本组件-Slider\n- 12ReactNative实践篇：基本组件-Switch\n- 13ReactNative实践篇：基本组件-Touchable系列\n- 14ReactNative实践篇：基本组件-DrawerLayoutAndroid\n- 15ReactNative实践篇：基本组件-ProgressBarAndroid\n- 16ReactNative实践篇：基本组件-ToolbarAndroid\n- 17ReactNative实践篇：基本组件-ViewPagerAndroid\n- 18ReactNative实践篇：网络请求\n- 19ReactNative实践篇：网页浏览器、音视频媒体播放\n\n## ReactNative源码篇\n\n>本篇系列文章主要分析ReactNative源码，分析ReactNative的启动流程、渲染原理、通信机制与线程模型等方面内容。\n\n- [1ReactNative源码篇：源码初识](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/1ReactNative源码篇：源码初识.md)\n- [2ReactNative源码篇：代码调用](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/2ReactNative源码篇：代码调用.md)\n- [3ReactNative源码篇：启动流程](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/3ReactNative源码篇：启动流程.md)\n- [4ReactNative源码篇：渲染原理](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/4ReactNative源码篇：渲染原理.md)\n- [5ReactNative源码篇：线程模型](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/5ReactNative源码篇：线程模型.md)\n- [6ReactNative源码篇：通信机制](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/6ReactNative源码篇：通信机制.md)\n\t\t\t\t\t\n## ReactNative实践篇\n\n>本篇系列文章主要从性能优化、崩溃监测等方面进一步阐述ReactNative在生产环境下的最佳实践以及改进优化。\n\n- 1ReactNative实践篇：性能优化\n- 2ReactNative实践篇：崩溃监测\n\n\n## 附录\n\n### React Native优秀资料\n\n推荐一些关于React Native的比较高质量资料。\n\n- [Awesome React Native](https://github.com/jondot/awesome-react-native)：Awesome React Native components, news, tools, and learning material!\n- [react-native-guide](https://github.com/reactnativecn/react-native-guide)：React Native指南汇集了各类react-native学习资源、开源App和组件\n- [fangwei716/30-days-of-react-native](https://github.com/fangwei716/30-days-of-react-native)\n- [fbsamples/f8app](https://github.com/fbsamples/f8app)\n- [构建 F8 App / React Native 开发指南](https://f8-app.liaohuqiu.net/)\n\n### React Native技术分享\n\n前段时间在公司分享会上做了关于React Native实现原理的分享，以下是分享会的PPT。\n\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片01.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片02.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片03.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片04.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片05.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片06.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片07.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片08.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片09.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片10.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片11.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片12.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片13.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片14.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片15.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片16.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片17.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片18.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片19.png\"/>\n","source":"_posts/ReactNative原理分析与实践系列文章.md","raw":"title: React Native 原理分析与实践系列文章\ndate: 2017-1-1 00:00:00\ntags:\n---\n\n篇系列文章主要分析ReactNative源码，分析ReactNative的启动流程、渲染原理、通信机制与线程模型等方面内容。\n\n<!-- more -->\n\n# React Native\n\n<img src=\"https://github.com/guoxiaoxing/awesome-react-native/raw/master/art/react_native_banner.png\" width=\"1000\"/>\n\n**关于作者**\n\n>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，爱好广泛，技术栈主要涉及以下几个方面\n>\n>- Android/Linux\n>- Java/Kotlin/JVM\n>- Python\n>- JavaScript/React/ReactNative\n>- DataStructure/Algorithm\n>\n>文章首发于[Github](https://github.com/guoxiaoxing)，后续也会同步在[简书](http://www.jianshu.com/users/66a47e04215b/latest_articles)与\n[CSDN](http://blog.csdn.net/allenwells)等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。\n\n\n文章持续更新中...\n\n## ReactNative基础篇\n\n>本篇系列文章主要介绍ReactNative的基本组件以及一些基本用法。\n\n- [1ReactNative实践篇：环境配置与编译](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative基础篇/1ReactNative实践篇：环境配置与编译.md)\n- 2ReactNative实践篇：基本概念\n- 3ReactNative实践篇：基本组件-View\n- 4ReactNative实践篇：基本组件-Text、TextInput与Button\n- 5ReactNative实践篇：基本组件-ScrollView、ListView\n- 6ReactNative实践篇：基本组件-MapView\n- 7ReactNative实践篇：基本组件-WebView\n- 8ReactNative实践篇：基本组件-Modal\n- 9ReactNative实践篇：基本组件-Navigator\n- 10ReactNative实践篇：基本组件-Picker\n- 11ReactNative实践篇：基本组件-Slider\n- 12ReactNative实践篇：基本组件-Switch\n- 13ReactNative实践篇：基本组件-Touchable系列\n- 14ReactNative实践篇：基本组件-DrawerLayoutAndroid\n- 15ReactNative实践篇：基本组件-ProgressBarAndroid\n- 16ReactNative实践篇：基本组件-ToolbarAndroid\n- 17ReactNative实践篇：基本组件-ViewPagerAndroid\n- 18ReactNative实践篇：网络请求\n- 19ReactNative实践篇：网页浏览器、音视频媒体播放\n\n## ReactNative源码篇\n\n>本篇系列文章主要分析ReactNative源码，分析ReactNative的启动流程、渲染原理、通信机制与线程模型等方面内容。\n\n- [1ReactNative源码篇：源码初识](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/1ReactNative源码篇：源码初识.md)\n- [2ReactNative源码篇：代码调用](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/2ReactNative源码篇：代码调用.md)\n- [3ReactNative源码篇：启动流程](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/3ReactNative源码篇：启动流程.md)\n- [4ReactNative源码篇：渲染原理](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/4ReactNative源码篇：渲染原理.md)\n- [5ReactNative源码篇：线程模型](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/5ReactNative源码篇：线程模型.md)\n- [6ReactNative源码篇：通信机制](https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/6ReactNative源码篇：通信机制.md)\n\t\t\t\t\t\n## ReactNative实践篇\n\n>本篇系列文章主要从性能优化、崩溃监测等方面进一步阐述ReactNative在生产环境下的最佳实践以及改进优化。\n\n- 1ReactNative实践篇：性能优化\n- 2ReactNative实践篇：崩溃监测\n\n\n## 附录\n\n### React Native优秀资料\n\n推荐一些关于React Native的比较高质量资料。\n\n- [Awesome React Native](https://github.com/jondot/awesome-react-native)：Awesome React Native components, news, tools, and learning material!\n- [react-native-guide](https://github.com/reactnativecn/react-native-guide)：React Native指南汇集了各类react-native学习资源、开源App和组件\n- [fangwei716/30-days-of-react-native](https://github.com/fangwei716/30-days-of-react-native)\n- [fbsamples/f8app](https://github.com/fbsamples/f8app)\n- [构建 F8 App / React Native 开发指南](https://f8-app.liaohuqiu.net/)\n\n### React Native技术分享\n\n前段时间在公司分享会上做了关于React Native实现原理的分享，以下是分享会的PPT。\n\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片01.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片02.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片03.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片04.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片05.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片06.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片07.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片08.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片09.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片10.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片11.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片12.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片13.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片14.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片15.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片16.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片17.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片18.png\"/>\n<img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片19.png\"/>\n","slug":"ReactNative原理分析与实践系列文章","published":1,"updated":"2017-07-13T10:13:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52acn6y0009oncwb87fna32","content":"<p>篇系列文章主要分析ReactNative源码，分析ReactNative的启动流程、渲染原理、通信机制与线程模型等方面内容。</p>\n<a id=\"more\"></a>\n<h1 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React Native\"></a>React Native</h1><p><img src=\"https://github.com/guoxiaoxing/awesome-react-native/raw/master/art/react_native_banner.png\" width=\"1000\"></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，爱好广泛，技术栈主要涉及以下几个方面</p>\n<ul>\n<li>Android/Linux</li>\n<li>Java/Kotlin/JVM</li>\n<li>Python</li>\n<li>JavaScript/React/ReactNative</li>\n<li>DataStructure/Algorithm</li>\n</ul>\n<p>文章首发于<a href=\"https://github.com/guoxiaoxing\" target=\"_blank\" rel=\"external\">Github</a>，后续也会同步在<a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">简书</a>与<br><a href=\"http://blog.csdn.net/allenwells\" target=\"_blank\" rel=\"external\">CSDN</a>等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。</p>\n</blockquote>\n<p>文章持续更新中…</p>\n<h2 id=\"ReactNative基础篇\"><a href=\"#ReactNative基础篇\" class=\"headerlink\" title=\"ReactNative基础篇\"></a>ReactNative基础篇</h2><blockquote>\n<p>本篇系列文章主要介绍ReactNative的基本组件以及一些基本用法。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative基础篇/1ReactNative实践篇：环境配置与编译.md\" target=\"_blank\" rel=\"external\">1ReactNative实践篇：环境配置与编译</a></li>\n<li>2ReactNative实践篇：基本概念</li>\n<li>3ReactNative实践篇：基本组件-View</li>\n<li>4ReactNative实践篇：基本组件-Text、TextInput与Button</li>\n<li>5ReactNative实践篇：基本组件-ScrollView、ListView</li>\n<li>6ReactNative实践篇：基本组件-MapView</li>\n<li>7ReactNative实践篇：基本组件-WebView</li>\n<li>8ReactNative实践篇：基本组件-Modal</li>\n<li>9ReactNative实践篇：基本组件-Navigator</li>\n<li>10ReactNative实践篇：基本组件-Picker</li>\n<li>11ReactNative实践篇：基本组件-Slider</li>\n<li>12ReactNative实践篇：基本组件-Switch</li>\n<li>13ReactNative实践篇：基本组件-Touchable系列</li>\n<li>14ReactNative实践篇：基本组件-DrawerLayoutAndroid</li>\n<li>15ReactNative实践篇：基本组件-ProgressBarAndroid</li>\n<li>16ReactNative实践篇：基本组件-ToolbarAndroid</li>\n<li>17ReactNative实践篇：基本组件-ViewPagerAndroid</li>\n<li>18ReactNative实践篇：网络请求</li>\n<li>19ReactNative实践篇：网页浏览器、音视频媒体播放</li>\n</ul>\n<h2 id=\"ReactNative源码篇\"><a href=\"#ReactNative源码篇\" class=\"headerlink\" title=\"ReactNative源码篇\"></a>ReactNative源码篇</h2><blockquote>\n<p>本篇系列文章主要分析ReactNative源码，分析ReactNative的启动流程、渲染原理、通信机制与线程模型等方面内容。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/1ReactNative源码篇：源码初识.md\" target=\"_blank\" rel=\"external\">1ReactNative源码篇：源码初识</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/2ReactNative源码篇：代码调用.md\" target=\"_blank\" rel=\"external\">2ReactNative源码篇：代码调用</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/3ReactNative源码篇：启动流程.md\" target=\"_blank\" rel=\"external\">3ReactNative源码篇：启动流程</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/4ReactNative源码篇：渲染原理.md\" target=\"_blank\" rel=\"external\">4ReactNative源码篇：渲染原理</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/5ReactNative源码篇：线程模型.md\" target=\"_blank\" rel=\"external\">5ReactNative源码篇：线程模型</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/6ReactNative源码篇：通信机制.md\" target=\"_blank\" rel=\"external\">6ReactNative源码篇：通信机制</a></li>\n</ul>\n<h2 id=\"ReactNative实践篇\"><a href=\"#ReactNative实践篇\" class=\"headerlink\" title=\"ReactNative实践篇\"></a>ReactNative实践篇</h2><blockquote>\n<p>本篇系列文章主要从性能优化、崩溃监测等方面进一步阐述ReactNative在生产环境下的最佳实践以及改进优化。</p>\n</blockquote>\n<ul>\n<li>1ReactNative实践篇：性能优化</li>\n<li>2ReactNative实践篇：崩溃监测</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"React-Native优秀资料\"><a href=\"#React-Native优秀资料\" class=\"headerlink\" title=\"React Native优秀资料\"></a>React Native优秀资料</h3><p>推荐一些关于React Native的比较高质量资料。</p>\n<ul>\n<li><a href=\"https://github.com/jondot/awesome-react-native\" target=\"_blank\" rel=\"external\">Awesome React Native</a>：Awesome React Native components, news, tools, and learning material!</li>\n<li><a href=\"https://github.com/reactnativecn/react-native-guide\" target=\"_blank\" rel=\"external\">react-native-guide</a>：React Native指南汇集了各类react-native学习资源、开源App和组件</li>\n<li><a href=\"https://github.com/fangwei716/30-days-of-react-native\" target=\"_blank\" rel=\"external\">fangwei716/30-days-of-react-native</a></li>\n<li><a href=\"https://github.com/fbsamples/f8app\" target=\"_blank\" rel=\"external\">fbsamples/f8app</a></li>\n<li><a href=\"https://f8-app.liaohuqiu.net/\" target=\"_blank\" rel=\"external\">构建 F8 App / React Native 开发指南</a></li>\n</ul>\n<h3 id=\"React-Native技术分享\"><a href=\"#React-Native技术分享\" class=\"headerlink\" title=\"React Native技术分享\"></a>React Native技术分享</h3><p>前段时间在公司分享会上做了关于React Native实现原理的分享，以下是分享会的PPT。</p>\n<p><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片01.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片02.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片03.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片04.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片05.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片06.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片07.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片08.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片09.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片10.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片11.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片12.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片13.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片14.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片15.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片16.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片17.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片18.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片19.png\"></p>\n","site":{"data":{}},"excerpt":"<p>篇系列文章主要分析ReactNative源码，分析ReactNative的启动流程、渲染原理、通信机制与线程模型等方面内容。</p>","more":"<h1 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React Native\"></a>React Native</h1><p><img src=\"https://github.com/guoxiaoxing/awesome-react-native/raw/master/art/react_native_banner.png\" width=\"1000\"></p>\n<p><strong>关于作者</strong></p>\n<blockquote>\n<p>郭孝星，非著名程序员，主要从事Android平台基础架构与中间件方面的工作，爱好广泛，技术栈主要涉及以下几个方面</p>\n<ul>\n<li>Android/Linux</li>\n<li>Java/Kotlin/JVM</li>\n<li>Python</li>\n<li>JavaScript/React/ReactNative</li>\n<li>DataStructure/Algorithm</li>\n</ul>\n<p>文章首发于<a href=\"https://github.com/guoxiaoxing\" target=\"_blank\" rel=\"external\">Github</a>，后续也会同步在<a href=\"http://www.jianshu.com/users/66a47e04215b/latest_articles\" target=\"_blank\" rel=\"external\">简书</a>与<br><a href=\"http://blog.csdn.net/allenwells\" target=\"_blank\" rel=\"external\">CSDN</a>等博客平台上。文章中如果有什么问题，欢迎发邮件与我交流，邮件可发至guoxiaoxingse@163.com。</p>\n</blockquote>\n<p>文章持续更新中…</p>\n<h2 id=\"ReactNative基础篇\"><a href=\"#ReactNative基础篇\" class=\"headerlink\" title=\"ReactNative基础篇\"></a>ReactNative基础篇</h2><blockquote>\n<p>本篇系列文章主要介绍ReactNative的基本组件以及一些基本用法。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative基础篇/1ReactNative实践篇：环境配置与编译.md\" target=\"_blank\" rel=\"external\">1ReactNative实践篇：环境配置与编译</a></li>\n<li>2ReactNative实践篇：基本概念</li>\n<li>3ReactNative实践篇：基本组件-View</li>\n<li>4ReactNative实践篇：基本组件-Text、TextInput与Button</li>\n<li>5ReactNative实践篇：基本组件-ScrollView、ListView</li>\n<li>6ReactNative实践篇：基本组件-MapView</li>\n<li>7ReactNative实践篇：基本组件-WebView</li>\n<li>8ReactNative实践篇：基本组件-Modal</li>\n<li>9ReactNative实践篇：基本组件-Navigator</li>\n<li>10ReactNative实践篇：基本组件-Picker</li>\n<li>11ReactNative实践篇：基本组件-Slider</li>\n<li>12ReactNative实践篇：基本组件-Switch</li>\n<li>13ReactNative实践篇：基本组件-Touchable系列</li>\n<li>14ReactNative实践篇：基本组件-DrawerLayoutAndroid</li>\n<li>15ReactNative实践篇：基本组件-ProgressBarAndroid</li>\n<li>16ReactNative实践篇：基本组件-ToolbarAndroid</li>\n<li>17ReactNative实践篇：基本组件-ViewPagerAndroid</li>\n<li>18ReactNative实践篇：网络请求</li>\n<li>19ReactNative实践篇：网页浏览器、音视频媒体播放</li>\n</ul>\n<h2 id=\"ReactNative源码篇\"><a href=\"#ReactNative源码篇\" class=\"headerlink\" title=\"ReactNative源码篇\"></a>ReactNative源码篇</h2><blockquote>\n<p>本篇系列文章主要分析ReactNative源码，分析ReactNative的启动流程、渲染原理、通信机制与线程模型等方面内容。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/1ReactNative源码篇：源码初识.md\" target=\"_blank\" rel=\"external\">1ReactNative源码篇：源码初识</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/2ReactNative源码篇：代码调用.md\" target=\"_blank\" rel=\"external\">2ReactNative源码篇：代码调用</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/3ReactNative源码篇：启动流程.md\" target=\"_blank\" rel=\"external\">3ReactNative源码篇：启动流程</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/4ReactNative源码篇：渲染原理.md\" target=\"_blank\" rel=\"external\">4ReactNative源码篇：渲染原理</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/5ReactNative源码篇：线程模型.md\" target=\"_blank\" rel=\"external\">5ReactNative源码篇：线程模型</a></li>\n<li><a href=\"https://github.com/guoxiaoxing/react-native/blob/master/doc/ReactNative源码篇/6ReactNative源码篇：通信机制.md\" target=\"_blank\" rel=\"external\">6ReactNative源码篇：通信机制</a></li>\n</ul>\n<h2 id=\"ReactNative实践篇\"><a href=\"#ReactNative实践篇\" class=\"headerlink\" title=\"ReactNative实践篇\"></a>ReactNative实践篇</h2><blockquote>\n<p>本篇系列文章主要从性能优化、崩溃监测等方面进一步阐述ReactNative在生产环境下的最佳实践以及改进优化。</p>\n</blockquote>\n<ul>\n<li>1ReactNative实践篇：性能优化</li>\n<li>2ReactNative实践篇：崩溃监测</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"React-Native优秀资料\"><a href=\"#React-Native优秀资料\" class=\"headerlink\" title=\"React Native优秀资料\"></a>React Native优秀资料</h3><p>推荐一些关于React Native的比较高质量资料。</p>\n<ul>\n<li><a href=\"https://github.com/jondot/awesome-react-native\" target=\"_blank\" rel=\"external\">Awesome React Native</a>：Awesome React Native components, news, tools, and learning material!</li>\n<li><a href=\"https://github.com/reactnativecn/react-native-guide\" target=\"_blank\" rel=\"external\">react-native-guide</a>：React Native指南汇集了各类react-native学习资源、开源App和组件</li>\n<li><a href=\"https://github.com/fangwei716/30-days-of-react-native\" target=\"_blank\" rel=\"external\">fangwei716/30-days-of-react-native</a></li>\n<li><a href=\"https://github.com/fbsamples/f8app\" target=\"_blank\" rel=\"external\">fbsamples/f8app</a></li>\n<li><a href=\"https://f8-app.liaohuqiu.net/\" target=\"_blank\" rel=\"external\">构建 F8 App / React Native 开发指南</a></li>\n</ul>\n<h3 id=\"React-Native技术分享\"><a href=\"#React-Native技术分享\" class=\"headerlink\" title=\"React Native技术分享\"></a>React Native技术分享</h3><p>前段时间在公司分享会上做了关于React Native实现原理的分享，以下是分享会的PPT。</p>\n<p><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片01.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片02.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片03.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片04.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片05.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片06.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片07.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片08.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片09.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片10.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片11.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片12.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片13.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片14.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片15.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片16.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片17.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片18.png\"><br><img src=\"https://github.com/guoxiaoxing/react-native/raw/master/art/source/ppt/幻灯片19.png\"></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}